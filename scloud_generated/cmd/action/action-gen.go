// Package action -- generated by scloudgen
// !! DO NOT EDIT !!
//
package action

import (
	"github.com/spf13/cobra"
	impl "github.com/splunk/splunk-cloud-sdk-go/scloud_generated/pkg/action"
)


// createAction -- Creates an action template.
var createActionCmd = &cobra.Command{
	Use:   "create-action",
	Short: "Creates an action template.",
	RunE:  impl.CreateAction,
}

// createActionEmailAction -- Creates an action template.
var createActionEmailActionCmd = &cobra.Command{
	Use:   "create-action-email-action",
	Short: "Creates an action template.",
	RunE:  impl.CreateActionEmailAction,
}

// createActionWebhookAction -- Creates an action template.
var createActionWebhookActionCmd = &cobra.Command{
	Use:   "create-action-webhook-action",
	Short: "Creates an action template.",
	RunE:  impl.CreateActionWebhookAction,
}

// deleteAction -- Removes an action template.
var deleteActionCmd = &cobra.Command{
	Use:   "delete-action",
	Short: "Removes an action template.",
	RunE:  impl.DeleteAction,
}

// getAction -- Returns a specific action template.
var getActionCmd = &cobra.Command{
	Use:   "get-action",
	Short: "Returns a specific action template.",
	RunE:  impl.GetAction,
}

// getActionStatus -- Returns the status of an action that was invoked. The status is available for 4 days after the last status change.
var getActionStatusCmd = &cobra.Command{
	Use:   "get-action-status",
	Short: "Returns the status of an action that was invoked. The status is available for 4 days after the last status change.",
	RunE:  impl.GetActionStatus,
}

// getActionStatusDetails -- Returns the status details of the invoked email action. The status is available for 4 days after the last status change.
var getActionStatusDetailsCmd = &cobra.Command{
	Use:   "get-action-status-details",
	Short: "Returns the status details of the invoked email action. The status is available for 4 days after the last status change.",
	RunE:  impl.GetActionStatusDetails,
}

// getPublicWebhookKeys -- Returns an array of one or two webhook keys. The first key is active. The second key, if present, is expired.
var getPublicWebhookKeysCmd = &cobra.Command{
	Use:   "get-public-webhook-keys",
	Short: "Returns an array of one or two webhook keys. The first key is active. The second key, if present, is expired.",
	RunE:  impl.GetPublicWebhookKeys,
}

// listActions -- Returns the list of action templates.
var listActionsCmd = &cobra.Command{
	Use:   "list-actions",
	Short: "Returns the list of action templates.",
	RunE:  impl.ListActions,
}

// triggerAction -- Invokes an action.
var triggerActionCmd = &cobra.Command{
	Use:   "trigger-action",
	Short: "Invokes an action.",
	RunE:  impl.TriggerAction,
}

// updateAction -- Modifies an action template.
var updateActionCmd = &cobra.Command{
	Use:   "update-action",
	Short: "Modifies an action template.",
	RunE:  impl.UpdateAction,
}

// updateActionEmailActionMutable -- Modifies an action template.
var updateActionEmailActionMutableCmd = &cobra.Command{
	Use:   "update-action-email-action-mutable",
	Short: "Modifies an action template.",
	RunE:  impl.UpdateActionEmailActionMutable,
}

// updateActionWebhookActionMutable -- Modifies an action template.
var updateActionWebhookActionMutableCmd = &cobra.Command{
	Use:   "update-action-webhook-action-mutable",
	Short: "Modifies an action template.",
	RunE:  impl.UpdateActionWebhookActionMutable,
}


func init() {
	actionCmd.AddCommand(createActionCmd)

	createActionCmd.AddCommand(createActionEmailActionCmd)
	var createActionEmailActionAddresses []string
	createActionEmailActionCmd.Flags().StringSliceVar(&createActionEmailActionAddresses, "addresses", nil, "An array of email addresses to include as recipients. Requires a special permission set for use. Please DO NOT include actual bouncing emails in automated testing.")

	var createActionEmailActionBody string
	createActionEmailActionCmd.Flags().StringVar(&createActionEmailActionBody, "body", "", "HTML content to send as the body of the email. You can use a template in this field.")

	var createActionEmailActionBodyPlainText string
	createActionEmailActionCmd.Flags().StringVar(&createActionEmailActionBodyPlainText, "body-plain-text", "", "Optional text to send as the text/plain part of the email. If this field is not set for an email action, the Action service converts the value from the body field to text and sends that as the text/plain part when invoking the action. You can use a template in this field.")

	var createActionEmailActionFromName string
	createActionEmailActionCmd.Flags().StringVar(&createActionEmailActionFromName, "from-name", "", "Optional text providing a human-friendly name for the sender. Must be less than or equal to 81 characters. You can use a template in this field.")

	var createActionEmailActionKind string
	createActionEmailActionCmd.Flags().StringVar(&createActionEmailActionKind, "kind", "", "This is a required parameter. can accept values webhook, email")
	createActionEmailActionCmd.MarkFlagRequired("kind")

	var createActionEmailActionMembers []string
	createActionEmailActionCmd.Flags().StringSliceVar(&createActionEmailActionMembers, "members", nil, "An array of tenant member names, whose profile email addresses will be included as recipients.")

	var createActionEmailActionName string
	createActionEmailActionCmd.Flags().StringVar(&createActionEmailActionName, "name", "", "This is a required parameter.The name of the action, as one or more identifier strings separated by periods. Each identifier string consists of lowercase letters, digits, and underscores, and cannot start with a digit.")
	createActionEmailActionCmd.MarkFlagRequired("name")

	var createActionEmailActionSubject string
	createActionEmailActionCmd.Flags().StringVar(&createActionEmailActionSubject, "subject", "", "The subject of the email. You can use a template in this field.")

	var createActionEmailActionTitle string
	createActionEmailActionCmd.Flags().StringVar(&createActionEmailActionTitle, "title", "", "A human-readable title for the action. Must be less than or equal to 128 characters.")


	createActionCmd.AddCommand(createActionWebhookActionCmd)
	var createActionWebhookActionKind string
	createActionWebhookActionCmd.Flags().StringVar(&createActionWebhookActionKind, "kind", "", "This is a required parameter. can accept values webhook, email")
	createActionWebhookActionCmd.MarkFlagRequired("kind")

	var createActionWebhookActionName string
	createActionWebhookActionCmd.Flags().StringVar(&createActionWebhookActionName, "name", "", "This is a required parameter.The name of the action, as one or more identifier strings separated by periods. Each identifier string consists of lowercase letters, digits, and underscores, and cannot start with a digit.")
	createActionWebhookActionCmd.MarkFlagRequired("name")

	var createActionWebhookActionTitle string
	createActionWebhookActionCmd.Flags().StringVar(&createActionWebhookActionTitle, "title", "", "A human-readable title for the action. Must be less than 128 characters.")

	var createActionWebhookActionWebhookHeaders string
	createActionWebhookActionCmd.Flags().StringVar(&createActionWebhookActionWebhookHeaders, "webhook-headers", "", "")

	var createActionWebhookActionWebhookPayload string
	createActionWebhookActionCmd.Flags().StringVar(&createActionWebhookActionWebhookPayload, "webhook-payload", "", "This is a required parameter.The (possibly) templated payload body, which is POSTed to the webhookUrl when invoked.")
	createActionWebhookActionCmd.MarkFlagRequired("webhookPayload")

	var createActionWebhookActionWebhookUrl string
	createActionWebhookActionCmd.Flags().StringVar(&createActionWebhookActionWebhookUrl, "webhook-url", "", "This is a required parameter.Only HTTPS is allowed.")
	createActionWebhookActionCmd.MarkFlagRequired("webhookUrl")






	actionCmd.AddCommand(createActionEmailActionCmd)




	actionCmd.AddCommand(createActionWebhookActionCmd)




	actionCmd.AddCommand(deleteActionCmd)

	var deleteActionActionName string
	deleteActionCmd.Flags().StringVar(&deleteActionActionName, "action-name", "", "This is a required parameter.The name of the action as one or more identifier strings separated by periods. Each identifier string consists of lowercase letters, digits, and underscores, and cannot start with a digit.")
	deleteActionCmd.MarkFlagRequired("action-name")



	actionCmd.AddCommand(getActionCmd)

	var getActionActionName string
	getActionCmd.Flags().StringVar(&getActionActionName, "action-name", "", "This is a required parameter.The name of the action as one or more identifier strings separated by periods. Each identifier string consists of lowercase letters, digits, and underscores, and cannot start with a digit.")
	getActionCmd.MarkFlagRequired("action-name")



	actionCmd.AddCommand(getActionStatusCmd)

	var getActionStatusActionName string
	getActionStatusCmd.Flags().StringVar(&getActionStatusActionName, "action-name", "", "This is a required parameter.The name of the action as one or more identifier strings separated by periods. Each identifier string consists of lowercase letters, digits, and underscores, and cannot start with a digit.")
	getActionStatusCmd.MarkFlagRequired("action-name")
	var getActionStatusStatusId string
	getActionStatusCmd.Flags().StringVar(&getActionStatusStatusId, "status-id", "", "This is a required parameter.The ID of the action status.")
	getActionStatusCmd.MarkFlagRequired("status-id")



	actionCmd.AddCommand(getActionStatusDetailsCmd)

	var getActionStatusDetailsActionName string
	getActionStatusDetailsCmd.Flags().StringVar(&getActionStatusDetailsActionName, "action-name", "", "This is a required parameter.The name of the action as one or more identifier strings separated by periods. Each identifier string consists of lowercase letters, digits, and underscores, and cannot start with a digit.")
	getActionStatusDetailsCmd.MarkFlagRequired("action-name")
	var getActionStatusDetailsStatusId string
	getActionStatusDetailsCmd.Flags().StringVar(&getActionStatusDetailsStatusId, "status-id", "", "This is a required parameter.The ID of the action status.")
	getActionStatusDetailsCmd.MarkFlagRequired("status-id")



	actionCmd.AddCommand(getPublicWebhookKeysCmd)




	actionCmd.AddCommand(listActionsCmd)




	actionCmd.AddCommand(triggerActionCmd)

	var triggerActionActionName string
	triggerActionCmd.Flags().StringVar(&triggerActionActionName, "action-name", "", "This is a required parameter.The name of the action as one or more identifier strings separated by periods. Each identifier string consists of lowercase letters, digits, and underscores, and cannot start with a digit.")
	triggerActionCmd.MarkFlagRequired("action-name")

	var triggerActionAddresses []string
	triggerActionCmd.Flags().StringSliceVar(&triggerActionAddresses, "addresses", nil,  "An array of email addresses to include as recipients. Requires a special permission set for use. Please DO NOT include actual bouncing emails in automated testing.")
	var triggerActionKind string
	triggerActionCmd.Flags().StringVar(&triggerActionKind, "kind", "",  " can accept values trigger")
	var triggerActionMembers []string
	triggerActionCmd.Flags().StringSliceVar(&triggerActionMembers, "members", nil,  "An array of tenant member names, whose profile email addresses will be included as recipients.")
	var triggerActionPayload string
	triggerActionCmd.Flags().StringVar(&triggerActionPayload, "payload", "",  "")
	var triggerActionTriggerCondition string
	triggerActionCmd.Flags().StringVar(&triggerActionTriggerCondition, "trigger-condition", "",  "A description of the condition that caused the trigger event.")
	var triggerActionTriggerName string
	triggerActionCmd.Flags().StringVar(&triggerActionTriggerName, "trigger-name", "",  "The name of the trigger for which this event was created.")
	var triggerActionTtlSeconds int32
	triggerActionCmd.Flags().Int32Var(&triggerActionTtlSeconds, "ttl-seconds", 0,  "A time to live (TTL), expressed as seconds after createdAt, after which the trigger event will no longer be acted upon.")



	actionCmd.AddCommand(updateActionCmd)

	updateActionCmd.AddCommand(updateActionEmailActionMutableCmd)
	var updateActionEmailActionMutableAddresses []string
	updateActionEmailActionMutableCmd.Flags().StringSliceVar(&updateActionEmailActionMutableAddresses, "addresses", nil, "An array of email addresses to include as recipients. Requires a special permission set for use. Please DO NOT include actual bouncing emails in automated testing.")

	var updateActionEmailActionMutableBody string
	updateActionEmailActionMutableCmd.Flags().StringVar(&updateActionEmailActionMutableBody, "body", "", "HTML content to send as the body of the email. You can use a template in this field.")

	var updateActionEmailActionMutableBodyPlainText string
	updateActionEmailActionMutableCmd.Flags().StringVar(&updateActionEmailActionMutableBodyPlainText, "body-plain-text", "", "Optional text to send as the text/plain part of the email. If this field is not set for an email action, the Action service converts the value from the body field to text and sends that as the text/plain part when invoking the action. You can use a template in this field.")

	var updateActionEmailActionMutableFromName string
	updateActionEmailActionMutableCmd.Flags().StringVar(&updateActionEmailActionMutableFromName, "from-name", "", "Optional text providing a human-friendly name for the sender. Must be less than or equal to 81 characters. You can use a template in this field.")

	var updateActionEmailActionMutableMembers []string
	updateActionEmailActionMutableCmd.Flags().StringSliceVar(&updateActionEmailActionMutableMembers, "members", nil, "An array of tenant member names, whose profile email addresses will be included as recipients.")

	var updateActionEmailActionMutableSubject string
	updateActionEmailActionMutableCmd.Flags().StringVar(&updateActionEmailActionMutableSubject, "subject", "", "The subject of the email. You can use a template in this field.")

	var updateActionEmailActionMutableTitle string
	updateActionEmailActionMutableCmd.Flags().StringVar(&updateActionEmailActionMutableTitle, "title", "", "A human-readable title for the action. Must be less than or equal to 128 characters.")


	updateActionCmd.AddCommand(updateActionWebhookActionMutableCmd)
	var updateActionWebhookActionMutableTitle string
	updateActionWebhookActionMutableCmd.Flags().StringVar(&updateActionWebhookActionMutableTitle, "title", "", "A human-readable title for the action. Must be less than 128 characters.")

	var updateActionWebhookActionMutableWebhookHeaders string
	updateActionWebhookActionMutableCmd.Flags().StringVar(&updateActionWebhookActionMutableWebhookHeaders, "webhook-headers", "", "")

	var updateActionWebhookActionMutableWebhookPayload string
	updateActionWebhookActionMutableCmd.Flags().StringVar(&updateActionWebhookActionMutableWebhookPayload, "webhook-payload", "", "The (possibly) templated payload body, which is POSTed to the webhookUrl when invoked.")

	var updateActionWebhookActionMutableWebhookUrl string
	updateActionWebhookActionMutableCmd.Flags().StringVar(&updateActionWebhookActionMutableWebhookUrl, "webhook-url", "", "Only HTTPS is allowed.")






	actionCmd.AddCommand(updateActionEmailActionMutableCmd)

	var updateActionEmailActionMutableActionName string
	updateActionEmailActionMutableCmd.Flags().StringVar(&updateActionEmailActionMutableActionName, "action-name", "", "This is a required parameter.The name of the action as one or more identifier strings separated by periods. Each identifier string consists of lowercase letters, digits, and underscores, and cannot start with a digit.")
	updateActionEmailActionMutableCmd.MarkFlagRequired("action-name")



	actionCmd.AddCommand(updateActionWebhookActionMutableCmd)

	var updateActionWebhookActionMutableActionName string
	updateActionWebhookActionMutableCmd.Flags().StringVar(&updateActionWebhookActionMutableActionName, "action-name", "", "This is a required parameter.The name of the action as one or more identifier strings separated by periods. Each identifier string consists of lowercase letters, digits, and underscores, and cannot start with a digit.")
	updateActionWebhookActionMutableCmd.MarkFlagRequired("action-name")




}