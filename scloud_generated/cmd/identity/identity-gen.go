// Package identity -- generated by scloudgen
// !! DO NOT EDIT !! 
// 
package identity

import (
	"github.com/spf13/cobra"
	impl "github.com/splunk/splunk-cloud-sdk-go/scloud_generated/pkg/identity"
)


// addGroupMember -- Adds a member to a given group.
var addGroupMemberCmd = &cobra.Command{
	Use:   "add-group-member",
	Short: "Adds a member to a given group.",
	RunE:  impl.AddGroupMember,
}

// addGroupRole -- Adds a role to a given group.
var addGroupRoleCmd = &cobra.Command{
	Use:   "add-group-role",
	Short: "Adds a role to a given group.",
	RunE:  impl.AddGroupRole,
}

// addMember -- Adds a member to a given tenant.
var addMemberCmd = &cobra.Command{
	Use:   "add-member",
	Short: "Adds a member to a given tenant.",
	RunE:  impl.AddMember,
}

// addRolePermission -- Adds permissions to a role in a given tenant.
var addRolePermissionCmd = &cobra.Command{
	Use:   "add-role-permission",
	Short: "Adds permissions to a role in a given tenant.",
	RunE:  impl.AddRolePermission,
}

// createGroup -- Creates a new group in a given tenant.
var createGroupCmd = &cobra.Command{
	Use:   "create-group",
	Short: "Creates a new group in a given tenant.",
	RunE:  impl.CreateGroup,
}

// createRole -- Creates a new authorization role in a given tenant.
var createRoleCmd = &cobra.Command{
	Use:   "create-role",
	Short: "Creates a new authorization role in a given tenant.",
	RunE:  impl.CreateRole,
}

// deleteGroup -- Deletes a group in a given tenant.
var deleteGroupCmd = &cobra.Command{
	Use:   "delete-group",
	Short: "Deletes a group in a given tenant.",
	RunE:  impl.DeleteGroup,
}

// deleteRole -- Deletes a defined role for a given tenant.
var deleteRoleCmd = &cobra.Command{
	Use:   "delete-role",
	Short: "Deletes a defined role for a given tenant.",
	RunE:  impl.DeleteRole,
}

// getGroup -- Returns information about a given group within a tenant.
var getGroupCmd = &cobra.Command{
	Use:   "get-group",
	Short: "Returns information about a given group within a tenant.",
	RunE:  impl.GetGroup,
}

// getGroupMember -- Returns information about a given member within a given group.
var getGroupMemberCmd = &cobra.Command{
	Use:   "get-group-member",
	Short: "Returns information about a given member within a given group.",
	RunE:  impl.GetGroupMember,
}

// getGroupRole -- Returns information about a given role within a given group.
var getGroupRoleCmd = &cobra.Command{
	Use:   "get-group-role",
	Short: "Returns information about a given role within a given group.",
	RunE:  impl.GetGroupRole,
}

// getMember -- Returns a member of a given tenant.
var getMemberCmd = &cobra.Command{
	Use:   "get-member",
	Short: "Returns a member of a given tenant.",
	RunE:  impl.GetMember,
}

// getPrincipal -- Returns the details of a principal, including its tenant membership.
var getPrincipalCmd = &cobra.Command{
	Use:   "get-principal",
	Short: "Returns the details of a principal, including its tenant membership.",
	RunE:  impl.GetPrincipal,
}

// getRole -- Returns a role for a given tenant.
var getRoleCmd = &cobra.Command{
	Use:   "get-role",
	Short: "Returns a role for a given tenant.",
	RunE:  impl.GetRole,
}

// getRolePermission -- Gets a permission for the specified role.
var getRolePermissionCmd = &cobra.Command{
	Use:   "get-role-permission",
	Short: "Gets a permission for the specified role.",
	RunE:  impl.GetRolePermission,
}

// listGroupMembers -- Returns a list of the members within a given group.
var listGroupMembersCmd = &cobra.Command{
	Use:   "list-group-members",
	Short: "Returns a list of the members within a given group.",
	RunE:  impl.ListGroupMembers,
}

// listGroupRoles -- Returns a list of the roles that are attached to a group within a given tenant.
var listGroupRolesCmd = &cobra.Command{
	Use:   "list-group-roles",
	Short: "Returns a list of the roles that are attached to a group within a given tenant.",
	RunE:  impl.ListGroupRoles,
}

// listGroups -- List the groups that exist in a given tenant.
var listGroupsCmd = &cobra.Command{
	Use:   "list-groups",
	Short: "List the groups that exist in a given tenant.",
	RunE:  impl.ListGroups,
}

// listMemberGroups -- Returns a list of groups that a member belongs to within a tenant.
var listMemberGroupsCmd = &cobra.Command{
	Use:   "list-member-groups",
	Short: "Returns a list of groups that a member belongs to within a tenant.",
	RunE:  impl.ListMemberGroups,
}

// listMemberPermissions -- Returns a set of permissions granted to the member within the tenant.

var listMemberPermissionsCmd = &cobra.Command{
	Use:   "list-member-permissions",
	Short: "Returns a set of permissions granted to the member within the tenant.",
	RunE:  impl.ListMemberPermissions,
}

// listMemberRoles -- Returns a set of roles that a given member holds within the tenant.

var listMemberRolesCmd = &cobra.Command{
	Use:   "list-member-roles",
	Short: "Returns a set of roles that a given member holds within the tenant.",
	RunE:  impl.ListMemberRoles,
}

// listMembers -- Returns a list of members in a given tenant.
var listMembersCmd = &cobra.Command{
	Use:   "list-members",
	Short: "Returns a list of members in a given tenant.",
	RunE:  impl.ListMembers,
}

// listPrincipals -- Returns the list of principals known to IAC.
var listPrincipalsCmd = &cobra.Command{
	Use:   "list-principals",
	Short: "Returns the list of principals known to IAC.",
	RunE:  impl.ListPrincipals,
}

// listRoleGroups -- Gets a list of groups for a role in a given tenant.
var listRoleGroupsCmd = &cobra.Command{
	Use:   "list-role-groups",
	Short: "Gets a list of groups for a role in a given tenant.",
	RunE:  impl.ListRoleGroups,
}

// listRolePermissions -- Gets the permissions for a role in a given tenant.
var listRolePermissionsCmd = &cobra.Command{
	Use:   "list-role-permissions",
	Short: "Gets the permissions for a role in a given tenant.",
	RunE:  impl.ListRolePermissions,
}

// listRoles -- Returns all roles for a given tenant.
var listRolesCmd = &cobra.Command{
	Use:   "list-roles",
	Short: "Returns all roles for a given tenant.",
	RunE:  impl.ListRoles,
}

// removeGroupMember -- Removes the member from a given group.
var removeGroupMemberCmd = &cobra.Command{
	Use:   "remove-group-member",
	Short: "Removes the member from a given group.",
	RunE:  impl.RemoveGroupMember,
}

// removeGroupRole -- Removes a role from a given group.
var removeGroupRoleCmd = &cobra.Command{
	Use:   "remove-group-role",
	Short: "Removes a role from a given group.",
	RunE:  impl.RemoveGroupRole,
}

// removeMember -- Removes a member from a given tenant
var removeMemberCmd = &cobra.Command{
	Use:   "remove-member",
	Short: "Removes a member from a given tenant",
	RunE:  impl.RemoveMember,
}

// removeRolePermission -- Removes a permission from the role.
var removeRolePermissionCmd = &cobra.Command{
	Use:   "remove-role-permission",
	Short: "Removes a permission from the role.",
	RunE:  impl.RemoveRolePermission,
}

// validateToken -- Validates the access token obtained from the authorization header and returns the principal name and tenant memberships.

var validateTokenCmd = &cobra.Command{
	Use:   "validate-token",
	Short: "Validates the access token obtained from the authorization header and returns the principal name and tenant memberships.",
	RunE:  impl.ValidateToken,
}


func init() {

    identityCmd.AddCommand(addGroupMemberCmd)
    identityCmd.AddCommand(addGroupRoleCmd)
    identityCmd.AddCommand(addMemberCmd)
    identityCmd.AddCommand(addRolePermissionCmd)
    identityCmd.AddCommand(createGroupCmd)
    identityCmd.AddCommand(createRoleCmd)
    identityCmd.AddCommand(deleteGroupCmd)
    identityCmd.AddCommand(deleteRoleCmd)
    identityCmd.AddCommand(getGroupCmd)
    identityCmd.AddCommand(getGroupMemberCmd)
    identityCmd.AddCommand(getGroupRoleCmd)
    identityCmd.AddCommand(getMemberCmd)
    identityCmd.AddCommand(getPrincipalCmd)
    identityCmd.AddCommand(getRoleCmd)
    identityCmd.AddCommand(getRolePermissionCmd)
    identityCmd.AddCommand(listGroupMembersCmd)
    identityCmd.AddCommand(listGroupRolesCmd)
    identityCmd.AddCommand(listGroupsCmd)
    identityCmd.AddCommand(listMemberGroupsCmd)
    identityCmd.AddCommand(listMemberPermissionsCmd)
    identityCmd.AddCommand(listMemberRolesCmd)
    identityCmd.AddCommand(listMembersCmd)
    identityCmd.AddCommand(listPrincipalsCmd)
    identityCmd.AddCommand(listRoleGroupsCmd)
    identityCmd.AddCommand(listRolePermissionsCmd)
    identityCmd.AddCommand(listRolesCmd)
    identityCmd.AddCommand(removeGroupMemberCmd)
    identityCmd.AddCommand(removeGroupRoleCmd)
    identityCmd.AddCommand(removeMemberCmd)
    identityCmd.AddCommand(removeRolePermissionCmd)
    identityCmd.AddCommand(validateTokenCmd)
    

	// subTest1Cmd.Flags().StringP("id", "i", "", "resource identifier")
	// subTest2Cmd.Flags().StringP("id", "i", "", "resource identifier")
}
