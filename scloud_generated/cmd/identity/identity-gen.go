// Package identity -- generated by scloudgen
// !! DO NOT EDIT !!
//
package identity

import (
	"github.com/spf13/cobra"
	impl "github.com/splunk/splunk-cloud-sdk-go/scloud_generated/pkg/identity"
)

// addGroupMember -- Adds a member to a given group.
var addGroupMemberCmd = &cobra.Command{
	Use:   "add-group-member",
	Short: "Adds a member to a given group.",
	RunE:  impl.AddGroupMember,
}

// addGroupRole -- Adds a role to a given group.
var addGroupRoleCmd = &cobra.Command{
	Use:   "add-group-role",
	Short: "Adds a role to a given group.",
	RunE:  impl.AddGroupRole,
}

// addMember -- Adds a member to a given tenant.
var addMemberCmd = &cobra.Command{
	Use:   "add-member",
	Short: "Adds a member to a given tenant.",
	RunE:  impl.AddMember,
}

// addRolePermission -- Adds permissions to a role in a given tenant.
var addRolePermissionCmd = &cobra.Command{
	Use:   "add-role-permission",
	Short: "Adds permissions to a role in a given tenant.",
	RunE:  impl.AddRolePermission,
}

// createGroup -- Creates a new group in a given tenant.
var createGroupCmd = &cobra.Command{
	Use:   "create-group",
	Short: "Creates a new group in a given tenant.",
	RunE:  impl.CreateGroup,
}

// createRole -- Creates a new authorization role in a given tenant.
var createRoleCmd = &cobra.Command{
	Use:   "create-role",
	Short: "Creates a new authorization role in a given tenant.",
	RunE:  impl.CreateRole,
}

// deleteGroup -- Deletes a group in a given tenant.
var deleteGroupCmd = &cobra.Command{
	Use:   "delete-group",
	Short: "Deletes a group in a given tenant.",
	RunE:  impl.DeleteGroup,
}

// deleteRole -- Deletes a defined role for a given tenant.
var deleteRoleCmd = &cobra.Command{
	Use:   "delete-role",
	Short: "Deletes a defined role for a given tenant.",
	RunE:  impl.DeleteRole,
}

// getGroup -- Returns information about a given group within a tenant.
var getGroupCmd = &cobra.Command{
	Use:   "get-group",
	Short: "Returns information about a given group within a tenant.",
	RunE:  impl.GetGroup,
}

// getGroupMember -- Returns information about a given member within a given group.
var getGroupMemberCmd = &cobra.Command{
	Use:   "get-group-member",
	Short: "Returns information about a given member within a given group.",
	RunE:  impl.GetGroupMember,
}

// getGroupRole -- Returns information about a given role within a given group.
var getGroupRoleCmd = &cobra.Command{
	Use:   "get-group-role",
	Short: "Returns information about a given role within a given group.",
	RunE:  impl.GetGroupRole,
}

// getMember -- Returns a member of a given tenant.
var getMemberCmd = &cobra.Command{
	Use:   "get-member",
	Short: "Returns a member of a given tenant.",
	RunE:  impl.GetMember,
}

// getPrincipal -- Returns the details of a principal, including its tenant membership.
var getPrincipalCmd = &cobra.Command{
	Use:   "get-principal",
	Short: "Returns the details of a principal, including its tenant membership.",
	RunE:  impl.GetPrincipal,
}

// getRole -- Returns a role for a given tenant.
var getRoleCmd = &cobra.Command{
	Use:   "get-role",
	Short: "Returns a role for a given tenant.",
	RunE:  impl.GetRole,
}

// getRolePermission -- Gets a permission for the specified role.
var getRolePermissionCmd = &cobra.Command{
	Use:   "get-role-permission",
	Short: "Gets a permission for the specified role.",
	RunE:  impl.GetRolePermission,
}

// listGroupMembers -- Returns a list of the members within a given group.
var listGroupMembersCmd = &cobra.Command{
	Use:   "list-group-members",
	Short: "Returns a list of the members within a given group.",
	RunE:  impl.ListGroupMembers,
}

// listGroupRoles -- Returns a list of the roles that are attached to a group within a given tenant.
var listGroupRolesCmd = &cobra.Command{
	Use:   "list-group-roles",
	Short: "Returns a list of the roles that are attached to a group within a given tenant.",
	RunE:  impl.ListGroupRoles,
}

// listGroups -- List the groups that exist in a given tenant.
var listGroupsCmd = &cobra.Command{
	Use:   "list-groups",
	Short: "List the groups that exist in a given tenant.",
	RunE:  impl.ListGroups,
}

// listMemberGroups -- Returns a list of groups that a member belongs to within a tenant.
var listMemberGroupsCmd = &cobra.Command{
	Use:   "list-member-groups",
	Short: "Returns a list of groups that a member belongs to within a tenant.",
	RunE:  impl.ListMemberGroups,
}

// listMemberPermissions -- Returns a set of permissions granted to the member within the tenant.

var listMemberPermissionsCmd = &cobra.Command{
	Use:   "list-member-permissions",
	Short: "Returns a set of permissions granted to the member within the tenant.",
	RunE:  impl.ListMemberPermissions,
}

// listMemberRoles -- Returns a set of roles that a given member holds within the tenant.

var listMemberRolesCmd = &cobra.Command{
	Use:   "list-member-roles",
	Short: "Returns a set of roles that a given member holds within the tenant.",
	RunE:  impl.ListMemberRoles,
}

// listMembers -- Returns a list of members in a given tenant.
var listMembersCmd = &cobra.Command{
	Use:   "list-members",
	Short: "Returns a list of members in a given tenant.",
	RunE:  impl.ListMembers,
}

// listPrincipals -- Returns the list of principals that the Identity service knows about.
var listPrincipalsCmd = &cobra.Command{
	Use:   "list-principals",
	Short: "Returns the list of principals that the Identity service knows about.",
	RunE:  impl.ListPrincipals,
}

// listRoleGroups -- Gets a list of groups for a role in a given tenant.
var listRoleGroupsCmd = &cobra.Command{
	Use:   "list-role-groups",
	Short: "Gets a list of groups for a role in a given tenant.",
	RunE:  impl.ListRoleGroups,
}

// listRolePermissions -- Gets the permissions for a role in a given tenant.
var listRolePermissionsCmd = &cobra.Command{
	Use:   "list-role-permissions",
	Short: "Gets the permissions for a role in a given tenant.",
	RunE:  impl.ListRolePermissions,
}

// listRoles -- Returns all roles for a given tenant.
var listRolesCmd = &cobra.Command{
	Use:   "list-roles",
	Short: "Returns all roles for a given tenant.",
	RunE:  impl.ListRoles,
}

// removeGroupMember -- Removes the member from a given group.
var removeGroupMemberCmd = &cobra.Command{
	Use:   "remove-group-member",
	Short: "Removes the member from a given group.",
	RunE:  impl.RemoveGroupMember,
}

// removeGroupRole -- Removes a role from a given group.
var removeGroupRoleCmd = &cobra.Command{
	Use:   "remove-group-role",
	Short: "Removes a role from a given group.",
	RunE:  impl.RemoveGroupRole,
}

// removeMember -- Removes a member from a given tenant
var removeMemberCmd = &cobra.Command{
	Use:   "remove-member",
	Short: "Removes a member from a given tenant",
	RunE:  impl.RemoveMember,
}

// removeRolePermission -- Removes a permission from the role.
var removeRolePermissionCmd = &cobra.Command{
	Use:   "remove-role-permission",
	Short: "Removes a permission from the role.",
	RunE:  impl.RemoveRolePermission,
}

// validateToken -- Validates the access token obtained from the authorization header and returns the principal name and tenant memberships.

var validateTokenCmd = &cobra.Command{
	Use:   "validate-token",
	Short: "[not implemented] Validates the access token obtained from the authorization header and returns the principal name and tenant memberships.",
	RunE:  impl.ValidateToken,
}

func init() {
	identityCmd.AddCommand(addGroupMemberCmd)
	var addGroupMemberGroup string
	addGroupMemberCmd.Flags().StringVar(&addGroupMemberGroup, "group", "", "The group name.")
	addGroupMemberCmd.MarkFlagRequired("group")
	var addGroupMemberName string
	addGroupMemberCmd.Flags().StringVar(&addGroupMemberName, "name", "", "")
	addGroupMemberCmd.MarkFlagRequired("name")

	identityCmd.AddCommand(addGroupRoleCmd)
	var addGroupRoleGroup string
	addGroupRoleCmd.Flags().StringVar(&addGroupRoleGroup, "group", "", "The group name.")
	addGroupRoleCmd.MarkFlagRequired("group")
	var addGroupRoleName string
	addGroupRoleCmd.Flags().StringVar(&addGroupRoleName, "name", "", "")
	addGroupRoleCmd.MarkFlagRequired("name")

	identityCmd.AddCommand(addMemberCmd)
	var addMemberName string
	addMemberCmd.Flags().StringVar(&addMemberName, "name", "", "")
	addMemberCmd.MarkFlagRequired("name")

	identityCmd.AddCommand(addRolePermissionCmd)
	var addRolePermissionBody string
	addRolePermissionCmd.Flags().StringVar(&addRolePermissionBody, "body", "", "The request body")
	addRolePermissionCmd.MarkFlagRequired("body")
	var addRolePermissionRole string
	addRolePermissionCmd.Flags().StringVar(&addRolePermissionRole, "role", "", "The role name.")
	addRolePermissionCmd.MarkFlagRequired("role")

	identityCmd.AddCommand(createGroupCmd)
	var createGroupName string
	createGroupCmd.Flags().StringVar(&createGroupName, "name", "", "")
	createGroupCmd.MarkFlagRequired("name")

	identityCmd.AddCommand(createRoleCmd)
	var createRoleName string
	createRoleCmd.Flags().StringVar(&createRoleName, "name", "", "")
	createRoleCmd.MarkFlagRequired("name")

	identityCmd.AddCommand(deleteGroupCmd)
	var deleteGroupGroup string
	deleteGroupCmd.Flags().StringVar(&deleteGroupGroup, "group", "", "The group name.")
	deleteGroupCmd.MarkFlagRequired("group")

	identityCmd.AddCommand(deleteRoleCmd)
	var deleteRoleRole string
	deleteRoleCmd.Flags().StringVar(&deleteRoleRole, "role", "", "The role name.")
	deleteRoleCmd.MarkFlagRequired("role")

	identityCmd.AddCommand(getGroupCmd)
	var getGroupGroup string
	getGroupCmd.Flags().StringVar(&getGroupGroup, "group", "", "The group name.")
	getGroupCmd.MarkFlagRequired("group")

	identityCmd.AddCommand(getGroupMemberCmd)
	var getGroupMemberGroup string
	getGroupMemberCmd.Flags().StringVar(&getGroupMemberGroup, "group", "", "The group name.")
	getGroupMemberCmd.MarkFlagRequired("group")
	var getGroupMemberMember string
	getGroupMemberCmd.Flags().StringVar(&getGroupMemberMember, "member", "", "The member name.")
	getGroupMemberCmd.MarkFlagRequired("member")

	identityCmd.AddCommand(getGroupRoleCmd)
	var getGroupRoleGroup string
	getGroupRoleCmd.Flags().StringVar(&getGroupRoleGroup, "group", "", "The group name.")
	getGroupRoleCmd.MarkFlagRequired("group")
	var getGroupRoleRole string
	getGroupRoleCmd.Flags().StringVar(&getGroupRoleRole, "role", "", "The role name.")
	getGroupRoleCmd.MarkFlagRequired("role")

	identityCmd.AddCommand(getMemberCmd)
	var getMemberMember string
	getMemberCmd.Flags().StringVar(&getMemberMember, "member", "", "The member name.")
	getMemberCmd.MarkFlagRequired("member")

	identityCmd.AddCommand(getPrincipalCmd)
	var getPrincipalPrincipal string
	getPrincipalCmd.Flags().StringVar(&getPrincipalPrincipal, "principal", "", "The principal name.")
	getPrincipalCmd.MarkFlagRequired("principal")

	identityCmd.AddCommand(getRoleCmd)
	var getRoleRole string
	getRoleCmd.Flags().StringVar(&getRoleRole, "role", "", "The role name.")
	getRoleCmd.MarkFlagRequired("role")

	identityCmd.AddCommand(getRolePermissionCmd)
	var getRolePermissionPermission string
	getRolePermissionCmd.Flags().StringVar(&getRolePermissionPermission, "permission", "", "The permission string.")
	getRolePermissionCmd.MarkFlagRequired("permission")
	var getRolePermissionRole string
	getRolePermissionCmd.Flags().StringVar(&getRolePermissionRole, "role", "", "The role name.")
	getRolePermissionCmd.MarkFlagRequired("role")

	identityCmd.AddCommand(listGroupMembersCmd)
	var listGroupMembersGroup string
	listGroupMembersCmd.Flags().StringVar(&listGroupMembersGroup, "group", "", "The group name.")
	listGroupMembersCmd.MarkFlagRequired("group")

	identityCmd.AddCommand(listGroupRolesCmd)
	var listGroupRolesGroup string
	listGroupRolesCmd.Flags().StringVar(&listGroupRolesGroup, "group", "", "The group name.")
	listGroupRolesCmd.MarkFlagRequired("group")

	identityCmd.AddCommand(listGroupsCmd)

	identityCmd.AddCommand(listMemberGroupsCmd)
	var listMemberGroupsMember string
	listMemberGroupsCmd.Flags().StringVar(&listMemberGroupsMember, "member", "", "The member name.")
	listMemberGroupsCmd.MarkFlagRequired("member")

	identityCmd.AddCommand(listMemberPermissionsCmd)
	var listMemberPermissionsMember string
	listMemberPermissionsCmd.Flags().StringVar(&listMemberPermissionsMember, "member", "", "The member name.")
	listMemberPermissionsCmd.MarkFlagRequired("member")

	identityCmd.AddCommand(listMemberRolesCmd)
	var listMemberRolesMember string
	listMemberRolesCmd.Flags().StringVar(&listMemberRolesMember, "member", "", "The member name.")
	listMemberRolesCmd.MarkFlagRequired("member")

	identityCmd.AddCommand(listMembersCmd)

	identityCmd.AddCommand(listPrincipalsCmd)

	identityCmd.AddCommand(listRoleGroupsCmd)
	var listRoleGroupsRole string
	listRoleGroupsCmd.Flags().StringVar(&listRoleGroupsRole, "role", "", "The role name.")
	listRoleGroupsCmd.MarkFlagRequired("role")

	identityCmd.AddCommand(listRolePermissionsCmd)
	var listRolePermissionsRole string
	listRolePermissionsCmd.Flags().StringVar(&listRolePermissionsRole, "role", "", "The role name.")
	listRolePermissionsCmd.MarkFlagRequired("role")

	identityCmd.AddCommand(listRolesCmd)

	identityCmd.AddCommand(removeGroupMemberCmd)
	var removeGroupMemberGroup string
	removeGroupMemberCmd.Flags().StringVar(&removeGroupMemberGroup, "group", "", "The group name.")
	removeGroupMemberCmd.MarkFlagRequired("group")
	var removeGroupMemberMember string
	removeGroupMemberCmd.Flags().StringVar(&removeGroupMemberMember, "member", "", "The member name.")
	removeGroupMemberCmd.MarkFlagRequired("member")

	identityCmd.AddCommand(removeGroupRoleCmd)
	var removeGroupRoleGroup string
	removeGroupRoleCmd.Flags().StringVar(&removeGroupRoleGroup, "group", "", "The group name.")
	removeGroupRoleCmd.MarkFlagRequired("group")
	var removeGroupRoleRole string
	removeGroupRoleCmd.Flags().StringVar(&removeGroupRoleRole, "role", "", "The role name.")
	removeGroupRoleCmd.MarkFlagRequired("role")

	identityCmd.AddCommand(removeMemberCmd)
	var removeMemberMember string
	removeMemberCmd.Flags().StringVar(&removeMemberMember, "member", "", "The member name.")
	removeMemberCmd.MarkFlagRequired("member")

	identityCmd.AddCommand(removeRolePermissionCmd)
	var removeRolePermissionPermission string
	removeRolePermissionCmd.Flags().StringVar(&removeRolePermissionPermission, "permission", "", "The permission string.")
	removeRolePermissionCmd.MarkFlagRequired("permission")
	var removeRolePermissionRole string
	removeRolePermissionCmd.Flags().StringVar(&removeRolePermissionRole, "role", "", "The role name.")
	removeRolePermissionCmd.MarkFlagRequired("role")

	identityCmd.AddCommand(validateTokenCmd)

	var validateTokenInclude string
	validateTokenCmd.Flags().StringVar(&validateTokenInclude, "include", "", "Include additional information to return when validating tenant membership. Valid parameters [tenant, principal]")

}
