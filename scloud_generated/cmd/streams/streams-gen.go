// Package streams -- generated by scloudgen
// !! DO NOT EDIT !!
//
package streams

import (
	"github.com/spf13/cobra"
	impl "github.com/splunk/splunk-cloud-sdk-go/scloud_generated/pkg/streams"
)


// activatePipeline --
var activatePipelineCmd = &cobra.Command{
	Use:   "activate-pipeline",
	Short: "",
	RunE:  impl.ActivatePipeline,
}

// compileDSL --
var compileDSLCmd = &cobra.Command{
	Use:   "compile-dsl",
	Short: "",
	RunE:  impl.CompileDSL,
}

// compileSPL --
var compileSPLCmd = &cobra.Command{
	Use:   "compile-spl",
	Short: "",
	RunE:  impl.CompileSPL,
}

// createConnection --
var createConnectionCmd = &cobra.Command{
	Use:   "create-connection",
	Short: "",
	RunE:  impl.CreateConnection,
}

// createGroup --
var createGroupCmd = &cobra.Command{
	Use:   "create-group",
	Short: "",
	RunE:  impl.CreateGroup,
}

// createPipeline --
var createPipelineCmd = &cobra.Command{
	Use:   "create-pipeline",
	Short: "",
	RunE:  impl.CreatePipeline,
}

// createTemplate --
var createTemplateCmd = &cobra.Command{
	Use:   "create-template",
	Short: "",
	RunE:  impl.CreateTemplate,
}

// deactivatePipeline --
var deactivatePipelineCmd = &cobra.Command{
	Use:   "deactivate-pipeline",
	Short: "",
	RunE:  impl.DeactivatePipeline,
}

// deleteConnection --
var deleteConnectionCmd = &cobra.Command{
	Use:   "delete-connection",
	Short: "",
	RunE:  impl.DeleteConnection,
}

// deleteGroup --
var deleteGroupCmd = &cobra.Command{
	Use:   "delete-group",
	Short: "",
	RunE:  impl.DeleteGroup,
}

// deletePipeline --
var deletePipelineCmd = &cobra.Command{
	Use:   "delete-pipeline",
	Short: "",
	RunE:  impl.DeletePipeline,
}

// deleteTemplate --
var deleteTemplateCmd = &cobra.Command{
	Use:   "delete-template",
	Short: "",
	RunE:  impl.DeleteTemplate,
}

// expandGroup --
var expandGroupCmd = &cobra.Command{
	Use:   "expand-group",
	Short: "",
	RunE:  impl.ExpandGroup,
}

// expandPipeline --
var expandPipelineCmd = &cobra.Command{
	Use:   "expand-pipeline",
	Short: "",
	RunE:  impl.ExpandPipeline,
}

// getGroup --
var getGroupCmd = &cobra.Command{
	Use:   "get-group",
	Short: "",
	RunE:  impl.GetGroup,
}

// getInputSchema --
var getInputSchemaCmd = &cobra.Command{
	Use:   "get-input-schema",
	Short: "",
	RunE:  impl.GetInputSchema,
}

// getOutputSchema --
var getOutputSchemaCmd = &cobra.Command{
	Use:   "get-output-schema",
	Short: "",
	RunE:  impl.GetOutputSchema,
}

// getPipeline --
var getPipelineCmd = &cobra.Command{
	Use:   "get-pipeline",
	Short: "",
	RunE:  impl.GetPipeline,
}

// getPipelineLatestMetrics --
var getPipelineLatestMetricsCmd = &cobra.Command{
	Use:   "get-pipeline-latest-metrics",
	Short: "",
	RunE:  impl.GetPipelineLatestMetrics,
}

// getPipelinesStatus --
var getPipelinesStatusCmd = &cobra.Command{
	Use:   "get-pipelines-status",
	Short: "",
	RunE:  impl.GetPipelinesStatus,
}

// getPreviewData --
var getPreviewDataCmd = &cobra.Command{
	Use:   "get-preview-data",
	Short: "",
	RunE:  impl.GetPreviewData,
}

// getPreviewSession --
var getPreviewSessionCmd = &cobra.Command{
	Use:   "get-preview-session",
	Short: "",
	RunE:  impl.GetPreviewSession,
}

// getPreviewSessionLatestMetrics --
var getPreviewSessionLatestMetricsCmd = &cobra.Command{
	Use:   "get-preview-session-latest-metrics",
	Short: "",
	RunE:  impl.GetPreviewSessionLatestMetrics,
}

// getRegistry --
var getRegistryCmd = &cobra.Command{
	Use:   "get-registry",
	Short: "",
	RunE:  impl.GetRegistry,
}

// getTemplate --
var getTemplateCmd = &cobra.Command{
	Use:   "get-template",
	Short: "",
	RunE:  impl.GetTemplate,
}

// listConnections --
var listConnectionsCmd = &cobra.Command{
	Use:   "list-connections",
	Short: "",
	RunE:  impl.ListConnections,
}

// listConnectors --
var listConnectorsCmd = &cobra.Command{
	Use:   "list-connectors",
	Short: "",
	RunE:  impl.ListConnectors,
}

// listPipelines --
var listPipelinesCmd = &cobra.Command{
	Use:   "list-pipelines",
	Short: "",
	RunE:  impl.ListPipelines,
}

// listTemplates --
var listTemplatesCmd = &cobra.Command{
	Use:   "list-templates",
	Short: "",
	RunE:  impl.ListTemplates,
}

// mergePipelines --
var mergePipelinesCmd = &cobra.Command{
	Use:   "merge-pipelines",
	Short: "",
	RunE:  impl.MergePipelines,
}

// putConnection --
var putConnectionCmd = &cobra.Command{
	Use:   "put-connection",
	Short: "",
	RunE:  impl.PutConnection,
}

// putGroup --
var putGroupCmd = &cobra.Command{
	Use:   "put-group",
	Short: "",
	RunE:  impl.PutGroup,
}

// putTemplate --
var putTemplateCmd = &cobra.Command{
	Use:   "put-template",
	Short: "",
	RunE:  impl.PutTemplate,
}

// reactivatePipeline --
var reactivatePipelineCmd = &cobra.Command{
	Use:   "reactivate-pipeline",
	Short: "",
	RunE:  impl.ReactivatePipeline,
}

// startPreview --
var startPreviewCmd = &cobra.Command{
	Use:   "start-preview",
	Short: "",
	RunE:  impl.StartPreview,
}

// stopPreview --
var stopPreviewCmd = &cobra.Command{
	Use:   "stop-preview",
	Short: "",
	RunE:  impl.StopPreview,
}

// updateConnection --
var updateConnectionCmd = &cobra.Command{
	Use:   "update-connection",
	Short: "",
	RunE:  impl.UpdateConnection,
}

// updateGroup --
var updateGroupCmd = &cobra.Command{
	Use:   "update-group",
	Short: "",
	RunE:  impl.UpdateGroup,
}

// updatePipeline --
var updatePipelineCmd = &cobra.Command{
	Use:   "update-pipeline",
	Short: "",
	RunE:  impl.UpdatePipeline,
}

// updateTemplate --
var updateTemplateCmd = &cobra.Command{
	Use:   "update-template",
	Short: "",
	RunE:  impl.UpdateTemplate,
}

// validatePipeline --
var validatePipelineCmd = &cobra.Command{
	Use:   "validate-pipeline",
	Short: "",
	RunE:  impl.ValidatePipeline,
}


func init() {
	streamsCmd.AddCommand(activatePipelineCmd)
	var activatePipelineId string
	activatePipelineCmd.Flags().StringVar(&activatePipelineId, "id", " ", "id of the pipeline to activate")
	activatePipelineCmd.MarkFlagRequired("id")
	var activatePipelineActivateLatestVersion string
	activatePipelineCmd.Flags().StringVar(&activatePipelineActivateLatestVersion, "activate-latest-version", " ", "Set to true to activate the latest version of the pipeline. Set to false to use the previously activated version of the pipeline. Defaults to true.")
	var activatePipelineAllowNonRestoredState string
	activatePipelineCmd.Flags().StringVar(&activatePipelineAllowNonRestoredState, "allow-non-restored-state", " ", "Set to true to allow the pipeline to ignore any unused progress states. In some cases, when a data pipeline is changed, the progress state will be stored for functions that no longer exist, so this must be set to activate a pipeline in this state. Defaults to false.")
	var activatePipelineSkipRestoreState string
	activatePipelineCmd.Flags().StringVar(&activatePipelineSkipRestoreState, "skip-restore-state", " ", "Set to true to start reading from the latest input rather than from where the pipeline's previous run left off, which can cause data loss. Defaults to false.")


	streamsCmd.AddCommand(compileDSLCmd)
	var compileDSLDsl string
	compileDSLCmd.Flags().StringVar(&compileDSLDsl, "dsl", " ", "The Streams DSL representation of a pipeline.")


	streamsCmd.AddCommand(compileSPLCmd)
	var compileSPLSpl string
	compileSPLCmd.Flags().StringVar(&compileSPLSpl, "spl", " ", "The SPL2 representation of a pipeline or function parameters.")
	var compileSPLSyntax string
	compileSPLCmd.Flags().StringVar(&compileSPLSyntax, "syntax", " ", "The parse parameters as arguments to this SPL2 command")


	streamsCmd.AddCommand(createConnectionCmd)
	var createConnectionConnectorId string
	createConnectionCmd.Flags().StringVar(&createConnectionConnectorId, "connector-id", " ", "The ID of the parent connector.")
	var createConnectionData string
	createConnectionCmd.Flags().StringVar(&createConnectionData, "data", " ", "The key-value pairs of configurations for this connection. Connectors may have some configurations that are required, which all connections must provide values for. For configuration values of type BYTES, the provided values must be Base64 encoded.")
	var createConnectionDescription string
	createConnectionCmd.Flags().StringVar(&createConnectionDescription, "description", " ", "The description of the connection.")
	var createConnectionName string
	createConnectionCmd.Flags().StringVar(&createConnectionName, "name", " ", "The name of the connection.")


	streamsCmd.AddCommand(createGroupCmd)
	var createGroupArguments string
	createGroupCmd.Flags().StringVar(&createGroupArguments, "arguments", " ", "The group function arguments list.")
	var createGroupAst string
	createGroupCmd.Flags().StringVar(&createGroupAst, "ast", " ", "")
	var createGroupAttributes string
	createGroupCmd.Flags().StringVar(&createGroupAttributes, "attributes", " ", "The attributes map for function.")
	var createGroupCategories string
	createGroupCmd.Flags().StringVar(&createGroupCategories, "categories", " ", "The categories for this function.")
	var createGroupMappings string
	createGroupCmd.Flags().StringVar(&createGroupMappings, "mappings", " ", "The group function mappings list.")
	var createGroupName string
	createGroupCmd.Flags().StringVar(&createGroupName, "name", " ", "The group function name.")
	var createGroupOutputType string
	createGroupCmd.Flags().StringVar(&createGroupOutputType, "output-type", " ", "The data type of the function's output.")
	var createGroupScalar string
	createGroupCmd.Flags().StringVar(&createGroupScalar, "scalar", " ", "")
	var createGroupVariadic string
	createGroupCmd.Flags().StringVar(&createGroupVariadic, "variadic", " ", "")


	streamsCmd.AddCommand(createPipelineCmd)
	var createPipelineBypassValidation string
	createPipelineCmd.Flags().StringVar(&createPipelineBypassValidation, "bypass-validation", " ", "Set to true to bypass initial pipeline validation upon creation. The pipeline still needs to be validated before activation. Defaults to false.")
	var createPipelineCreateUserId string
	createPipelineCmd.Flags().StringVar(&createPipelineCreateUserId, "create-user-id", " ", "The user that created the pipeline. Deprecated.")
	var createPipelineData string
	createPipelineCmd.Flags().StringVar(&createPipelineData, "data", " ", "")
	var createPipelineDescription string
	createPipelineCmd.Flags().StringVar(&createPipelineDescription, "description", " ", "The description of the pipeline. Defaults to null.")
	var createPipelineName string
	createPipelineCmd.Flags().StringVar(&createPipelineName, "name", " ", "The name of the pipeline.")


	streamsCmd.AddCommand(createTemplateCmd)
	var createTemplateData string
	createTemplateCmd.Flags().StringVar(&createTemplateData, "data", " ", "")
	var createTemplateDescription string
	createTemplateCmd.Flags().StringVar(&createTemplateDescription, "description", " ", "Template description")
	var createTemplateName string
	createTemplateCmd.Flags().StringVar(&createTemplateName, "name", " ", "Template name")


	streamsCmd.AddCommand(deactivatePipelineCmd)
	var deactivatePipelineId string
	deactivatePipelineCmd.Flags().StringVar(&deactivatePipelineId, "id", " ", "id of the pipeline to deactivate")
	deactivatePipelineCmd.MarkFlagRequired("id")
	var deactivatePipelineSkipSavepoint string
	deactivatePipelineCmd.Flags().StringVar(&deactivatePipelineSkipSavepoint, "skip-savepoint", " ", "Set to true to skip saving the state of a deactivated pipeline. When the pipeline is later activated, it will start with the newest data and skip any data that arrived after this deactivation, which can cause data loss. Defaults to false.")


	streamsCmd.AddCommand(deleteConnectionCmd)
	var deleteConnectionConnectionId string
	deleteConnectionCmd.Flags().StringVar(&deleteConnectionConnectionId, "connection-id", " ", "ID of the connection")
	deleteConnectionCmd.MarkFlagRequired("connectionId")

	streamsCmd.AddCommand(deleteGroupCmd)
	var deleteGroupGroupId string
	deleteGroupCmd.Flags().StringVar(&deleteGroupGroupId, "group-id", " ", "The group function's ID from the function registry")
	deleteGroupCmd.MarkFlagRequired("groupId")

	streamsCmd.AddCommand(deletePipelineCmd)
	var deletePipelineId string
	deletePipelineCmd.Flags().StringVar(&deletePipelineId, "id", " ", "id of the pipeline to delete")
	deletePipelineCmd.MarkFlagRequired("id")

	streamsCmd.AddCommand(deleteTemplateCmd)
	var deleteTemplateTemplateId string
	deleteTemplateCmd.Flags().StringVar(&deleteTemplateTemplateId, "template-id", " ", "ID of the template to delete")
	deleteTemplateCmd.MarkFlagRequired("templateId")

	streamsCmd.AddCommand(expandGroupCmd)
	var expandGroupGroupId string
	expandGroupCmd.Flags().StringVar(&expandGroupGroupId, "group-id", " ", "The group function's ID from the function registry")
	expandGroupCmd.MarkFlagRequired("groupId")
	var expandGroupArguments string
	expandGroupCmd.Flags().StringVar(&expandGroupArguments, "arguments", " ", "Function arguments for the given id. Overrides default values.")
	var expandGroupId string
	expandGroupCmd.Flags().StringVar(&expandGroupId, "id", " ", "The ID associated with your group function in the pipeline Streams JSON")


	streamsCmd.AddCommand(expandPipelineCmd)
	var expandPipelineEdges string
	expandPipelineCmd.Flags().StringVar(&expandPipelineEdges, "edges", " ", "A list of links or connections between the output of one pipeline function and the input of another pipeline function")
	var expandPipelineNodes string
	expandPipelineCmd.Flags().StringVar(&expandPipelineNodes, "nodes", " ", "The functions (or nodes) in your entire pipeline, including each function's operations, attributes, and properties")
	var expandPipelineRootNode string
	expandPipelineCmd.Flags().StringVar(&expandPipelineRootNode, "root-node", " ", "The UUIDs of all sink functions in a given pipeline")


	streamsCmd.AddCommand(getGroupCmd)
	var getGroupGroupId string
	getGroupCmd.Flags().StringVar(&getGroupGroupId, "group-id", " ", "The group function's ID from the function registry")
	getGroupCmd.MarkFlagRequired("groupId")

	streamsCmd.AddCommand(getInputSchemaCmd)
	var getInputSchemaNodeUuid string
	getInputSchemaCmd.Flags().StringVar(&getInputSchemaNodeUuid, "node-uuid", " ", "The function ID.")
	var getInputSchemaTargetPortName string
	getInputSchemaCmd.Flags().StringVar(&getInputSchemaTargetPortName, "target-port-name", " ", "The name of the input port.")
	var getInputSchemaUplJson string
	getInputSchemaCmd.Flags().StringVar(&getInputSchemaUplJson, "upl-json", " ", "")


	streamsCmd.AddCommand(getOutputSchemaCmd)
	var getOutputSchemaNodeUuid string
	getOutputSchemaCmd.Flags().StringVar(&getOutputSchemaNodeUuid, "node-uuid", " ", "The function ID. If omitted, returns the output schema for all functions.")
	var getOutputSchemaSourcePortName string
	getOutputSchemaCmd.Flags().StringVar(&getOutputSchemaSourcePortName, "source-port-name", " ", "The name of the output port. Deprecated.")
	var getOutputSchemaUplJson string
	getOutputSchemaCmd.Flags().StringVar(&getOutputSchemaUplJson, "upl-json", " ", "")


	streamsCmd.AddCommand(getPipelineCmd)
	var getPipelineId string
	getPipelineCmd.Flags().StringVar(&getPipelineId, "id", " ", "id of the pipeline to get")
	getPipelineCmd.MarkFlagRequired("id")
	var getPipelineVersion string
	getPipelineCmd.Flags().StringVar(&getPipelineVersion, "version", " ", "version")


	streamsCmd.AddCommand(getPipelineLatestMetricsCmd)
	var getPipelineLatestMetricsId string
	getPipelineLatestMetricsCmd.Flags().StringVar(&getPipelineLatestMetricsId, "id", " ", "ID of the pipeline to get metrics for")
	getPipelineLatestMetricsCmd.MarkFlagRequired("id")

	streamsCmd.AddCommand(getPipelinesStatusCmd)
	var getPipelinesStatusActivated string
	getPipelinesStatusCmd.Flags().StringVar(&getPipelinesStatusActivated, "activated", " ", "activated")
	var getPipelinesStatusCreateUserId string
	getPipelinesStatusCmd.Flags().StringVar(&getPipelinesStatusCreateUserId, "create-user-id", " ", "createUserId")
	var getPipelinesStatusName string
	getPipelinesStatusCmd.Flags().StringVar(&getPipelinesStatusName, "name", " ", "name")
	var getPipelinesStatusOffset string
	getPipelinesStatusCmd.Flags().StringVar(&getPipelinesStatusOffset, "offset", " ", "offset")
	var getPipelinesStatusPageSize string
	getPipelinesStatusCmd.Flags().StringVar(&getPipelinesStatusPageSize, "page-size", " ", "pageSize")
	var getPipelinesStatusSortDir string
	getPipelinesStatusCmd.Flags().StringVar(&getPipelinesStatusSortDir, "sort-dir", " ", "sortDir")
	var getPipelinesStatusSortField string
	getPipelinesStatusCmd.Flags().StringVar(&getPipelinesStatusSortField, "sort-field", " ", "sortField")


	streamsCmd.AddCommand(getPreviewDataCmd)
	var getPreviewDataPreviewSessionId string
	getPreviewDataCmd.Flags().StringVar(&getPreviewDataPreviewSessionId, "preview-session-id", " ", "ID of the preview session")
	getPreviewDataCmd.MarkFlagRequired("previewSessionId")

	streamsCmd.AddCommand(getPreviewSessionCmd)
	var getPreviewSessionPreviewSessionId string
	getPreviewSessionCmd.Flags().StringVar(&getPreviewSessionPreviewSessionId, "preview-session-id", " ", "ID of the preview session")
	getPreviewSessionCmd.MarkFlagRequired("previewSessionId")

	streamsCmd.AddCommand(getPreviewSessionLatestMetricsCmd)
	var getPreviewSessionLatestMetricsPreviewSessionId string
	getPreviewSessionLatestMetricsCmd.Flags().StringVar(&getPreviewSessionLatestMetricsPreviewSessionId, "preview-session-id", " ", "ID of the preview session")
	getPreviewSessionLatestMetricsCmd.MarkFlagRequired("previewSessionId")

	streamsCmd.AddCommand(getRegistryCmd)
	var getRegistryLocal string
	getRegistryCmd.Flags().StringVar(&getRegistryLocal, "local", " ", "local")


	streamsCmd.AddCommand(getTemplateCmd)
	var getTemplateTemplateId string
	getTemplateCmd.Flags().StringVar(&getTemplateTemplateId, "template-id", " ", "ID of the template")
	getTemplateCmd.MarkFlagRequired("templateId")
	var getTemplateVersion string
	getTemplateCmd.Flags().StringVar(&getTemplateVersion, "version", " ", "version of the template")


	streamsCmd.AddCommand(listConnectionsCmd)
	var listConnectionsConnectorId string
	listConnectionsCmd.Flags().StringVar(&listConnectionsConnectorId, "connector-id", " ", "")
	var listConnectionsCreateUserId string
	listConnectionsCmd.Flags().StringVar(&listConnectionsCreateUserId, "create-user-id", " ", "")
	var listConnectionsFunctionId string
	listConnectionsCmd.Flags().StringVar(&listConnectionsFunctionId, "function-id", " ", "")
	var listConnectionsName string
	listConnectionsCmd.Flags().StringVar(&listConnectionsName, "name", " ", "")
	var listConnectionsOffset string
	listConnectionsCmd.Flags().StringVar(&listConnectionsOffset, "offset", " ", "")
	var listConnectionsPageSize string
	listConnectionsCmd.Flags().StringVar(&listConnectionsPageSize, "page-size", " ", "")
	var listConnectionsShowSecretNames string
	listConnectionsCmd.Flags().StringVar(&listConnectionsShowSecretNames, "show-secret-names", " ", "")
	var listConnectionsSortDir string
	listConnectionsCmd.Flags().StringVar(&listConnectionsSortDir, "sort-dir", " ", "Specify either ascending ('asc') or descending ('desc') sort order for a given field (sortField), which must be set for sortDir to apply. Defaults to 'asc'.")
	var listConnectionsSortField string
	listConnectionsCmd.Flags().StringVar(&listConnectionsSortField, "sort-field", " ", "")


	streamsCmd.AddCommand(listConnectorsCmd)

	streamsCmd.AddCommand(listPipelinesCmd)
	var listPipelinesActivated string
	listPipelinesCmd.Flags().StringVar(&listPipelinesActivated, "activated", " ", "activated")
	var listPipelinesCreateUserId string
	listPipelinesCmd.Flags().StringVar(&listPipelinesCreateUserId, "create-user-id", " ", "createUserId")
	var listPipelinesIncludeData string
	listPipelinesCmd.Flags().StringVar(&listPipelinesIncludeData, "include-data", " ", "includeData")
	var listPipelinesName string
	listPipelinesCmd.Flags().StringVar(&listPipelinesName, "name", " ", "name")
	var listPipelinesOffset string
	listPipelinesCmd.Flags().StringVar(&listPipelinesOffset, "offset", " ", "offset")
	var listPipelinesPageSize string
	listPipelinesCmd.Flags().StringVar(&listPipelinesPageSize, "page-size", " ", "pageSize")
	var listPipelinesSortDir string
	listPipelinesCmd.Flags().StringVar(&listPipelinesSortDir, "sort-dir", " ", "sortDir")
	var listPipelinesSortField string
	listPipelinesCmd.Flags().StringVar(&listPipelinesSortField, "sort-field", " ", "sortField")


	streamsCmd.AddCommand(listTemplatesCmd)
	var listTemplatesOffset string
	listTemplatesCmd.Flags().StringVar(&listTemplatesOffset, "offset", " ", "offset")
	var listTemplatesPageSize string
	listTemplatesCmd.Flags().StringVar(&listTemplatesPageSize, "page-size", " ", "pageSize")
	var listTemplatesSortDir string
	listTemplatesCmd.Flags().StringVar(&listTemplatesSortDir, "sort-dir", " ", "sortDir")
	var listTemplatesSortField string
	listTemplatesCmd.Flags().StringVar(&listTemplatesSortField, "sort-field", " ", "sortField")


	streamsCmd.AddCommand(mergePipelinesCmd)
	var mergePipelinesInputTree string
	mergePipelinesCmd.Flags().StringVar(&mergePipelinesInputTree, "input-tree", " ", "")
	var mergePipelinesMainTree string
	mergePipelinesCmd.Flags().StringVar(&mergePipelinesMainTree, "main-tree", " ", "")
	var mergePipelinesTargetNode string
	mergePipelinesCmd.Flags().StringVar(&mergePipelinesTargetNode, "target-node", " ", "The function ID of the merge target in the main pipeline.")
	var mergePipelinesTargetPort string
	mergePipelinesCmd.Flags().StringVar(&mergePipelinesTargetPort, "target-port", " ", "The input port of the merge target in the main pipeline.")


	streamsCmd.AddCommand(putConnectionCmd)
	var putConnectionConnectionId string
	putConnectionCmd.Flags().StringVar(&putConnectionConnectionId, "connection-id", " ", "ID of the connection")
	putConnectionCmd.MarkFlagRequired("connectionId")
	var putConnectionData string
	putConnectionCmd.Flags().StringVar(&putConnectionData, "data", " ", "The key-value pairs of configurations for this connection. Connectors may have some configurations that are required, which all connections must provide values for. For configuration values of type BYTES, the provided values must be Base64 encoded.")
	var putConnectionDescription string
	putConnectionCmd.Flags().StringVar(&putConnectionDescription, "description", " ", "The description of the connection.")
	var putConnectionName string
	putConnectionCmd.Flags().StringVar(&putConnectionName, "name", " ", "The name of the connection.")


	streamsCmd.AddCommand(putGroupCmd)
	var putGroupGroupId string
	putGroupCmd.Flags().StringVar(&putGroupGroupId, "group-id", " ", "The group function's ID from the function registry")
	putGroupCmd.MarkFlagRequired("groupId")
	var putGroupArguments string
	putGroupCmd.Flags().StringVar(&putGroupArguments, "arguments", " ", "The group function arguments list.")
	var putGroupAst string
	putGroupCmd.Flags().StringVar(&putGroupAst, "ast", " ", "")
	var putGroupAttributes string
	putGroupCmd.Flags().StringVar(&putGroupAttributes, "attributes", " ", "The attributes map for function.")
	var putGroupCategories string
	putGroupCmd.Flags().StringVar(&putGroupCategories, "categories", " ", "The categories for this function.")
	var putGroupMappings string
	putGroupCmd.Flags().StringVar(&putGroupMappings, "mappings", " ", "The group function mappings list.")
	var putGroupName string
	putGroupCmd.Flags().StringVar(&putGroupName, "name", " ", "The group function name.")
	var putGroupOutputType string
	putGroupCmd.Flags().StringVar(&putGroupOutputType, "output-type", " ", "The data type of the function's output.")
	var putGroupScalar string
	putGroupCmd.Flags().StringVar(&putGroupScalar, "scalar", " ", "")
	var putGroupVariadic string
	putGroupCmd.Flags().StringVar(&putGroupVariadic, "variadic", " ", "")


	streamsCmd.AddCommand(putTemplateCmd)
	var putTemplateTemplateId string
	putTemplateCmd.Flags().StringVar(&putTemplateTemplateId, "template-id", " ", "ID of the template")
	putTemplateCmd.MarkFlagRequired("templateId")
	var putTemplateData string
	putTemplateCmd.Flags().StringVar(&putTemplateData, "data", " ", "")
	var putTemplateDescription string
	putTemplateCmd.Flags().StringVar(&putTemplateDescription, "description", " ", "Template description")
	var putTemplateName string
	putTemplateCmd.Flags().StringVar(&putTemplateName, "name", " ", "Template name")


	streamsCmd.AddCommand(reactivatePipelineCmd)
	var reactivatePipelineId string
	reactivatePipelineCmd.Flags().StringVar(&reactivatePipelineId, "id", " ", "Pipeline UUID to reactivate")
	reactivatePipelineCmd.MarkFlagRequired("id")

	streamsCmd.AddCommand(startPreviewCmd)
	var startPreviewRecordsLimit string
	startPreviewCmd.Flags().StringVar(&startPreviewRecordsLimit, "records-limit", " ", "The maximum number of events per function. Defaults to 100.")
	var startPreviewRecordsPerPipeline string
	startPreviewCmd.Flags().StringVar(&startPreviewRecordsPerPipeline, "records-per-pipeline", " ", "The maximum number of events per pipeline. Defaults to 10000.")
	var startPreviewSessionLifetimeMs string
	startPreviewCmd.Flags().StringVar(&startPreviewSessionLifetimeMs, "session-lifetime-ms", " ", "The maximum lifetime of a session, in milliseconds. Defaults to 300,000.")
	var startPreviewStreamingConfigurationId string
	startPreviewCmd.Flags().StringVar(&startPreviewStreamingConfigurationId, "streaming-configuration-id", " ", "Deprecated. Must be null if set.")
	var startPreviewUpl string
	startPreviewCmd.Flags().StringVar(&startPreviewUpl, "upl", " ", "")
	var startPreviewUseNewData string
	startPreviewCmd.Flags().StringVar(&startPreviewUseNewData, "use-new-data", " ", "Deprecated. Must be true if set.")


	streamsCmd.AddCommand(stopPreviewCmd)
	var stopPreviewPreviewSessionId string
	stopPreviewCmd.Flags().StringVar(&stopPreviewPreviewSessionId, "preview-session-id", " ", "ID of the preview session")
	stopPreviewCmd.MarkFlagRequired("previewSessionId")

	streamsCmd.AddCommand(updateConnectionCmd)
	var updateConnectionConnectionId string
	updateConnectionCmd.Flags().StringVar(&updateConnectionConnectionId, "connection-id", " ", "ID of the connection")
	updateConnectionCmd.MarkFlagRequired("connectionId")
	var updateConnectionData string
	updateConnectionCmd.Flags().StringVar(&updateConnectionData, "data", " ", "The key-value pairs of configurations for this connection. Connectors may have some configurations that are required, which all connections must provide values for. For configuration values of type BYTES, the provided values must be Base64 encoded.")
	var updateConnectionDescription string
	updateConnectionCmd.Flags().StringVar(&updateConnectionDescription, "description", " ", "The description of the connection.")
	var updateConnectionName string
	updateConnectionCmd.Flags().StringVar(&updateConnectionName, "name", " ", "The name of the connection.")


	streamsCmd.AddCommand(updateGroupCmd)
	var updateGroupGroupId string
	updateGroupCmd.Flags().StringVar(&updateGroupGroupId, "group-id", " ", "The group function's ID from the function registry")
	updateGroupCmd.MarkFlagRequired("groupId")
	var updateGroupArguments string
	updateGroupCmd.Flags().StringVar(&updateGroupArguments, "arguments", " ", "Group function arguments list.")
	var updateGroupAst string
	updateGroupCmd.Flags().StringVar(&updateGroupAst, "ast", " ", "")
	var updateGroupAttributes string
	updateGroupCmd.Flags().StringVar(&updateGroupAttributes, "attributes", " ", "Attributes map for function.")
	var updateGroupCategories string
	updateGroupCmd.Flags().StringVar(&updateGroupCategories, "categories", " ", "Categories for this function.")
	var updateGroupMappings string
	updateGroupCmd.Flags().StringVar(&updateGroupMappings, "mappings", " ", "Group function mappings list.")
	var updateGroupName string
	updateGroupCmd.Flags().StringVar(&updateGroupName, "name", " ", "The name for the group function.")
	var updateGroupOutputType string
	updateGroupCmd.Flags().StringVar(&updateGroupOutputType, "output-type", " ", "The data type of the output of your function.")
	var updateGroupScalar string
	updateGroupCmd.Flags().StringVar(&updateGroupScalar, "scalar", " ", "")
	var updateGroupVariadic string
	updateGroupCmd.Flags().StringVar(&updateGroupVariadic, "variadic", " ", "")


	streamsCmd.AddCommand(updatePipelineCmd)
	var updatePipelineId string
	updatePipelineCmd.Flags().StringVar(&updatePipelineId, "id", " ", "id of the pipeline to update")
	updatePipelineCmd.MarkFlagRequired("id")
	var updatePipelineBypassValidation string
	updatePipelineCmd.Flags().StringVar(&updatePipelineBypassValidation, "bypass-validation", " ", "Set to true to bypass initial pipeline validation upon creation. The pipeline still needs to be validated before activation. Defaults to false.")
	var updatePipelineCreateUserId string
	updatePipelineCmd.Flags().StringVar(&updatePipelineCreateUserId, "create-user-id", " ", "The user that created the pipeline. Deprecated.")
	var updatePipelineData string
	updatePipelineCmd.Flags().StringVar(&updatePipelineData, "data", " ", "")
	var updatePipelineDescription string
	updatePipelineCmd.Flags().StringVar(&updatePipelineDescription, "description", " ", "The description of the pipeline. Defaults to null.")
	var updatePipelineName string
	updatePipelineCmd.Flags().StringVar(&updatePipelineName, "name", " ", "The name of the pipeline.")


	streamsCmd.AddCommand(updateTemplateCmd)
	var updateTemplateTemplateId string
	updateTemplateCmd.Flags().StringVar(&updateTemplateTemplateId, "template-id", " ", "ID of the template")
	updateTemplateCmd.MarkFlagRequired("templateId")
	var updateTemplateData string
	updateTemplateCmd.Flags().StringVar(&updateTemplateData, "data", " ", "")
	var updateTemplateDescription string
	updateTemplateCmd.Flags().StringVar(&updateTemplateDescription, "description", " ", "Template description")
	var updateTemplateName string
	updateTemplateCmd.Flags().StringVar(&updateTemplateName, "name", " ", "Template name")


	streamsCmd.AddCommand(validatePipelineCmd)
	var validatePipelineUpl string
	validatePipelineCmd.Flags().StringVar(&validatePipelineUpl, "upl", " ", "")



}
