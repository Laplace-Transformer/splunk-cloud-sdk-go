// Package provisioner -- generated by scloudgen
// !! DO NOT EDIT !!
//
package provisioner

import (
	"github.com/spf13/cobra"
	impl "github.com/splunk/splunk-cloud-sdk-go/scloud_generated/pkg/provisioner"
)


// createInvite -- Creates an invite to invite a person to the tenant using their email address
var createInviteCmd = &cobra.Command{
	Use:   "create-invite",
	Short: "Creates an invite to invite a person to the tenant using their email address",
	RunE:  impl.CreateInvite,
}

// createProvisionJob -- Creates a new job that provisions a new tenant and subscribes apps to the tenant
var createProvisionJobCmd = &cobra.Command{
	Use:   "create-provision-job",
	Short: "Creates a new job that provisions a new tenant and subscribes apps to the tenant",
	RunE:  impl.CreateProvisionJob,
}

// deleteInvite -- Deletes an invite in the given tenant
var deleteInviteCmd = &cobra.Command{
	Use:   "delete-invite",
	Short: "Deletes an invite in the given tenant",
	RunE:  impl.DeleteInvite,
}

// getInvite -- Gets an invite in the given tenant
var getInviteCmd = &cobra.Command{
	Use:   "get-invite",
	Short: "Gets an invite in the given tenant",
	RunE:  impl.GetInvite,
}

// getProvisionJob -- Gets details of a specific provision job
var getProvisionJobCmd = &cobra.Command{
	Use:   "get-provision-job",
	Short: "Gets details of a specific provision job",
	RunE:  impl.GetProvisionJob,
}

// getTenant -- Gets a specific tenant
var getTenantCmd = &cobra.Command{
	Use:   "get-tenant",
	Short: "Gets a specific tenant",
	RunE:  impl.GetTenant,
}

// listInvites -- Lists the invites in a given tenant
var listInvitesCmd = &cobra.Command{
	Use:   "list-invites",
	Short: "Lists the invites in a given tenant",
	RunE:  impl.ListInvites,
}

// listProvisionJobs -- Lists all provision jobs created by the user
var listProvisionJobsCmd = &cobra.Command{
	Use:   "list-provision-jobs",
	Short: "Lists all provision jobs created by the user",
	RunE:  impl.ListProvisionJobs,
}

// listTenants -- Lists all tenants that the user can read
var listTenantsCmd = &cobra.Command{
	Use:   "list-tenants",
	Short: "Lists all tenants that the user can read",
	RunE:  impl.ListTenants,
}

// updateInvite -- Updates an invite in the given tenant
var updateInviteCmd = &cobra.Command{
	Use:   "update-invite",
	Short: "Updates an invite in the given tenant",
	RunE:  impl.UpdateInvite,
}


func init() {
	provisionerCmd.AddCommand(createInviteCmd)
	var createInviteEmail string
	createInviteCmd.Flags().StringVar(&createInviteEmail, "email", "", "")
	createInviteCmd.MarkFlagRequired("email")

	var createInviteComment string
	createInviteCmd.Flags().StringVar(&createInviteComment, "comment", "", "")
	var createInviteGroups string
	createInviteCmd.Flags().StringVar(&createInviteGroups, "groups", "", "")


	provisionerCmd.AddCommand(createProvisionJobCmd)

	var createProvisionJobApps string
	createProvisionJobCmd.Flags().StringVar(&createProvisionJobApps, "apps", "", "")
	var createProvisionJobTenant string
	createProvisionJobCmd.Flags().StringVar(&createProvisionJobTenant, "tenant", "", "")


	provisionerCmd.AddCommand(deleteInviteCmd)
	var deleteInviteInviteId string
	deleteInviteCmd.Flags().StringVar(&deleteInviteInviteId, "invite-id", "", "")
	deleteInviteCmd.MarkFlagRequired("invite-id")


	provisionerCmd.AddCommand(getInviteCmd)
	var getInviteInviteId string
	getInviteCmd.Flags().StringVar(&getInviteInviteId, "invite-id", "", "")
	getInviteCmd.MarkFlagRequired("invite-id")


	provisionerCmd.AddCommand(getProvisionJobCmd)
	var getProvisionJobJobId string
	getProvisionJobCmd.Flags().StringVar(&getProvisionJobJobId, "job-id", "", "")
	getProvisionJobCmd.MarkFlagRequired("job-id")


	provisionerCmd.AddCommand(getTenantCmd)
	var getTenantTenantName string
	getTenantCmd.Flags().StringVar(&getTenantTenantName, "tenant-name", "", "")
	getTenantCmd.MarkFlagRequired("tenant-name")


	provisionerCmd.AddCommand(listInvitesCmd)


	provisionerCmd.AddCommand(listProvisionJobsCmd)


	provisionerCmd.AddCommand(listTenantsCmd)


	provisionerCmd.AddCommand(updateInviteCmd)
	var updateInviteAction string
	updateInviteCmd.Flags().StringVar(&updateInviteAction, "action", "", "")
	updateInviteCmd.MarkFlagRequired("action")
	var updateInviteInviteId string
	updateInviteCmd.Flags().StringVar(&updateInviteInviteId, "invite-id", "", "")
	updateInviteCmd.MarkFlagRequired("invite-id")



}
