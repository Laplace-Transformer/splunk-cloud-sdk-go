// Package catalog -- generated by scloudgen
// !! DO NOT EDIT !! 
// 
package catalog

import (
	"github.com/spf13/cobra"
	impl "github.com/splunk/splunk-cloud-sdk-go/scloud_generated/pkg/catalog"
)


// createActionForRule -- Create a new action for a rule associated with a specific resource name.
var createActionForRuleCmd = &cobra.Command{
	Use:   "create-action-for-rule",
	Short: "Create a new action for a rule associated with a specific resource name.",
	RunE:  impl.CreateActionForRule,
}

// createActionForRuleByID -- Create a new action for a specific rule.
var createActionForRuleByIDCmd = &cobra.Command{
	Use:   "create-action-for-rule-by-id",
	Short: "Create a new action for a specific rule.",
	RunE:  impl.CreateActionForRuleByID,
}

// createAnnotationForDashboardbyID -- Create a new annotation for a specific dashboard.
var createAnnotationForDashboardbyIDCmd = &cobra.Command{
	Use:   "create-annotation-for-dashboardby-id",
	Short: "Create a new annotation for a specific dashboard.",
	RunE:  impl.CreateAnnotationForDashboardbyID,
}

// createAnnotationForDashboardsByResourceName -- Create a new annotation for a specific dataset.
var createAnnotationForDashboardsByResourceNameCmd = &cobra.Command{
	Use:   "create-annotation-for-dashboards-by-resource-name",
	Short: "Create a new annotation for a specific dataset.",
	RunE:  impl.CreateAnnotationForDashboardsByResourceName,
}

// createAnnotationForDatasetByID -- Create a new annotation for a specific dataset.
var createAnnotationForDatasetByIDCmd = &cobra.Command{
	Use:   "create-annotation-for-dataset-by-id",
	Short: "Create a new annotation for a specific dataset.",
	RunE:  impl.CreateAnnotationForDatasetByID,
}

// createAnnotationForDatasetByResourceName -- Create a new annotation for a specific dataset.
var createAnnotationForDatasetByResourceNameCmd = &cobra.Command{
	Use:   "create-annotation-for-dataset-by-resource-name",
	Short: "Create a new annotation for a specific dataset.",
	RunE:  impl.CreateAnnotationForDatasetByResourceName,
}

// createDashboard -- Create a new dashboard.
var createDashboardCmd = &cobra.Command{
	Use:   "create-dashboard",
	Short: "Create a new dashboard.",
	RunE:  impl.CreateDashboard,
}

// createDataset -- Create a new dataset.
var createDatasetCmd = &cobra.Command{
	Use:   "create-dataset",
	Short: "Create a new dataset.",
	RunE:  impl.CreateDataset,
}

// createDatasetImport -- Create a new dataset import.
var createDatasetImportCmd = &cobra.Command{
	Use:   "create-dataset-import",
	Short: "Create a new dataset import.",
	RunE:  impl.CreateDatasetImport,
}

// createDatasetImportByID -- Create a new dataset import.
var createDatasetImportByIDCmd = &cobra.Command{
	Use:   "create-dataset-import-by-id",
	Short: "Create a new dataset import.",
	RunE:  impl.CreateDatasetImportByID,
}

// createDatasetImportByIdv1 -- Create a new dataset import.
var createDatasetImportByIdv1Cmd = &cobra.Command{
	Use:   "create-dataset-import-by-idv-1",
	Short: "Create a new dataset import.",
	RunE:  impl.CreateDatasetImportByIdv1,
}

// createDatasetImportv1 -- Create a new dataset import.
var createDatasetImportv1Cmd = &cobra.Command{
	Use:   "create-dataset-importv-1",
	Short: "Create a new dataset import.",
	RunE:  impl.CreateDatasetImportv1,
}

// createFieldForDataset -- Create a new field on a specific dataset.
var createFieldForDatasetCmd = &cobra.Command{
	Use:   "create-field-for-dataset",
	Short: "Create a new field on a specific dataset.",
	RunE:  impl.CreateFieldForDataset,
}

// createFieldForDatasetByID -- Add a new field to a dataset.
var createFieldForDatasetByIDCmd = &cobra.Command{
	Use:   "create-field-for-dataset-by-id",
	Short: "Add a new field to a dataset.",
	RunE:  impl.CreateFieldForDatasetByID,
}

// createRelationship -- Create a new relationship.
var createRelationshipCmd = &cobra.Command{
	Use:   "create-relationship",
	Short: "Create a new relationship.",
	RunE:  impl.CreateRelationship,
}

// createRule -- Create a new rule.
var createRuleCmd = &cobra.Command{
	Use:   "create-rule",
	Short: "Create a new rule.",
	RunE:  impl.CreateRule,
}

// createWorkflow -- Create a new workflow configuration.
var createWorkflowCmd = &cobra.Command{
	Use:   "create-workflow",
	Short: "Create a new workflow configuration.",
	RunE:  impl.CreateWorkflow,
}

// createWorkflowBuild -- Create a new workflow build.
var createWorkflowBuildCmd = &cobra.Command{
	Use:   "create-workflow-build",
	Short: "Create a new workflow build.",
	RunE:  impl.CreateWorkflowBuild,
}

// createWorkflowRun -- Create a new workflow run for the specified workflow build ID.
var createWorkflowRunCmd = &cobra.Command{
	Use:   "create-workflow-run",
	Short: "Create a new workflow run for the specified workflow build ID.",
	RunE:  impl.CreateWorkflowRun,
}

// deleteActionByIDForRule -- Delete an action on a rule.
var deleteActionByIDForRuleCmd = &cobra.Command{
	Use:   "delete-action-by-id-for-rule",
	Short: "Delete an action on a rule.",
	RunE:  impl.DeleteActionByIDForRule,
}

// deleteActionByIDForRuleByID -- Delete an action that is part of a specific rule.
var deleteActionByIDForRuleByIDCmd = &cobra.Command{
	Use:   "delete-action-by-id-for-rule-by-id",
	Short: "Delete an action that is part of a specific rule.",
	RunE:  impl.DeleteActionByIDForRuleByID,
}

// deleteAnnotationOfDashboardByID -- Delete a specific annotation of a dashboard.
var deleteAnnotationOfDashboardByIDCmd = &cobra.Command{
	Use:   "delete-annotation-of-dashboard-by-id",
	Short: "Delete a specific annotation of a dashboard.",
	RunE:  impl.DeleteAnnotationOfDashboardByID,
}

// deleteAnnotationOfDashboardByResourceName -- Delete a specific annotation of a dashboard.
var deleteAnnotationOfDashboardByResourceNameCmd = &cobra.Command{
	Use:   "delete-annotation-of-dashboard-by-resource-name",
	Short: "Delete a specific annotation of a dashboard.",
	RunE:  impl.DeleteAnnotationOfDashboardByResourceName,
}

// deleteAnnotationOfDatasetByID -- Delete a specific annotation of a dataset.
var deleteAnnotationOfDatasetByIDCmd = &cobra.Command{
	Use:   "delete-annotation-of-dataset-by-id",
	Short: "Delete a specific annotation of a dataset.",
	RunE:  impl.DeleteAnnotationOfDatasetByID,
}

// deleteAnnotationOfDatasetByResourceName -- Delete a specific annotation of a dataset.
var deleteAnnotationOfDatasetByResourceNameCmd = &cobra.Command{
	Use:   "delete-annotation-of-dataset-by-resource-name",
	Short: "Delete a specific annotation of a dataset.",
	RunE:  impl.DeleteAnnotationOfDatasetByResourceName,
}

// deleteDashboardByID -- Delete the dashboard with the specified ID.
var deleteDashboardByIDCmd = &cobra.Command{
	Use:   "delete-dashboard-by-id",
	Short: "Delete the dashboard with the specified ID.",
	RunE:  impl.DeleteDashboardByID,
}

// deleteDashboardByResourceName -- Delete the dashboard with the specified resource name.
var deleteDashboardByResourceNameCmd = &cobra.Command{
	Use:   "delete-dashboard-by-resource-name",
	Short: "Delete the dashboard with the specified resource name.",
	RunE:  impl.DeleteDashboardByResourceName,
}

// deleteDataset -- Delete the dataset with the specified resource name, along with its dependencies. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
var deleteDatasetCmd = &cobra.Command{
	Use:   "delete-dataset",
	Short: "Delete the dataset with the specified resource name, along with its dependencies. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.",
	RunE:  impl.DeleteDataset,
}

// deleteDatasetByID -- Delete a specific dataset. Deleting a dataset also deletes its dependent objects, such as fields.
var deleteDatasetByIDCmd = &cobra.Command{
	Use:   "delete-dataset-by-id",
	Short: "Delete a specific dataset. Deleting a dataset also deletes its dependent objects, such as fields.",
	RunE:  impl.DeleteDatasetByID,
}

// deleteFieldByIDForDataset -- Delete a field that is part of a specific dataset.
var deleteFieldByIDForDatasetCmd = &cobra.Command{
	Use:   "delete-field-by-id-for-dataset",
	Short: "Delete a field that is part of a specific dataset.",
	RunE:  impl.DeleteFieldByIDForDataset,
}

// deleteFieldByIDForDatasetByID -- Delete a field that is part of a specific dataset.
var deleteFieldByIDForDatasetByIDCmd = &cobra.Command{
	Use:   "delete-field-by-id-for-dataset-by-id",
	Short: "Delete a field that is part of a specific dataset.",
	RunE:  impl.DeleteFieldByIDForDatasetByID,
}

// deleteRelationshipByID -- Delete a specific relationship. Deleting a relationship also deleletes any objects that are dependents of that relationship, such as relationship fields.
var deleteRelationshipByIDCmd = &cobra.Command{
	Use:   "delete-relationship-by-id",
	Short: "Delete a specific relationship. Deleting a relationship also deleletes any objects that are dependents of that relationship, such as relationship fields.",
	RunE:  impl.DeleteRelationshipByID,
}

// deleteRule -- Delete the rule with the specified resource name and its dependencies.
var deleteRuleCmd = &cobra.Command{
	Use:   "delete-rule",
	Short: "Delete the rule with the specified resource name and its dependencies.",
	RunE:  impl.DeleteRule,
}

// deleteRuleByID -- Delete a specific rule. Deleting a rule also deleletes any objects that are dependents of that rule, such as rule actions.
var deleteRuleByIDCmd = &cobra.Command{
	Use:   "delete-rule-by-id",
	Short: "Delete a specific rule. Deleting a rule also deleletes any objects that are dependents of that rule, such as rule actions.",
	RunE:  impl.DeleteRuleByID,
}

// deleteWorkflowBuildByID -- Delete the workflow build with the specified workflow build ID.
var deleteWorkflowBuildByIDCmd = &cobra.Command{
	Use:   "delete-workflow-build-by-id",
	Short: "Delete the workflow build with the specified workflow build ID.",
	RunE:  impl.DeleteWorkflowBuildByID,
}

// deleteWorkflowByID -- Delete the workflow with the specified workflow ID.
var deleteWorkflowByIDCmd = &cobra.Command{
	Use:   "delete-workflow-by-id",
	Short: "Delete the workflow with the specified workflow ID.",
	RunE:  impl.DeleteWorkflowByID,
}

// deleteWorkflowRunByID -- Delete the workflow run with the specified workflow run ID.
var deleteWorkflowRunByIDCmd = &cobra.Command{
	Use:   "delete-workflow-run-by-id",
	Short: "Delete the workflow run with the specified workflow run ID.",
	RunE:  impl.DeleteWorkflowRunByID,
}

// getActionByIDForRule -- Return an action that is part of a specified rule.
var getActionByIDForRuleCmd = &cobra.Command{
	Use:   "get-action-by-id-for-rule",
	Short: "Return an action that is part of a specified rule.",
	RunE:  impl.GetActionByIDForRule,
}

// getActionByIDForRuleByID -- Return information about an action that is part of a specific rule.
var getActionByIDForRuleByIDCmd = &cobra.Command{
	Use:   "get-action-by-id-for-rule-by-id",
	Short: "Return information about an action that is part of a specific rule.",
	RunE:  impl.GetActionByIDForRuleByID,
}

// getDashboardByID -- Return information about a dashboard with the specified ID.
var getDashboardByIDCmd = &cobra.Command{
	Use:   "get-dashboard-by-id",
	Short: "Return information about a dashboard with the specified ID.",
	RunE:  impl.GetDashboardByID,
}

// getDashboardByResourceName -- Return information about a dashboard with the specified resource name.
var getDashboardByResourceNameCmd = &cobra.Command{
	Use:   "get-dashboard-by-resource-name",
	Short: "Return information about a dashboard with the specified resource name.",
	RunE:  impl.GetDashboardByResourceName,
}

// getDataset -- Return the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
var getDatasetCmd = &cobra.Command{
	Use:   "get-dataset",
	Short: "Return the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.",
	RunE:  impl.GetDataset,
}

// getDatasetByID -- Return information about the dataset with the specified ID.
var getDatasetByIDCmd = &cobra.Command{
	Use:   "get-dataset-by-id",
	Short: "Return information about the dataset with the specified ID.",
	RunE:  impl.GetDatasetByID,
}

// getFieldByID -- Get a field that corresponds to a specific field ID.
var getFieldByIDCmd = &cobra.Command{
	Use:   "get-field-by-id",
	Short: "Get a field that corresponds to a specific field ID.",
	RunE:  impl.GetFieldByID,
}

// getFieldByIDForDataset -- Return a field that is part of a specific dataset.
var getFieldByIDForDatasetCmd = &cobra.Command{
	Use:   "get-field-by-id-for-dataset",
	Short: "Return a field that is part of a specific dataset.",
	RunE:  impl.GetFieldByIDForDataset,
}

// getFieldByIDForDatasetByID -- Return a field that is part of a specific dataset.
var getFieldByIDForDatasetByIDCmd = &cobra.Command{
	Use:   "get-field-by-id-for-dataset-by-id",
	Short: "Return a field that is part of a specific dataset.",
	RunE:  impl.GetFieldByIDForDatasetByID,
}

// getRelationshipByID -- Get a specific relationship.
var getRelationshipByIDCmd = &cobra.Command{
	Use:   "get-relationship-by-id",
	Short: "Get a specific relationship.",
	RunE:  impl.GetRelationshipByID,
}

// getRule -- Get a rule with a specified resource name.
var getRuleCmd = &cobra.Command{
	Use:   "get-rule",
	Short: "Get a rule with a specified resource name.",
	RunE:  impl.GetRule,
}

// getRuleByID -- Get information about a specific rule.
var getRuleByIDCmd = &cobra.Command{
	Use:   "get-rule-by-id",
	Short: "Get information about a specific rule.",
	RunE:  impl.GetRuleByID,
}

// getWorkflowBuildByID -- Return information about the workflow build with the specified workflow build ID.
var getWorkflowBuildByIDCmd = &cobra.Command{
	Use:   "get-workflow-build-by-id",
	Short: "Return information about the workflow build with the specified workflow build ID.",
	RunE:  impl.GetWorkflowBuildByID,
}

// getWorkflowByID -- Return information about a workflow with the specified workflow ID.
var getWorkflowByIDCmd = &cobra.Command{
	Use:   "get-workflow-by-id",
	Short: "Return information about a workflow with the specified workflow ID.",
	RunE:  impl.GetWorkflowByID,
}

// getWorkflowRunByID -- Return information about the workflow run with the specified workflow build ID.
var getWorkflowRunByIDCmd = &cobra.Command{
	Use:   "get-workflow-run-by-id",
	Short: "Return information about the workflow run with the specified workflow build ID.",
	RunE:  impl.GetWorkflowRunByID,
}

// listActionsForRule -- Return the list of actions that are part of a specified rule.
var listActionsForRuleCmd = &cobra.Command{
	Use:   "list-actions-for-rule",
	Short: "Return the list of actions that are part of a specified rule.",
	RunE:  impl.ListActionsForRule,
}

// listActionsForRuleByID -- Return the set of actions that are part of a rule.
var listActionsForRuleByIDCmd = &cobra.Command{
	Use:   "list-actions-for-rule-by-id",
	Short: "Return the set of actions that are part of a rule.",
	RunE:  impl.ListActionsForRuleByID,
}

// listAnnotationsForDashboardByID -- Return the set of annotations that are part of a dashboard.
var listAnnotationsForDashboardByIDCmd = &cobra.Command{
	Use:   "list-annotations-for-dashboard-by-id",
	Short: "Return the set of annotations that are part of a dashboard.",
	RunE:  impl.ListAnnotationsForDashboardByID,
}

// listAnnotationsForDashboardByResourceName -- Return the set of annotations that are part of a dashboard.
var listAnnotationsForDashboardByResourceNameCmd = &cobra.Command{
	Use:   "list-annotations-for-dashboard-by-resource-name",
	Short: "Return the set of annotations that are part of a dashboard.",
	RunE:  impl.ListAnnotationsForDashboardByResourceName,
}

// listAnnotationsForDatasetByID -- Return the set of annotations that are part of a dataset.
var listAnnotationsForDatasetByIDCmd = &cobra.Command{
	Use:   "list-annotations-for-dataset-by-id",
	Short: "Return the set of annotations that are part of a dataset.",
	RunE:  impl.ListAnnotationsForDatasetByID,
}

// listAnnotationsForDatasetByResourceName -- Return the set of annotations that are part of a dataset.
var listAnnotationsForDatasetByResourceNameCmd = &cobra.Command{
	Use:   "list-annotations-for-dataset-by-resource-name",
	Short: "Return the set of annotations that are part of a dataset.",
	RunE:  impl.ListAnnotationsForDatasetByResourceName,
}

// listDashboards -- Return a list of Dashboards.
var listDashboardsCmd = &cobra.Command{
	Use:   "list-dashboards",
	Short: "Return a list of Dashboards.",
	RunE:  impl.ListDashboards,
}

// listDatasets -- Returns a list of all datasets, unless you specify a filter. Use a filter to return a specific list of datasets.
var listDatasetsCmd = &cobra.Command{
	Use:   "list-datasets",
	Short: "Returns a list of all datasets, unless you specify a filter. Use a filter to return a specific list of datasets.",
	RunE:  impl.ListDatasets,
}

// listFields -- Get a list of all fields in the Catalog.
var listFieldsCmd = &cobra.Command{
	Use:   "list-fields",
	Short: "Get a list of all fields in the Catalog.",
	RunE:  impl.ListFields,
}

// listFieldsForDataset -- Return the list of fields that are part of a specified dataset.
var listFieldsForDatasetCmd = &cobra.Command{
	Use:   "list-fields-for-dataset",
	Short: "Return the list of fields that are part of a specified dataset.",
	RunE:  impl.ListFieldsForDataset,
}

// listFieldsForDatasetByID -- Return the set of fields for the specified dataset.
var listFieldsForDatasetByIDCmd = &cobra.Command{
	Use:   "list-fields-for-dataset-by-id",
	Short: "Return the set of fields for the specified dataset.",
	RunE:  impl.ListFieldsForDatasetByID,
}

// listModules -- Return a list of all modules, unless you specify a filter. Use a filter to return a specific list of modules.
var listModulesCmd = &cobra.Command{
	Use:   "list-modules",
	Short: "Return a list of all modules, unless you specify a filter. Use a filter to return a specific list of modules.",
	RunE:  impl.ListModules,
}

// listRelationships -- Returns a list of all relationships, unless you specify a filter. Use a filter to return a specific list of relationships.
var listRelationshipsCmd = &cobra.Command{
	Use:   "list-relationships",
	Short: "Returns a list of all relationships, unless you specify a filter. Use a filter to return a specific list of relationships.",
	RunE:  impl.ListRelationships,
}

// listRules -- Return a list of rules that match a filter query if it is given, otherwise return all rules.
var listRulesCmd = &cobra.Command{
	Use:   "list-rules",
	Short: "Return a list of rules that match a filter query if it is given, otherwise return all rules.",
	RunE:  impl.ListRules,
}

// listWorkflowBuilds -- Return a list of Machine Learning workflow builds.
var listWorkflowBuildsCmd = &cobra.Command{
	Use:   "list-workflow-builds",
	Short: "Return a list of Machine Learning workflow builds.",
	RunE:  impl.ListWorkflowBuilds,
}

// listWorkflowRuns -- Return a list of Machine Learning workflow runs for specified workflow build ID.
var listWorkflowRunsCmd = &cobra.Command{
	Use:   "list-workflow-runs",
	Short: "Return a list of Machine Learning workflow runs for specified workflow build ID.",
	RunE:  impl.ListWorkflowRuns,
}

// listWorkflows -- Return a list of Machine Learning workflow configurations.
var listWorkflowsCmd = &cobra.Command{
	Use:   "list-workflows",
	Short: "Return a list of Machine Learning workflow configurations.",
	RunE:  impl.ListWorkflows,
}

// updateActionByIDForRule -- Update the Action with the specified id for the specified Rule
var updateActionByIDForRuleCmd = &cobra.Command{
	Use:   "update-action-by-id-for-rule",
	Short: "Update the Action with the specified id for the specified Rule",
	RunE:  impl.UpdateActionByIDForRule,
}

// updateActionByIDForRuleByID -- Update an action for a specific rule.
var updateActionByIDForRuleByIDCmd = &cobra.Command{
	Use:   "update-action-by-id-for-rule-by-id",
	Short: "Update an action for a specific rule.",
	RunE:  impl.UpdateActionByIDForRuleByID,
}

// updateDashboardByID -- Update the dashboard with the specified ID.
var updateDashboardByIDCmd = &cobra.Command{
	Use:   "update-dashboard-by-id",
	Short: "Update the dashboard with the specified ID.",
	RunE:  impl.UpdateDashboardByID,
}

// updateDashboardByResourceName -- Update the dashboard with the specified resource name.
var updateDashboardByResourceNameCmd = &cobra.Command{
	Use:   "update-dashboard-by-resource-name",
	Short: "Update the dashboard with the specified resource name.",
	RunE:  impl.UpdateDashboardByResourceName,
}

// updateDataset -- Update the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
var updateDatasetCmd = &cobra.Command{
	Use:   "update-dataset",
	Short: "Update the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.",
	RunE:  impl.UpdateDataset,
}

// updateDatasetByID -- Update a specific dataset.
var updateDatasetByIDCmd = &cobra.Command{
	Use:   "update-dataset-by-id",
	Short: "Update a specific dataset.",
	RunE:  impl.UpdateDatasetByID,
}

// updateFieldByIDForDataset -- Update a field with a specified ID for a specified dataset.
var updateFieldByIDForDatasetCmd = &cobra.Command{
	Use:   "update-field-by-id-for-dataset",
	Short: "Update a field with a specified ID for a specified dataset.",
	RunE:  impl.UpdateFieldByIDForDataset,
}

// updateFieldByIDForDatasetByID -- Update a field for a specific dataset.
var updateFieldByIDForDatasetByIDCmd = &cobra.Command{
	Use:   "update-field-by-id-for-dataset-by-id",
	Short: "Update a field for a specific dataset.",
	RunE:  impl.UpdateFieldByIDForDatasetByID,
}

// updateRelationshipByID -- Update a specific relationship.
var updateRelationshipByIDCmd = &cobra.Command{
	Use:   "update-relationship-by-id",
	Short: "Update a specific relationship.",
	RunE:  impl.UpdateRelationshipByID,
}

// updateRule -- Update the Rule with the specified resourcename
var updateRuleCmd = &cobra.Command{
	Use:   "update-rule",
	Short: "Update the Rule with the specified resourcename",
	RunE:  impl.UpdateRule,
}

// updateRuleByID -- Update a specific rule.
var updateRuleByIDCmd = &cobra.Command{
	Use:   "update-rule-by-id",
	Short: "Update a specific rule.",
	RunE:  impl.UpdateRuleByID,
}

// updateWorkflowBuildByID -- Update the workflow build with the specified workflow build ID.
var updateWorkflowBuildByIDCmd = &cobra.Command{
	Use:   "update-workflow-build-by-id",
	Short: "Update the workflow build with the specified workflow build ID.",
	RunE:  impl.UpdateWorkflowBuildByID,
}

// updateWorkflowByID -- Update the workflow with the specified workflow ID.
var updateWorkflowByIDCmd = &cobra.Command{
	Use:   "update-workflow-by-id",
	Short: "Update the workflow with the specified workflow ID.",
	RunE:  impl.UpdateWorkflowByID,
}

// updateWorkflowRunByID -- Update the workflow run with the specified workflow run ID.
var updateWorkflowRunByIDCmd = &cobra.Command{
	Use:   "update-workflow-run-by-id",
	Short: "Update the workflow run with the specified workflow run ID.",
	RunE:  impl.UpdateWorkflowRunByID,
}


func init() {

    catalogCmd.AddCommand(createActionForRuleCmd)
    catalogCmd.AddCommand(createActionForRuleByIDCmd)
    catalogCmd.AddCommand(createAnnotationForDashboardbyIDCmd)
    catalogCmd.AddCommand(createAnnotationForDashboardsByResourceNameCmd)
    catalogCmd.AddCommand(createAnnotationForDatasetByIDCmd)
    catalogCmd.AddCommand(createAnnotationForDatasetByResourceNameCmd)
    catalogCmd.AddCommand(createDashboardCmd)
    catalogCmd.AddCommand(createDatasetCmd)
    catalogCmd.AddCommand(createDatasetImportCmd)
    catalogCmd.AddCommand(createDatasetImportByIDCmd)
    catalogCmd.AddCommand(createDatasetImportByIdv1Cmd)
    catalogCmd.AddCommand(createDatasetImportv1Cmd)
    catalogCmd.AddCommand(createFieldForDatasetCmd)
    catalogCmd.AddCommand(createFieldForDatasetByIDCmd)
    catalogCmd.AddCommand(createRelationshipCmd)
    catalogCmd.AddCommand(createRuleCmd)
    catalogCmd.AddCommand(createWorkflowCmd)
    catalogCmd.AddCommand(createWorkflowBuildCmd)
    catalogCmd.AddCommand(createWorkflowRunCmd)
    catalogCmd.AddCommand(deleteActionByIDForRuleCmd)
    catalogCmd.AddCommand(deleteActionByIDForRuleByIDCmd)
    catalogCmd.AddCommand(deleteAnnotationOfDashboardByIDCmd)
    catalogCmd.AddCommand(deleteAnnotationOfDashboardByResourceNameCmd)
    catalogCmd.AddCommand(deleteAnnotationOfDatasetByIDCmd)
    catalogCmd.AddCommand(deleteAnnotationOfDatasetByResourceNameCmd)
    catalogCmd.AddCommand(deleteDashboardByIDCmd)
    catalogCmd.AddCommand(deleteDashboardByResourceNameCmd)
    catalogCmd.AddCommand(deleteDatasetCmd)
    catalogCmd.AddCommand(deleteDatasetByIDCmd)
    catalogCmd.AddCommand(deleteFieldByIDForDatasetCmd)
    catalogCmd.AddCommand(deleteFieldByIDForDatasetByIDCmd)
    catalogCmd.AddCommand(deleteRelationshipByIDCmd)
    catalogCmd.AddCommand(deleteRuleCmd)
    catalogCmd.AddCommand(deleteRuleByIDCmd)
    catalogCmd.AddCommand(deleteWorkflowBuildByIDCmd)
    catalogCmd.AddCommand(deleteWorkflowByIDCmd)
    catalogCmd.AddCommand(deleteWorkflowRunByIDCmd)
    catalogCmd.AddCommand(getActionByIDForRuleCmd)
    catalogCmd.AddCommand(getActionByIDForRuleByIDCmd)
    catalogCmd.AddCommand(getDashboardByIDCmd)
    catalogCmd.AddCommand(getDashboardByResourceNameCmd)
    catalogCmd.AddCommand(getDatasetCmd)
    catalogCmd.AddCommand(getDatasetByIDCmd)
    catalogCmd.AddCommand(getFieldByIDCmd)
    catalogCmd.AddCommand(getFieldByIDForDatasetCmd)
    catalogCmd.AddCommand(getFieldByIDForDatasetByIDCmd)
    catalogCmd.AddCommand(getRelationshipByIDCmd)
    catalogCmd.AddCommand(getRuleCmd)
    catalogCmd.AddCommand(getRuleByIDCmd)
    catalogCmd.AddCommand(getWorkflowBuildByIDCmd)
    catalogCmd.AddCommand(getWorkflowByIDCmd)
    catalogCmd.AddCommand(getWorkflowRunByIDCmd)
    catalogCmd.AddCommand(listActionsForRuleCmd)
    catalogCmd.AddCommand(listActionsForRuleByIDCmd)
    catalogCmd.AddCommand(listAnnotationsForDashboardByIDCmd)
    catalogCmd.AddCommand(listAnnotationsForDashboardByResourceNameCmd)
    catalogCmd.AddCommand(listAnnotationsForDatasetByIDCmd)
    catalogCmd.AddCommand(listAnnotationsForDatasetByResourceNameCmd)
    catalogCmd.AddCommand(listDashboardsCmd)
    catalogCmd.AddCommand(listDatasetsCmd)
    catalogCmd.AddCommand(listFieldsCmd)
    catalogCmd.AddCommand(listFieldsForDatasetCmd)
    catalogCmd.AddCommand(listFieldsForDatasetByIDCmd)
    catalogCmd.AddCommand(listModulesCmd)
    catalogCmd.AddCommand(listRelationshipsCmd)
    catalogCmd.AddCommand(listRulesCmd)
    catalogCmd.AddCommand(listWorkflowBuildsCmd)
    catalogCmd.AddCommand(listWorkflowRunsCmd)
    catalogCmd.AddCommand(listWorkflowsCmd)
    catalogCmd.AddCommand(updateActionByIDForRuleCmd)
    catalogCmd.AddCommand(updateActionByIDForRuleByIDCmd)
    catalogCmd.AddCommand(updateDashboardByIDCmd)
    catalogCmd.AddCommand(updateDashboardByResourceNameCmd)
    catalogCmd.AddCommand(updateDatasetCmd)
    catalogCmd.AddCommand(updateDatasetByIDCmd)
    catalogCmd.AddCommand(updateFieldByIDForDatasetCmd)
    catalogCmd.AddCommand(updateFieldByIDForDatasetByIDCmd)
    catalogCmd.AddCommand(updateRelationshipByIDCmd)
    catalogCmd.AddCommand(updateRuleCmd)
    catalogCmd.AddCommand(updateRuleByIDCmd)
    catalogCmd.AddCommand(updateWorkflowBuildByIDCmd)
    catalogCmd.AddCommand(updateWorkflowByIDCmd)
    catalogCmd.AddCommand(updateWorkflowRunByIDCmd)
    

	// subTest1Cmd.Flags().StringP("id", "i", "", "resource identifier")
	// subTest2Cmd.Flags().StringP("id", "i", "", "resource identifier")
}
