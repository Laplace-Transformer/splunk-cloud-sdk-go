// Package streams -- generated by scloudgen
// !! DO NOT EDIT !!
//
package streams

import (
	"fmt"

	"github.com/spf13/cobra"
	//"github.com/splunk/splunk-cloud-sdk-go/scloud_generated/auth"
	//"github.com/splunk/splunk-cloud-sdk-go/scloud_generated/flags"
	//"github.com/splunk/splunk-cloud-sdk-go/scloud_generated/jsonx"
	//model "github.com/splunk/splunk-cloud-sdk-go/services/streams"
)

// ActivatePipeline Activates an existing pipeline.
func ActivatePipeline(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// CompileDSL Compiles the Streams DSL and returns Streams JSON.
func CompileDSL(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// CompileSPL Compiles SPL2 and returns Streams JSON.
func CompileSPL(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// CreateConnection Create a new DSP connection.
func CreateConnection(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// CreateGroup Create a new group function by combining the Streams JSON of two or more functions.
func CreateGroup(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// CreatePipeline Creates a pipeline.
func CreatePipeline(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// CreateTemplate Creates a template for a tenant.
func CreateTemplate(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// DeactivatePipeline Deactivates an existing pipeline.
func DeactivatePipeline(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// DeleteConnection Delete all versions of a connection by its id.
func DeleteConnection(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// DeleteGroup Removes an existing group.
func DeleteGroup(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// DeletePipeline Removes a pipeline.
func DeletePipeline(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// DeleteTemplate Removes a template with a specific ID.
func DeleteTemplate(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// ExpandGroup Creates and returns the expanded version of a group.
func ExpandGroup(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// ExpandPipeline Returns the entire Streams JSON, including the expanded Streams JSON of any group functions in the pipeline.
func ExpandPipeline(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// GetGroup Returns the full Streams JSON of a group.
func GetGroup(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// GetInputSchema Returns the input schema for a function in a pipeline.
func GetInputSchema(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// GetOutputSchema Returns the output schema for a specified function in a pipeline. If no function ID is  specified, the request returns the output schema for all functions in a pipeline.
func GetOutputSchema(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// GetPipeline Returns an individual pipeline by version.
func GetPipeline(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// GetPipelineLatestMetrics Returns the latest metrics for a single pipeline.
func GetPipelineLatestMetrics(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// GetPipelinesStatus Returns the status of pipelines from the underlying streaming system.
func GetPipelinesStatus(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// GetPreviewData Returns the preview data for a session.
func GetPreviewData(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// GetPreviewSession Returns information from a preview session.
func GetPreviewSession(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// GetPreviewSessionLatestMetrics Returns the latest metrics for a preview session.
func GetPreviewSessionLatestMetrics(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// GetRegistry Returns all functions in JSON format.
func GetRegistry(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// GetTemplate Returns an individual template by version.
func GetTemplate(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// ListConnections Returns a list of connections (latest versions only) by tenant ID.
func ListConnections(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// ListConnectors Returns a list of the available connectors.
func ListConnectors(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// ListPipelines Returns all pipelines.
func ListPipelines(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// ListTemplates Returns a list of all templates.
func ListTemplates(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// MergePipelines Combines two Streams JSON programs.
func MergePipelines(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// PutConnection Modifies an existing DSP connection.
func PutConnection(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// PutGroup Update a group function combining the Streams JSON of two or more functions.
func PutGroup(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// PutTemplate Updates an existing template.
func PutTemplate(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// ReactivatePipeline Reactivate a pipeline
func ReactivatePipeline(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// StartPreview Creates a preview session for a pipeline.
func StartPreview(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// StopPreview Stops a preview session.
func StopPreview(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// UpdateConnection Partially modifies an existing DSP connection.
func UpdateConnection(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// UpdateGroup Modify a group function by combining the Streams JSON of two or more functions.
func UpdateGroup(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// UpdatePipeline Partially modifies an existing pipeline.
func UpdatePipeline(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// UpdateTemplate Partially modifies an existing template.
func UpdateTemplate(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// ValidatePipeline Verifies whether the Streams JSON is valid.
func ValidatePipeline(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}
