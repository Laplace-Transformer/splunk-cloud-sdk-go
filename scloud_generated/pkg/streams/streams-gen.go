// Package streams -- generated by scloudgen
// !! DO NOT EDIT !!
//
package streams

import (
	"fmt"

	"github.com/spf13/cobra"
	"github.com/splunk/splunk-cloud-sdk-go/scloud_generated/auth"
	"github.com/splunk/splunk-cloud-sdk-go/scloud_generated/flags"
	"github.com/splunk/splunk-cloud-sdk-go/scloud_generated/jsonx"
	model "github.com/splunk/splunk-cloud-sdk-go/services/streams"
)

// ActivatePipeline Activates an existing pipeline.
func ActivatePipeline(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var activateLatestVersionDefault bool
	activateLatestVersion := &activateLatestVersionDefault
	err = flags.ParseFlag(cmd.Flags(), "activate-latest-version", &activateLatestVersion)
	if err != nil {
		return fmt.Errorf(`error parsing "activate-latest-version": ` + err.Error())
	}
	var allowNonRestoredStateDefault bool
	allowNonRestoredState := &allowNonRestoredStateDefault
	err = flags.ParseFlag(cmd.Flags(), "allow-non-restored-state", &allowNonRestoredState)
	if err != nil {
		return fmt.Errorf(`error parsing "allow-non-restored-state": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var skipRestoreStateDefault bool
	skipRestoreState := &skipRestoreStateDefault
	err = flags.ParseFlag(cmd.Flags(), "skip-restore-state", &skipRestoreState)
	if err != nil {
		return fmt.Errorf(`error parsing "skip-restore-state": ` + err.Error())
	}

	// Form the request body
	body := model.ActivatePipelineRequest{
		ActivateLatestVersion: activateLatestVersion,
		AllowNonRestoredState: allowNonRestoredState,
		SkipRestoreState:      skipRestoreState,
	}

	resp, err := client.StreamsService.ActivatePipeline(id, body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CompileDSL Compiles the Streams DSL and returns Streams JSON.
func CompileDSL(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var dsl string
	err = flags.ParseFlag(cmd.Flags(), "dsl", &dsl)
	if err != nil {
		return fmt.Errorf(`error parsing "dsl": ` + err.Error())
	}

	// Form the request body
	body := model.DslCompilationRequest{
		Dsl: dsl,
	}

	resp, err := client.StreamsService.CompileDSL(body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CompileSPL Compiles SPL2 and returns Streams JSON.
func CompileSPL(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var spl string
	err = flags.ParseFlag(cmd.Flags(), "spl", &spl)
	if err != nil {
		return fmt.Errorf(`error parsing "spl": ` + err.Error())
	}
	var syntaxDefault model.SplCompileRequestSyntax
	syntax := &syntaxDefault
	err = flags.ParseFlag(cmd.Flags(), "syntax", &syntax)
	if err != nil {
		return fmt.Errorf(`error parsing "syntax": ` + err.Error())
	}

	// Form the request body
	body := model.SplCompileRequest{
		Spl:    spl,
		Syntax: syntax,
	}

	resp, err := client.StreamsService.CompileSPL(body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateConnection Create a new DSP connection.
func CreateConnection(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var connectorId string
	err = flags.ParseFlag(cmd.Flags(), "connector-id", &connectorId)
	if err != nil {
		return fmt.Errorf(`error parsing "connector-id": ` + err.Error())
	}
	var data map[string]interface{}
	err = flags.ParseFlag(cmd.Flags(), "data", &data)
	if err != nil {
		return fmt.Errorf(`error parsing "data": ` + err.Error())
	}
	var description string
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}

	// Form the request body
	body := model.ConnectionRequest{
		ConnectorId: connectorId,
		Data:        data,
		Description: description,
		Name:        name,
	}

	resp, err := client.StreamsService.CreateConnection(body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateGroup Create a new group function by combining the Streams JSON of two or more functions.
func CreateGroup(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var arguments []model.GroupArgumentsNode
	err = flags.ParseFlag(cmd.Flags(), "arguments", &arguments)
	if err != nil {
		return fmt.Errorf(`error parsing "arguments": ` + err.Error())
	}
	var attributes map[string]interface{}
	err = flags.ParseFlag(cmd.Flags(), "attributes", &attributes)
	if err != nil {
		return fmt.Errorf(`error parsing "attributes": ` + err.Error())
	}
	var categories []int64
	err = flags.ParseFlag(cmd.Flags(), "categories", &categories)
	if err != nil {
		return fmt.Errorf(`error parsing "categories": ` + err.Error())
	}
	var edges []model.UplEdge
	err = flags.ParseFlag(cmd.Flags(), "edges", &edges)
	if err != nil {
		return fmt.Errorf(`error parsing "edges": ` + err.Error())
	}
	var mappings []model.GroupFunctionArgsMappingNode
	err = flags.ParseFlag(cmd.Flags(), "mappings", &mappings)
	if err != nil {
		return fmt.Errorf(`error parsing "mappings": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var nodes []model.UplNode
	err = flags.ParseFlag(cmd.Flags(), "nodes", &nodes)
	if err != nil {
		return fmt.Errorf(`error parsing "nodes": ` + err.Error())
	}
	var outputType string
	err = flags.ParseFlag(cmd.Flags(), "output-type", &outputType)
	if err != nil {
		return fmt.Errorf(`error parsing "output-type": ` + err.Error())
	}
	var rootNode []string
	err = flags.ParseFlag(cmd.Flags(), "root-node", &rootNode)
	if err != nil {
		return fmt.Errorf(`error parsing "root-node": ` + err.Error())
	}
	var scalarDefault bool
	scalar := &scalarDefault
	err = flags.ParseFlag(cmd.Flags(), "scalar", &scalar)
	if err != nil {
		return fmt.Errorf(`error parsing "scalar": ` + err.Error())
	}
	var variadicDefault bool
	variadic := &variadicDefault
	err = flags.ParseFlag(cmd.Flags(), "variadic", &variadic)
	if err != nil {
		return fmt.Errorf(`error parsing "variadic": ` + err.Error())
	}

	// Form the request body
	body := model.GroupRequest{
		Arguments: arguments,
		Ast: model.UplPipeline{
			Edges:    edges,
			Nodes:    nodes,
			RootNode: rootNode,
		},
		Attributes: attributes,
		Categories: categories,
		Mappings:   mappings,
		Name:       name,
		OutputType: outputType,
		Scalar:     scalar,
		Variadic:   variadic,
	}

	resp, err := client.StreamsService.CreateGroup(body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreatePipeline Creates a pipeline.
func CreatePipeline(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var bypassValidationDefault bool
	bypassValidation := &bypassValidationDefault
	err = flags.ParseFlag(cmd.Flags(), "bypass-validation", &bypassValidation)
	if err != nil {
		return fmt.Errorf(`error parsing "bypass-validation": ` + err.Error())
	}
	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var edges []model.UplEdge
	err = flags.ParseFlag(cmd.Flags(), "edges", &edges)
	if err != nil {
		return fmt.Errorf(`error parsing "edges": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var nodes []model.UplNode
	err = flags.ParseFlag(cmd.Flags(), "nodes", &nodes)
	if err != nil {
		return fmt.Errorf(`error parsing "nodes": ` + err.Error())
	}
	var rootNode []string
	err = flags.ParseFlag(cmd.Flags(), "root-node", &rootNode)
	if err != nil {
		return fmt.Errorf(`error parsing "root-node": ` + err.Error())
	}

	// Form the request body
	body := model.PipelineRequest{
		BypassValidation: bypassValidation,
		Data: model.UplPipeline{
			Edges:    edges,
			Nodes:    nodes,
			RootNode: rootNode,
		},
		Description: description,
		Name:        name,
	}

	resp, err := client.StreamsService.CreatePipeline(body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateTemplate Creates a template for a tenant.
func CreateTemplate(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var description string
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var edges []model.UplEdge
	err = flags.ParseFlag(cmd.Flags(), "edges", &edges)
	if err != nil {
		return fmt.Errorf(`error parsing "edges": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var nodes []model.UplNode
	err = flags.ParseFlag(cmd.Flags(), "nodes", &nodes)
	if err != nil {
		return fmt.Errorf(`error parsing "nodes": ` + err.Error())
	}
	var rootNode []string
	err = flags.ParseFlag(cmd.Flags(), "root-node", &rootNode)
	if err != nil {
		return fmt.Errorf(`error parsing "root-node": ` + err.Error())
	}

	// Form the request body
	body := model.TemplateRequest{
		Data: model.UplPipeline{
			Edges:    edges,
			Nodes:    nodes,
			RootNode: rootNode,
		},
		Description: description,
		Name:        name,
	}

	resp, err := client.StreamsService.CreateTemplate(body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// DeactivatePipeline Deactivates an existing pipeline.
func DeactivatePipeline(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var skipSavepointDefault bool
	skipSavepoint := &skipSavepointDefault
	err = flags.ParseFlag(cmd.Flags(), "skip-savepoint", &skipSavepoint)
	if err != nil {
		return fmt.Errorf(`error parsing "skip-savepoint": ` + err.Error())
	}

	// Form the request body
	body := model.DeactivatePipelineRequest{
		SkipSavepoint: skipSavepoint,
	}

	resp, err := client.StreamsService.DeactivatePipeline(id, body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// DeleteConnection Delete all versions of a connection by its id.
func DeleteConnection(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var connectionId string
	err = flags.ParseFlag(cmd.Flags(), "connection-id", &connectionId)
	if err != nil {
		return fmt.Errorf(`error parsing "connection-id": ` + err.Error())
	}

	err = client.StreamsService.DeleteConnection(connectionId)
	if err != nil {
		return err
	}

	return nil
}

// DeleteGroup Removes an existing group.
func DeleteGroup(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var groupId string
	err = flags.ParseFlag(cmd.Flags(), "group-id", &groupId)
	if err != nil {
		return fmt.Errorf(`error parsing "group-id": ` + err.Error())
	}

	err = client.StreamsService.DeleteGroup(groupId)
	if err != nil {
		return err
	}

	return nil
}

// DeletePipeline Removes a pipeline.
func DeletePipeline(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}

	resp, err := client.StreamsService.DeletePipeline(id)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// DeleteTemplate Removes a template with a specific ID.
func DeleteTemplate(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var templateId string
	err = flags.ParseFlag(cmd.Flags(), "template-id", &templateId)
	if err != nil {
		return fmt.Errorf(`error parsing "template-id": ` + err.Error())
	}

	err = client.StreamsService.DeleteTemplate(templateId)
	if err != nil {
		return err
	}

	return nil
}

// ExpandGroup Creates and returns the expanded version of a group.
func ExpandGroup(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var arguments map[string]interface{}
	err = flags.ParseFlag(cmd.Flags(), "arguments", &arguments)
	if err != nil {
		return fmt.Errorf(`error parsing "arguments": ` + err.Error())
	}
	var groupId string
	err = flags.ParseFlag(cmd.Flags(), "group-id", &groupId)
	if err != nil {
		return fmt.Errorf(`error parsing "group-id": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}

	// Form the request body
	body := model.GroupExpandRequest{
		Arguments: arguments,
		Id:        id,
	}

	resp, err := client.StreamsService.ExpandGroup(groupId, body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ExpandPipeline Returns the entire Streams JSON, including the expanded Streams JSON of any group functions in the pipeline.
func ExpandPipeline(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var edges []model.UplEdge
	err = flags.ParseFlag(cmd.Flags(), "edges", &edges)
	if err != nil {
		return fmt.Errorf(`error parsing "edges": ` + err.Error())
	}
	var nodes []model.UplNode
	err = flags.ParseFlag(cmd.Flags(), "nodes", &nodes)
	if err != nil {
		return fmt.Errorf(`error parsing "nodes": ` + err.Error())
	}
	var rootNode []string
	err = flags.ParseFlag(cmd.Flags(), "root-node", &rootNode)
	if err != nil {
		return fmt.Errorf(`error parsing "root-node": ` + err.Error())
	}

	// Form the request body
	body := model.UplPipeline{
		Edges:    edges,
		Nodes:    nodes,
		RootNode: rootNode,
	}

	resp, err := client.StreamsService.ExpandPipeline(body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetGroup Returns the full Streams JSON of a group.
func GetGroup(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var groupId string
	err = flags.ParseFlag(cmd.Flags(), "group-id", &groupId)
	if err != nil {
		return fmt.Errorf(`error parsing "group-id": ` + err.Error())
	}

	resp, err := client.StreamsService.GetGroup(groupId)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetInputSchema Returns the input schema for a function in a pipeline.
func GetInputSchema(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var edges []model.UplEdge
	err = flags.ParseFlag(cmd.Flags(), "edges", &edges)
	if err != nil {
		return fmt.Errorf(`error parsing "edges": ` + err.Error())
	}
	var nodeUuid string
	err = flags.ParseFlag(cmd.Flags(), "node-uuid", &nodeUuid)
	if err != nil {
		return fmt.Errorf(`error parsing "node-uuid": ` + err.Error())
	}
	var nodes []model.UplNode
	err = flags.ParseFlag(cmd.Flags(), "nodes", &nodes)
	if err != nil {
		return fmt.Errorf(`error parsing "nodes": ` + err.Error())
	}
	var rootNode []string
	err = flags.ParseFlag(cmd.Flags(), "root-node", &rootNode)
	if err != nil {
		return fmt.Errorf(`error parsing "root-node": ` + err.Error())
	}
	var targetPortName string
	err = flags.ParseFlag(cmd.Flags(), "target-port-name", &targetPortName)
	if err != nil {
		return fmt.Errorf(`error parsing "target-port-name": ` + err.Error())
	}

	// Form the request body
	body := model.GetInputSchemaRequest{
		NodeUuid:       nodeUuid,
		TargetPortName: targetPortName,
		UplJson: model.UplPipeline{
			Edges:    edges,
			Nodes:    nodes,
			RootNode: rootNode,
		},
	}

	resp, err := client.StreamsService.GetInputSchema(body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetOutputSchema Returns the output schema for a specified function in a pipeline. If no function ID is  specified, the request returns the output schema for all functions in a pipeline.
func GetOutputSchema(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var edges []model.UplEdge
	err = flags.ParseFlag(cmd.Flags(), "edges", &edges)
	if err != nil {
		return fmt.Errorf(`error parsing "edges": ` + err.Error())
	}
	var nodeUuidDefault string
	nodeUuid := &nodeUuidDefault
	err = flags.ParseFlag(cmd.Flags(), "node-uuid", &nodeUuid)
	if err != nil {
		return fmt.Errorf(`error parsing "node-uuid": ` + err.Error())
	}
	var nodes []model.UplNode
	err = flags.ParseFlag(cmd.Flags(), "nodes", &nodes)
	if err != nil {
		return fmt.Errorf(`error parsing "nodes": ` + err.Error())
	}
	var rootNode []string
	err = flags.ParseFlag(cmd.Flags(), "root-node", &rootNode)
	if err != nil {
		return fmt.Errorf(`error parsing "root-node": ` + err.Error())
	}
	var sourcePortNameDefault string
	sourcePortName := &sourcePortNameDefault
	err = flags.ParseFlag(cmd.Flags(), "source-port-name", &sourcePortName)
	if err != nil {
		return fmt.Errorf(`error parsing "source-port-name": ` + err.Error())
	}

	// Form the request body
	body := model.GetOutputSchemaRequest{
		NodeUuid:       nodeUuid,
		SourcePortName: sourcePortName,
		UplJson: model.UplPipeline{
			Edges:    edges,
			Nodes:    nodes,
			RootNode: rootNode,
		},
	}

	resp, err := client.StreamsService.GetOutputSchema(body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetPipeline Returns an individual pipeline by version.
func GetPipeline(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var version string
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form query params
	query := model.GetPipelineQueryParams{}
	query.Version = version

	resp, err := client.StreamsService.GetPipeline(id, &query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetPipelineLatestMetrics Returns the latest metrics for a single pipeline.
func GetPipelineLatestMetrics(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}

	resp, err := client.StreamsService.GetPipelineLatestMetrics(id)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetPipelinesStatus Returns the status of pipelines from the underlying streaming system.
func GetPipelinesStatus(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var activatedDefault bool
	activated := &activatedDefault
	err = flags.ParseFlag(cmd.Flags(), "activated", &activated)
	if err != nil {
		return fmt.Errorf(`error parsing "activated": ` + err.Error())
	}
	var createUserId string
	err = flags.ParseFlag(cmd.Flags(), "create-user-id", &createUserId)
	if err != nil {
		return fmt.Errorf(`error parsing "create-user-id": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var pageSizeDefault int32
	pageSize := &pageSizeDefault
	err = flags.ParseFlag(cmd.Flags(), "page-size", &pageSize)
	if err != nil {
		return fmt.Errorf(`error parsing "page-size": ` + err.Error())
	}
	var sortDir string
	err = flags.ParseFlag(cmd.Flags(), "sort-dir", &sortDir)
	if err != nil {
		return fmt.Errorf(`error parsing "sort-dir": ` + err.Error())
	}
	var sortField string
	err = flags.ParseFlag(cmd.Flags(), "sort-field", &sortField)
	if err != nil {
		return fmt.Errorf(`error parsing "sort-field": ` + err.Error())
	}
	// Form query params
	query := model.GetPipelinesStatusQueryParams{}
	query.Activated = activated
	query.CreateUserId = createUserId
	query.Name = name
	query.Offset = offset
	query.PageSize = pageSize
	query.SortDir = sortDir
	query.SortField = sortField

	resp, err := client.StreamsService.GetPipelinesStatus(&query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetPreviewData Returns the preview data for a session.
func GetPreviewData(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var previewSessionId int64
	err = flags.ParseFlag(cmd.Flags(), "preview-session-id", &previewSessionId)
	if err != nil {
		return fmt.Errorf(`error parsing "preview-session-id": ` + err.Error())
	}

	resp, err := client.StreamsService.GetPreviewData(previewSessionId)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetPreviewSession Returns information from a preview session.
func GetPreviewSession(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var previewSessionId int64
	err = flags.ParseFlag(cmd.Flags(), "preview-session-id", &previewSessionId)
	if err != nil {
		return fmt.Errorf(`error parsing "preview-session-id": ` + err.Error())
	}

	resp, err := client.StreamsService.GetPreviewSession(previewSessionId)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetPreviewSessionLatestMetrics Returns the latest metrics for a preview session.
func GetPreviewSessionLatestMetrics(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var previewSessionId int64
	err = flags.ParseFlag(cmd.Flags(), "preview-session-id", &previewSessionId)
	if err != nil {
		return fmt.Errorf(`error parsing "preview-session-id": ` + err.Error())
	}

	resp, err := client.StreamsService.GetPreviewSessionLatestMetrics(previewSessionId)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetRegistry Returns all functions in JSON format.
func GetRegistry(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var localDefault bool
	local := &localDefault
	err = flags.ParseFlag(cmd.Flags(), "local", &local)
	if err != nil {
		return fmt.Errorf(`error parsing "local": ` + err.Error())
	}
	// Form query params
	query := model.GetRegistryQueryParams{}
	query.Local = local

	resp, err := client.StreamsService.GetRegistry(&query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetTemplate Returns an individual template by version.
func GetTemplate(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var templateId string
	err = flags.ParseFlag(cmd.Flags(), "template-id", &templateId)
	if err != nil {
		return fmt.Errorf(`error parsing "template-id": ` + err.Error())
	}
	var versionDefault int64
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form query params
	query := model.GetTemplateQueryParams{}
	query.Version = version

	resp, err := client.StreamsService.GetTemplate(templateId, &query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListConnections Returns a list of connections (latest versions only) by tenant ID.
func ListConnections(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var connectorId string
	err = flags.ParseFlag(cmd.Flags(), "connector-id", &connectorId)
	if err != nil {
		return fmt.Errorf(`error parsing "connector-id": ` + err.Error())
	}
	var createUserId string
	err = flags.ParseFlag(cmd.Flags(), "create-user-id", &createUserId)
	if err != nil {
		return fmt.Errorf(`error parsing "create-user-id": ` + err.Error())
	}
	var functionId string
	err = flags.ParseFlag(cmd.Flags(), "function-id", &functionId)
	if err != nil {
		return fmt.Errorf(`error parsing "function-id": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var pageSizeDefault int32
	pageSize := &pageSizeDefault
	err = flags.ParseFlag(cmd.Flags(), "page-size", &pageSize)
	if err != nil {
		return fmt.Errorf(`error parsing "page-size": ` + err.Error())
	}
	var showSecretNames string
	err = flags.ParseFlag(cmd.Flags(), "show-secret-names", &showSecretNames)
	if err != nil {
		return fmt.Errorf(`error parsing "show-secret-names": ` + err.Error())
	}
	var sortDir string
	err = flags.ParseFlag(cmd.Flags(), "sort-dir", &sortDir)
	if err != nil {
		return fmt.Errorf(`error parsing "sort-dir": ` + err.Error())
	}
	var sortField string
	err = flags.ParseFlag(cmd.Flags(), "sort-field", &sortField)
	if err != nil {
		return fmt.Errorf(`error parsing "sort-field": ` + err.Error())
	}
	// Form query params
	query := model.ListConnectionsQueryParams{}
	query.ConnectorId = connectorId
	query.CreateUserId = createUserId
	query.FunctionId = functionId
	query.Name = name
	query.Offset = offset
	query.PageSize = pageSize
	query.ShowSecretNames = showSecretNames
	query.SortDir = sortDir
	query.SortField = sortField

	resp, err := client.StreamsService.ListConnections(&query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListConnectors Returns a list of the available connectors.
func ListConnectors(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	resp, err := client.StreamsService.ListConnectors()
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListPipelines Returns all pipelines.
func ListPipelines(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var activatedDefault bool
	activated := &activatedDefault
	err = flags.ParseFlag(cmd.Flags(), "activated", &activated)
	if err != nil {
		return fmt.Errorf(`error parsing "activated": ` + err.Error())
	}
	var createUserId string
	err = flags.ParseFlag(cmd.Flags(), "create-user-id", &createUserId)
	if err != nil {
		return fmt.Errorf(`error parsing "create-user-id": ` + err.Error())
	}
	var includeDataDefault bool
	includeData := &includeDataDefault
	err = flags.ParseFlag(cmd.Flags(), "include-data", &includeData)
	if err != nil {
		return fmt.Errorf(`error parsing "include-data": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var pageSizeDefault int32
	pageSize := &pageSizeDefault
	err = flags.ParseFlag(cmd.Flags(), "page-size", &pageSize)
	if err != nil {
		return fmt.Errorf(`error parsing "page-size": ` + err.Error())
	}
	var sortDir string
	err = flags.ParseFlag(cmd.Flags(), "sort-dir", &sortDir)
	if err != nil {
		return fmt.Errorf(`error parsing "sort-dir": ` + err.Error())
	}
	var sortField string
	err = flags.ParseFlag(cmd.Flags(), "sort-field", &sortField)
	if err != nil {
		return fmt.Errorf(`error parsing "sort-field": ` + err.Error())
	}
	// Form query params
	query := model.ListPipelinesQueryParams{}
	query.Activated = activated
	query.CreateUserId = createUserId
	query.IncludeData = includeData
	query.Name = name
	query.Offset = offset
	query.PageSize = pageSize
	query.SortDir = sortDir
	query.SortField = sortField

	resp, err := client.StreamsService.ListPipelines(&query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListTemplates Returns a list of all templates.
func ListTemplates(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var pageSizeDefault int32
	pageSize := &pageSizeDefault
	err = flags.ParseFlag(cmd.Flags(), "page-size", &pageSize)
	if err != nil {
		return fmt.Errorf(`error parsing "page-size": ` + err.Error())
	}
	var sortDir string
	err = flags.ParseFlag(cmd.Flags(), "sort-dir", &sortDir)
	if err != nil {
		return fmt.Errorf(`error parsing "sort-dir": ` + err.Error())
	}
	var sortField string
	err = flags.ParseFlag(cmd.Flags(), "sort-field", &sortField)
	if err != nil {
		return fmt.Errorf(`error parsing "sort-field": ` + err.Error())
	}
	// Form query params
	query := model.ListTemplatesQueryParams{}
	query.Offset = offset
	query.PageSize = pageSize
	query.SortDir = sortDir
	query.SortField = sortField

	resp, err := client.StreamsService.ListTemplates(&query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// MergePipelines Combines two Streams JSON programs.
func MergePipelines(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var edges []model.UplEdge
	err = flags.ParseFlag(cmd.Flags(), "edges", &edges)
	if err != nil {
		return fmt.Errorf(`error parsing "edges": ` + err.Error())
	}
	var edgesMainTree []model.UplEdge
	err = flags.ParseFlag(cmd.Flags(), "edges-main-tree", &edgesMainTree)
	if err != nil {
		return fmt.Errorf(`error parsing "edges-main-tree": ` + err.Error())
	}
	var nodes []model.UplNode
	err = flags.ParseFlag(cmd.Flags(), "nodes", &nodes)
	if err != nil {
		return fmt.Errorf(`error parsing "nodes": ` + err.Error())
	}
	var nodesMainTree []model.UplNode
	err = flags.ParseFlag(cmd.Flags(), "nodes-main-tree", &nodesMainTree)
	if err != nil {
		return fmt.Errorf(`error parsing "nodes-main-tree": ` + err.Error())
	}
	var rootNode []string
	err = flags.ParseFlag(cmd.Flags(), "root-node", &rootNode)
	if err != nil {
		return fmt.Errorf(`error parsing "root-node": ` + err.Error())
	}
	var rootNodeMainTree []string
	err = flags.ParseFlag(cmd.Flags(), "root-node-main-tree", &rootNodeMainTree)
	if err != nil {
		return fmt.Errorf(`error parsing "root-node-main-tree": ` + err.Error())
	}
	var targetNode string
	err = flags.ParseFlag(cmd.Flags(), "target-node", &targetNode)
	if err != nil {
		return fmt.Errorf(`error parsing "target-node": ` + err.Error())
	}
	var targetPort string
	err = flags.ParseFlag(cmd.Flags(), "target-port", &targetPort)
	if err != nil {
		return fmt.Errorf(`error parsing "target-port": ` + err.Error())
	}

	// Form the request body
	body := model.PipelinesMergeRequest{
		InputTree: model.UplPipeline{
			Edges:    edges,
			Nodes:    nodes,
			RootNode: rootNode,
		},
		MainTree: model.UplPipeline{
			Edges:    edgesMainTree,
			Nodes:    nodesMainTree,
			RootNode: rootNodeMainTree,
		},
		TargetNode: targetNode,
		TargetPort: targetPort,
	}

	resp, err := client.StreamsService.MergePipelines(body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// PutConnection Modifies an existing DSP connection.
func PutConnection(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var connectionId string
	err = flags.ParseFlag(cmd.Flags(), "connection-id", &connectionId)
	if err != nil {
		return fmt.Errorf(`error parsing "connection-id": ` + err.Error())
	}
	var data map[string]interface{}
	err = flags.ParseFlag(cmd.Flags(), "data", &data)
	if err != nil {
		return fmt.Errorf(`error parsing "data": ` + err.Error())
	}
	var description string
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}

	// Form the request body
	body := model.ConnectionPutRequest{
		Data:        data,
		Description: description,
		Name:        name,
	}

	resp, err := client.StreamsService.PutConnection(connectionId, body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// PutGroup Update a group function combining the Streams JSON of two or more functions.
func PutGroup(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var arguments []model.GroupArgumentsNode
	err = flags.ParseFlag(cmd.Flags(), "arguments", &arguments)
	if err != nil {
		return fmt.Errorf(`error parsing "arguments": ` + err.Error())
	}
	var attributes map[string]interface{}
	err = flags.ParseFlag(cmd.Flags(), "attributes", &attributes)
	if err != nil {
		return fmt.Errorf(`error parsing "attributes": ` + err.Error())
	}
	var categories []int64
	err = flags.ParseFlag(cmd.Flags(), "categories", &categories)
	if err != nil {
		return fmt.Errorf(`error parsing "categories": ` + err.Error())
	}
	var edges []model.UplEdge
	err = flags.ParseFlag(cmd.Flags(), "edges", &edges)
	if err != nil {
		return fmt.Errorf(`error parsing "edges": ` + err.Error())
	}
	var groupId string
	err = flags.ParseFlag(cmd.Flags(), "group-id", &groupId)
	if err != nil {
		return fmt.Errorf(`error parsing "group-id": ` + err.Error())
	}
	var mappings []model.GroupFunctionArgsMappingNode
	err = flags.ParseFlag(cmd.Flags(), "mappings", &mappings)
	if err != nil {
		return fmt.Errorf(`error parsing "mappings": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var nodes []model.UplNode
	err = flags.ParseFlag(cmd.Flags(), "nodes", &nodes)
	if err != nil {
		return fmt.Errorf(`error parsing "nodes": ` + err.Error())
	}
	var outputType string
	err = flags.ParseFlag(cmd.Flags(), "output-type", &outputType)
	if err != nil {
		return fmt.Errorf(`error parsing "output-type": ` + err.Error())
	}
	var rootNode []string
	err = flags.ParseFlag(cmd.Flags(), "root-node", &rootNode)
	if err != nil {
		return fmt.Errorf(`error parsing "root-node": ` + err.Error())
	}
	var scalarDefault bool
	scalar := &scalarDefault
	err = flags.ParseFlag(cmd.Flags(), "scalar", &scalar)
	if err != nil {
		return fmt.Errorf(`error parsing "scalar": ` + err.Error())
	}
	var variadicDefault bool
	variadic := &variadicDefault
	err = flags.ParseFlag(cmd.Flags(), "variadic", &variadic)
	if err != nil {
		return fmt.Errorf(`error parsing "variadic": ` + err.Error())
	}

	// Form the request body
	body := model.GroupPutRequest{
		Arguments: arguments,
		Ast: model.UplPipeline{
			Edges:    edges,
			Nodes:    nodes,
			RootNode: rootNode,
		},
		Attributes: attributes,
		Categories: categories,
		Mappings:   mappings,
		Name:       name,
		OutputType: outputType,
		Scalar:     scalar,
		Variadic:   variadic,
	}

	resp, err := client.StreamsService.PutGroup(groupId, body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// PutTemplate Updates an existing template.
func PutTemplate(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var description string
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var edges []model.UplEdge
	err = flags.ParseFlag(cmd.Flags(), "edges", &edges)
	if err != nil {
		return fmt.Errorf(`error parsing "edges": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var nodes []model.UplNode
	err = flags.ParseFlag(cmd.Flags(), "nodes", &nodes)
	if err != nil {
		return fmt.Errorf(`error parsing "nodes": ` + err.Error())
	}
	var rootNode []string
	err = flags.ParseFlag(cmd.Flags(), "root-node", &rootNode)
	if err != nil {
		return fmt.Errorf(`error parsing "root-node": ` + err.Error())
	}
	var templateId string
	err = flags.ParseFlag(cmd.Flags(), "template-id", &templateId)
	if err != nil {
		return fmt.Errorf(`error parsing "template-id": ` + err.Error())
	}

	// Form the request body
	body := model.TemplatePutRequest{
		Data: model.UplPipeline{
			Edges:    edges,
			Nodes:    nodes,
			RootNode: rootNode,
		},
		Description: description,
		Name:        name,
	}

	resp, err := client.StreamsService.PutTemplate(templateId, body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ReactivatePipeline Reactivate a pipeline
func ReactivatePipeline(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}

	resp, err := client.StreamsService.ReactivatePipeline(id)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// StartPreview Creates a preview session for a pipeline.
func StartPreview(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var edges []model.UplEdge
	err = flags.ParseFlag(cmd.Flags(), "edges", &edges)
	if err != nil {
		return fmt.Errorf(`error parsing "edges": ` + err.Error())
	}
	var nodes []model.UplNode
	err = flags.ParseFlag(cmd.Flags(), "nodes", &nodes)
	if err != nil {
		return fmt.Errorf(`error parsing "nodes": ` + err.Error())
	}
	var recordsLimitDefault int32
	recordsLimit := &recordsLimitDefault
	err = flags.ParseFlag(cmd.Flags(), "records-limit", &recordsLimit)
	if err != nil {
		return fmt.Errorf(`error parsing "records-limit": ` + err.Error())
	}
	var recordsPerPipelineDefault int32
	recordsPerPipeline := &recordsPerPipelineDefault
	err = flags.ParseFlag(cmd.Flags(), "records-per-pipeline", &recordsPerPipeline)
	if err != nil {
		return fmt.Errorf(`error parsing "records-per-pipeline": ` + err.Error())
	}
	var rootNode []string
	err = flags.ParseFlag(cmd.Flags(), "root-node", &rootNode)
	if err != nil {
		return fmt.Errorf(`error parsing "root-node": ` + err.Error())
	}
	var sessionLifetimeMsDefault int64
	sessionLifetimeMs := &sessionLifetimeMsDefault
	err = flags.ParseFlag(cmd.Flags(), "session-lifetime-ms", &sessionLifetimeMs)
	if err != nil {
		return fmt.Errorf(`error parsing "session-lifetime-ms": ` + err.Error())
	}
	var streamingConfigurationIdDefault int64
	streamingConfigurationId := &streamingConfigurationIdDefault
	err = flags.ParseFlag(cmd.Flags(), "streaming-configuration-id", &streamingConfigurationId)
	if err != nil {
		return fmt.Errorf(`error parsing "streaming-configuration-id": ` + err.Error())
	}
	var useNewDataDefault bool
	useNewData := &useNewDataDefault
	err = flags.ParseFlag(cmd.Flags(), "use-new-data", &useNewData)
	if err != nil {
		return fmt.Errorf(`error parsing "use-new-data": ` + err.Error())
	}

	// Form the request body
	body := model.PreviewSessionStartRequest{
		RecordsLimit:             recordsLimit,
		RecordsPerPipeline:       recordsPerPipeline,
		SessionLifetimeMs:        sessionLifetimeMs,
		StreamingConfigurationId: streamingConfigurationId,
		Upl: model.UplPipeline{
			Edges:    edges,
			Nodes:    nodes,
			RootNode: rootNode,
		},
		UseNewData: useNewData,
	}

	resp, err := client.StreamsService.StartPreview(body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// StopPreview Stops a preview session.
func StopPreview(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var previewSessionId int64
	err = flags.ParseFlag(cmd.Flags(), "preview-session-id", &previewSessionId)
	if err != nil {
		return fmt.Errorf(`error parsing "preview-session-id": ` + err.Error())
	}

	resp, err := client.StreamsService.StopPreview(previewSessionId)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateConnection Partially modifies an existing DSP connection.
func UpdateConnection(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var connectionId string
	err = flags.ParseFlag(cmd.Flags(), "connection-id", &connectionId)
	if err != nil {
		return fmt.Errorf(`error parsing "connection-id": ` + err.Error())
	}
	var data map[string]interface{}
	err = flags.ParseFlag(cmd.Flags(), "data", &data)
	if err != nil {
		return fmt.Errorf(`error parsing "data": ` + err.Error())
	}
	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}

	// Form the request body
	body := model.ConnectionPatchRequest{
		Data:        data,
		Description: description,
		Name:        name,
	}

	resp, err := client.StreamsService.UpdateConnection(connectionId, body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateGroup Modify a group function by combining the Streams JSON of two or more functions.
func UpdateGroup(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var arguments []model.GroupArgumentsNode
	err = flags.ParseFlag(cmd.Flags(), "arguments", &arguments)
	if err != nil {
		return fmt.Errorf(`error parsing "arguments": ` + err.Error())
	}
	var attributes map[string]interface{}
	err = flags.ParseFlag(cmd.Flags(), "attributes", &attributes)
	if err != nil {
		return fmt.Errorf(`error parsing "attributes": ` + err.Error())
	}
	var categories []int64
	err = flags.ParseFlag(cmd.Flags(), "categories", &categories)
	if err != nil {
		return fmt.Errorf(`error parsing "categories": ` + err.Error())
	}
	var edges []model.UplEdge
	err = flags.ParseFlag(cmd.Flags(), "edges", &edges)
	if err != nil {
		return fmt.Errorf(`error parsing "edges": ` + err.Error())
	}
	var groupId string
	err = flags.ParseFlag(cmd.Flags(), "group-id", &groupId)
	if err != nil {
		return fmt.Errorf(`error parsing "group-id": ` + err.Error())
	}
	var mappings []model.GroupFunctionArgsMappingNode
	err = flags.ParseFlag(cmd.Flags(), "mappings", &mappings)
	if err != nil {
		return fmt.Errorf(`error parsing "mappings": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var nodes []model.UplNode
	err = flags.ParseFlag(cmd.Flags(), "nodes", &nodes)
	if err != nil {
		return fmt.Errorf(`error parsing "nodes": ` + err.Error())
	}
	var outputTypeDefault string
	outputType := &outputTypeDefault
	err = flags.ParseFlag(cmd.Flags(), "output-type", &outputType)
	if err != nil {
		return fmt.Errorf(`error parsing "output-type": ` + err.Error())
	}
	var rootNode []string
	err = flags.ParseFlag(cmd.Flags(), "root-node", &rootNode)
	if err != nil {
		return fmt.Errorf(`error parsing "root-node": ` + err.Error())
	}
	var scalarDefault bool
	scalar := &scalarDefault
	err = flags.ParseFlag(cmd.Flags(), "scalar", &scalar)
	if err != nil {
		return fmt.Errorf(`error parsing "scalar": ` + err.Error())
	}
	var variadicDefault bool
	variadic := &variadicDefault
	err = flags.ParseFlag(cmd.Flags(), "variadic", &variadic)
	if err != nil {
		return fmt.Errorf(`error parsing "variadic": ` + err.Error())
	}

	// Form the request body
	body := model.GroupPatchRequest{
		Arguments: arguments,
		Ast: &model.UplPipeline{
			Edges:    edges,
			Nodes:    nodes,
			RootNode: rootNode,
		},
		Attributes: attributes,
		Categories: categories,
		Mappings:   mappings,
		Name:       name,
		OutputType: outputType,
		Scalar:     scalar,
		Variadic:   variadic,
	}

	resp, err := client.StreamsService.UpdateGroup(groupId, body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdatePipeline Partially modifies an existing pipeline.
func UpdatePipeline(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var bypassValidationDefault bool
	bypassValidation := &bypassValidationDefault
	err = flags.ParseFlag(cmd.Flags(), "bypass-validation", &bypassValidation)
	if err != nil {
		return fmt.Errorf(`error parsing "bypass-validation": ` + err.Error())
	}
	var createUserIdDefault string
	createUserId := &createUserIdDefault
	err = flags.ParseFlag(cmd.Flags(), "create-user-id", &createUserId)
	if err != nil {
		return fmt.Errorf(`error parsing "create-user-id": ` + err.Error())
	}
	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var edges []model.UplEdge
	err = flags.ParseFlag(cmd.Flags(), "edges", &edges)
	if err != nil {
		return fmt.Errorf(`error parsing "edges": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var nodes []model.UplNode
	err = flags.ParseFlag(cmd.Flags(), "nodes", &nodes)
	if err != nil {
		return fmt.Errorf(`error parsing "nodes": ` + err.Error())
	}
	var rootNode []string
	err = flags.ParseFlag(cmd.Flags(), "root-node", &rootNode)
	if err != nil {
		return fmt.Errorf(`error parsing "root-node": ` + err.Error())
	}

	// Form the request body
	body := model.PipelinePatchRequest{
		BypassValidation: bypassValidation,
		CreateUserId:     createUserId,
		Data: &model.UplPipeline{
			Edges:    edges,
			Nodes:    nodes,
			RootNode: rootNode,
		},
		Description: description,
		Name:        name,
	}

	resp, err := client.StreamsService.UpdatePipeline(id, body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateTemplate Partially modifies an existing template.
func UpdateTemplate(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var edges []model.UplEdge
	err = flags.ParseFlag(cmd.Flags(), "edges", &edges)
	if err != nil {
		return fmt.Errorf(`error parsing "edges": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var nodes []model.UplNode
	err = flags.ParseFlag(cmd.Flags(), "nodes", &nodes)
	if err != nil {
		return fmt.Errorf(`error parsing "nodes": ` + err.Error())
	}
	var rootNode []string
	err = flags.ParseFlag(cmd.Flags(), "root-node", &rootNode)
	if err != nil {
		return fmt.Errorf(`error parsing "root-node": ` + err.Error())
	}
	var templateId string
	err = flags.ParseFlag(cmd.Flags(), "template-id", &templateId)
	if err != nil {
		return fmt.Errorf(`error parsing "template-id": ` + err.Error())
	}

	// Form the request body
	body := model.TemplatePatchRequest{
		Data: &model.UplPipeline{
			Edges:    edges,
			Nodes:    nodes,
			RootNode: rootNode,
		},
		Description: description,
		Name:        name,
	}

	resp, err := client.StreamsService.UpdateTemplate(templateId, body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ValidatePipeline Verifies whether the Streams JSON is valid.
func ValidatePipeline(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	var edges []model.UplEdge
	err = flags.ParseFlag(cmd.Flags(), "edges", &edges)
	if err != nil {
		return fmt.Errorf(`error parsing "edges": ` + err.Error())
	}
	var nodes []model.UplNode
	err = flags.ParseFlag(cmd.Flags(), "nodes", &nodes)
	if err != nil {
		return fmt.Errorf(`error parsing "nodes": ` + err.Error())
	}
	var rootNode []string
	err = flags.ParseFlag(cmd.Flags(), "root-node", &rootNode)
	if err != nil {
		return fmt.Errorf(`error parsing "root-node": ` + err.Error())
	}

	// Form the request body
	body := model.ValidateRequest{
		Upl: model.UplPipeline{
			Edges:    edges,
			Nodes:    nodes,
			RootNode: rootNode,
		},
	}

	resp, err := client.StreamsService.ValidatePipeline(body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}
