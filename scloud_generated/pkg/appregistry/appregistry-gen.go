// Package appregistry -- generated by scloudgen
// !! DO NOT EDIT !!
//
package appregistry

import (
	"fmt"

	"github.com/spf13/cobra"
	"github.com/splunk/splunk-cloud-sdk-go/scloud_generated/auth"
	"github.com/splunk/splunk-cloud-sdk-go/scloud_generated/flags"
	"github.com/splunk/splunk-cloud-sdk-go/scloud_generated/jsonx"
	model "github.com/splunk/splunk-cloud-sdk-go/services/appregistry"
)

// CreateApp Creates an app.
func CreateApp(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	appPrincipalPermissionsFlag := cmd.Flags().Lookup("appPrincipalPermissions")
	var appPrincipalPermissions []string
	err = flags.ParseFlag(appPrincipalPermissionsFlag, &appPrincipalPermissions)
	if err != nil {
		return fmt.Errorf("error parsing appPrincipalPermissions: " + err.Error())
	}
	descriptionFlag := cmd.Flags().Lookup("description")
	var description string
	err = flags.ParseFlag(descriptionFlag, &description)
	if err != nil {
		return fmt.Errorf("error parsing description: " + err.Error())
	}
	kindFlag := cmd.Flags().Lookup("kind")
	var kind model.AppResourceKind
	err = flags.ParseFlag(kindFlag, &kind)
	if err != nil {
		return fmt.Errorf("error parsing kind: " + err.Error())
	}
	loginUrlFlag := cmd.Flags().Lookup("loginUrl")
	var loginUrl string
	err = flags.ParseFlag(loginUrlFlag, &loginUrl)
	if err != nil {
		return fmt.Errorf("error parsing loginUrl: " + err.Error())
	}
	logoUrlFlag := cmd.Flags().Lookup("logoUrl")
	var logoUrl string
	err = flags.ParseFlag(logoUrlFlag, &logoUrl)
	if err != nil {
		return fmt.Errorf("error parsing logoUrl: " + err.Error())
	}
	nameFlag := cmd.Flags().Lookup("name")
	var name string
	err = flags.ParseFlag(nameFlag, &name)
	if err != nil {
		return fmt.Errorf("error parsing name: " + err.Error())
	}
	redirectUrlsFlag := cmd.Flags().Lookup("redirectUrls")
	var redirectUrls []string
	err = flags.ParseFlag(redirectUrlsFlag, &redirectUrls)
	if err != nil {
		return fmt.Errorf("error parsing redirectUrls: " + err.Error())
	}
	setupUrlFlag := cmd.Flags().Lookup("setupUrl")
	var setupUrl string
	err = flags.ParseFlag(setupUrlFlag, &setupUrl)
	if err != nil {
		return fmt.Errorf("error parsing setupUrl: " + err.Error())
	}
	titleFlag := cmd.Flags().Lookup("title")
	var title string
	err = flags.ParseFlag(titleFlag, &title)
	if err != nil {
		return fmt.Errorf("error parsing title: " + err.Error())
	}
	userPermissionsFilterFlag := cmd.Flags().Lookup("userPermissionsFilter")
	var userPermissionsFilter []string
	err = flags.ParseFlag(userPermissionsFilterFlag, &userPermissionsFilter)
	if err != nil {
		return fmt.Errorf("error parsing userPermissionsFilter: " + err.Error())
	}
	webhookUrlFlag := cmd.Flags().Lookup("webhookUrl")
	var webhookUrl string
	err = flags.ParseFlag(webhookUrlFlag, &webhookUrl)
	if err != nil {
		return fmt.Errorf("error parsing webhookUrl: " + err.Error())
	}

	// Form the request body
	body := model.CreateAppRequest{
		AppPrincipalPermissions: appPrincipalPermissions,
		Description:             &description,
		Kind:                    kind,
		LoginUrl:                &loginUrl,
		LogoUrl:                 &logoUrl,
		Name:                    name,
		RedirectUrls:            redirectUrls,
		SetupUrl:                &setupUrl,
		Title:                   title,
		UserPermissionsFilter:   userPermissionsFilter,
		WebhookUrl:              &webhookUrl,
	}

	resp, err := client.AppRegistryService.CreateApp(body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateSubscription Creates a subscription.
func CreateSubscription(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	appNameFlag := cmd.Flags().Lookup("appName")
	var appName string
	err = flags.ParseFlag(appNameFlag, &appName)
	if err != nil {
		return fmt.Errorf("error parsing appName: " + err.Error())
	}

	// Form the request body
	body := model.AppName{
		AppName: appName,
	}

	err = client.AppRegistryService.CreateSubscription(body)
	if err != nil {
		return err
	}

	return nil
}

// DeleteApp Removes an app.
func DeleteApp(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	appNameFlag := cmd.Flags().Lookup("appName")
	var appName string
	err = flags.ParseFlag(appNameFlag, &appName)
	if err != nil {
		return fmt.Errorf("error parsing appName: " + err.Error())
	}

	err = client.AppRegistryService.DeleteApp(appName)
	if err != nil {
		return err
	}

	return nil
}

// DeleteSubscription Removes a subscription.
func DeleteSubscription(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	appNameFlag := cmd.Flags().Lookup("appName")
	var appName string
	err = flags.ParseFlag(appNameFlag, &appName)
	if err != nil {
		return fmt.Errorf("error parsing appName: " + err.Error())
	}

	err = client.AppRegistryService.DeleteSubscription(appName)
	if err != nil {
		return err
	}

	return nil
}

// GetApp Returns the metadata of an app.
func GetApp(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	appNameFlag := cmd.Flags().Lookup("appName")
	var appName string
	err = flags.ParseFlag(appNameFlag, &appName)
	if err != nil {
		return fmt.Errorf("error parsing appName: " + err.Error())
	}

	resp, err := client.AppRegistryService.GetApp(appName)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetKeys Returns a list of the public keys used for verifying signed webhook requests.
func GetKeys(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClientSystemTenant()

	if err != nil {
		return err
	}

	resp, err := client.AppRegistryService.GetKeys()
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetSubscription Returns or validates a subscription.
func GetSubscription(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	appNameFlag := cmd.Flags().Lookup("appName")
	var appName string
	err = flags.ParseFlag(appNameFlag, &appName)
	if err != nil {
		return fmt.Errorf("error parsing appName: " + err.Error())
	}

	resp, err := client.AppRegistryService.GetSubscription(appName)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListAppSubscriptions Returns the collection of subscriptions to an app.
func ListAppSubscriptions(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	appNameFlag := cmd.Flags().Lookup("appName")
	var appName string
	err = flags.ParseFlag(appNameFlag, &appName)
	if err != nil {
		return fmt.Errorf("error parsing appName: " + err.Error())
	}

	resp, err := client.AppRegistryService.ListAppSubscriptions(appName)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListApps Returns a list of apps.
func ListApps(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	resp, err := client.AppRegistryService.ListApps()
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListSubscriptions Returns the tenant subscriptions.
func ListSubscriptions(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	kindFlag := cmd.Flags().Lookup("kind")
	var kind model.AppResourceKind
	err = flags.ParseFlag(kindFlag, &kind)
	if err != nil {
		return fmt.Errorf("error parsing kind: " + err.Error())
	}
	// Form query params
	query := model.ListSubscriptionsQueryParams{}
	query.Kind = &kind

	resp, err := client.AppRegistryService.ListSubscriptions(&query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// RotateSecret Rotates the client secret for an app.
func RotateSecret(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	appNameFlag := cmd.Flags().Lookup("appName")
	var appName string
	err = flags.ParseFlag(appNameFlag, &appName)
	if err != nil {
		return fmt.Errorf("error parsing appName: " + err.Error())
	}

	resp, err := client.AppRegistryService.RotateSecret(appName)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateApp Updates an app.
func UpdateApp(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Parse all flags
	appNameFlag := cmd.Flags().Lookup("appName")
	var appName string
	err = flags.ParseFlag(appNameFlag, &appName)
	if err != nil {
		return fmt.Errorf("error parsing appName: " + err.Error())
	}
	appPrincipalPermissionsFlag := cmd.Flags().Lookup("appPrincipalPermissions")
	var appPrincipalPermissions []string
	err = flags.ParseFlag(appPrincipalPermissionsFlag, &appPrincipalPermissions)
	if err != nil {
		return fmt.Errorf("error parsing appPrincipalPermissions: " + err.Error())
	}
	descriptionFlag := cmd.Flags().Lookup("description")
	var description string
	err = flags.ParseFlag(descriptionFlag, &description)
	if err != nil {
		return fmt.Errorf("error parsing description: " + err.Error())
	}
	loginUrlFlag := cmd.Flags().Lookup("loginUrl")
	var loginUrl string
	err = flags.ParseFlag(loginUrlFlag, &loginUrl)
	if err != nil {
		return fmt.Errorf("error parsing loginUrl: " + err.Error())
	}
	logoUrlFlag := cmd.Flags().Lookup("logoUrl")
	var logoUrl string
	err = flags.ParseFlag(logoUrlFlag, &logoUrl)
	if err != nil {
		return fmt.Errorf("error parsing logoUrl: " + err.Error())
	}
	redirectUrlsFlag := cmd.Flags().Lookup("redirectUrls")
	var redirectUrls []string
	err = flags.ParseFlag(redirectUrlsFlag, &redirectUrls)
	if err != nil {
		return fmt.Errorf("error parsing redirectUrls: " + err.Error())
	}
	setupUrlFlag := cmd.Flags().Lookup("setupUrl")
	var setupUrl string
	err = flags.ParseFlag(setupUrlFlag, &setupUrl)
	if err != nil {
		return fmt.Errorf("error parsing setupUrl: " + err.Error())
	}
	titleFlag := cmd.Flags().Lookup("title")
	var title string
	err = flags.ParseFlag(titleFlag, &title)
	if err != nil {
		return fmt.Errorf("error parsing title: " + err.Error())
	}
	userPermissionsFilterFlag := cmd.Flags().Lookup("userPermissionsFilter")
	var userPermissionsFilter []string
	err = flags.ParseFlag(userPermissionsFilterFlag, &userPermissionsFilter)
	if err != nil {
		return fmt.Errorf("error parsing userPermissionsFilter: " + err.Error())
	}
	webhookUrlFlag := cmd.Flags().Lookup("webhookUrl")
	var webhookUrl string
	err = flags.ParseFlag(webhookUrlFlag, &webhookUrl)
	if err != nil {
		return fmt.Errorf("error parsing webhookUrl: " + err.Error())
	}

	// Form the request body
	body := model.UpdateAppRequest{
		AppPrincipalPermissions: appPrincipalPermissions,
		Description:             &description,
		LoginUrl:                &loginUrl,
		LogoUrl:                 &logoUrl,
		RedirectUrls:            redirectUrls,
		SetupUrl:                &setupUrl,
		Title:                   title,
		UserPermissionsFilter:   userPermissionsFilter,
		WebhookUrl:              &webhookUrl,
	}

	resp, err := client.AppRegistryService.UpdateApp(appName, body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}
