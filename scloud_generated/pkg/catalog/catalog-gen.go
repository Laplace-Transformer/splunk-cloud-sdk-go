// Package catalog -- generated by scloudgen
// !! DO NOT EDIT !!
//
package catalog

import (
	"fmt"

	"github.com/spf13/cobra"
	"github.com/splunk/splunk-cloud-sdk-go/scloud_generated/auth"
	"github.com/splunk/splunk-cloud-sdk-go/scloud_generated/flags"
	"github.com/splunk/splunk-cloud-sdk-go/scloud_generated/jsonx"
	model "github.com/splunk/splunk-cloud-sdk-go/services/catalog"
)

// CreateActionForRuleAliasAction Create a new action for a rule associated with a specific resource name.
func CreateActionForRuleAliasAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var alias string
	err = flags.ParseFlag(cmd.Flags(), "alias", &alias)
	if err != nil {
		return fmt.Errorf(`error parsing "alias": ` + err.Error())
	}
	var field string
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.AliasActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ruleidDefault string
	ruleid := &ruleidDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.AliasActionPost{

		Alias:   alias,
		Field:   field,
		Id:      id,
		Kind:    kind,
		Ruleid:  ruleid,
		Version: version,
	}

	resp, err := client.CatalogService.CreateActionForRule(ruleresourcename, model.MakeActionPostFromAliasActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleAutoKvAction Create a new action for a rule associated with a specific resource name.
func CreateActionForRuleAutoKvAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.AutoKvActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var mode string
	err = flags.ParseFlag(cmd.Flags(), "mode", &mode)
	if err != nil {
		return fmt.Errorf(`error parsing "mode": ` + err.Error())
	}
	var ruleidDefault string
	ruleid := &ruleidDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.AutoKvActionPost{

		Id:      id,
		Kind:    kind,
		Mode:    mode,
		Ruleid:  ruleid,
		Version: version,
	}

	resp, err := client.CatalogService.CreateActionForRule(ruleresourcename, model.MakeActionPostFromAutoKvActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleByIdAliasAction Create a new action for a specific rule.
func CreateActionForRuleByIdAliasAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var alias string
	err = flags.ParseFlag(cmd.Flags(), "alias", &alias)
	if err != nil {
		return fmt.Errorf(`error parsing "alias": ` + err.Error())
	}
	var field string
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.AliasActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleidBodyDefault string
	ruleidBody := &ruleidBodyDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid-body", &ruleidBody)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid-body": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.AliasActionPost{

		Alias:   alias,
		Field:   field,
		Id:      id,
		Kind:    kind,
		Ruleid:  ruleidBody,
		Version: version,
	}

	resp, err := client.CatalogService.CreateActionForRuleById(ruleid, model.MakeActionPostFromAliasActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleByIdAutoKvAction Create a new action for a specific rule.
func CreateActionForRuleByIdAutoKvAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.AutoKvActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var mode string
	err = flags.ParseFlag(cmd.Flags(), "mode", &mode)
	if err != nil {
		return fmt.Errorf(`error parsing "mode": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleidBodyDefault string
	ruleidBody := &ruleidBodyDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid-body", &ruleidBody)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid-body": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.AutoKvActionPost{

		Id:      id,
		Kind:    kind,
		Mode:    mode,
		Ruleid:  ruleidBody,
		Version: version,
	}

	resp, err := client.CatalogService.CreateActionForRuleById(ruleid, model.MakeActionPostFromAutoKvActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleByIdEvalAction Create a new action for a specific rule.
func CreateActionForRuleByIdEvalAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var expression string
	err = flags.ParseFlag(cmd.Flags(), "expression", &expression)
	if err != nil {
		return fmt.Errorf(`error parsing "expression": ` + err.Error())
	}
	var field string
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.EvalActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleidBodyDefault string
	ruleidBody := &ruleidBodyDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid-body", &ruleidBody)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid-body": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.EvalActionPost{

		Expression: expression,
		Field:      field,
		Id:         id,
		Kind:       kind,
		Ruleid:     ruleidBody,
		Version:    version,
	}

	resp, err := client.CatalogService.CreateActionForRuleById(ruleid, model.MakeActionPostFromEvalActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleByIdLookupAction Create a new action for a specific rule.
func CreateActionForRuleByIdLookupAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var expression string
	err = flags.ParseFlag(cmd.Flags(), "expression", &expression)
	if err != nil {
		return fmt.Errorf(`error parsing "expression": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.LookupActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleidBodyDefault string
	ruleidBody := &ruleidBodyDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid-body", &ruleidBody)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid-body": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.LookupActionPost{

		Expression: expression,
		Id:         id,
		Kind:       kind,
		Ruleid:     ruleidBody,
		Version:    version,
	}

	resp, err := client.CatalogService.CreateActionForRuleById(ruleid, model.MakeActionPostFromLookupActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleByIdRegexAction Create a new action for a specific rule.
func CreateActionForRuleByIdRegexAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var field string
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.RegexActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var limitDefault int32
	limit := &limitDefault
	err = flags.ParseFlag(cmd.Flags(), "limit", &limit)
	if err != nil {
		return fmt.Errorf(`error parsing "limit": ` + err.Error())
	}
	var pattern string
	err = flags.ParseFlag(cmd.Flags(), "pattern", &pattern)
	if err != nil {
		return fmt.Errorf(`error parsing "pattern": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleidBodyDefault string
	ruleidBody := &ruleidBodyDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid-body", &ruleidBody)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid-body": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RegexActionPost{

		Field:   field,
		Id:      id,
		Kind:    kind,
		Limit:   limit,
		Pattern: pattern,
		Ruleid:  ruleidBody,
		Version: version,
	}

	resp, err := client.CatalogService.CreateActionForRuleById(ruleid, model.MakeActionPostFromRegexActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleEvalAction Create a new action for a rule associated with a specific resource name.
func CreateActionForRuleEvalAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var expression string
	err = flags.ParseFlag(cmd.Flags(), "expression", &expression)
	if err != nil {
		return fmt.Errorf(`error parsing "expression": ` + err.Error())
	}
	var field string
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.EvalActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ruleidDefault string
	ruleid := &ruleidDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.EvalActionPost{

		Expression: expression,
		Field:      field,
		Id:         id,
		Kind:       kind,
		Ruleid:     ruleid,
		Version:    version,
	}

	resp, err := client.CatalogService.CreateActionForRule(ruleresourcename, model.MakeActionPostFromEvalActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleLookupAction Create a new action for a rule associated with a specific resource name.
func CreateActionForRuleLookupAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var expression string
	err = flags.ParseFlag(cmd.Flags(), "expression", &expression)
	if err != nil {
		return fmt.Errorf(`error parsing "expression": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.LookupActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ruleidDefault string
	ruleid := &ruleidDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.LookupActionPost{

		Expression: expression,
		Id:         id,
		Kind:       kind,
		Ruleid:     ruleid,
		Version:    version,
	}

	resp, err := client.CatalogService.CreateActionForRule(ruleresourcename, model.MakeActionPostFromLookupActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleRegexAction Create a new action for a rule associated with a specific resource name.
func CreateActionForRuleRegexAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var field string
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.RegexActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var limitDefault int32
	limit := &limitDefault
	err = flags.ParseFlag(cmd.Flags(), "limit", &limit)
	if err != nil {
		return fmt.Errorf(`error parsing "limit": ` + err.Error())
	}
	var pattern string
	err = flags.ParseFlag(cmd.Flags(), "pattern", &pattern)
	if err != nil {
		return fmt.Errorf(`error parsing "pattern": ` + err.Error())
	}
	var ruleidDefault string
	ruleid := &ruleidDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RegexActionPost{

		Field:   field,
		Id:      id,
		Kind:    kind,
		Limit:   limit,
		Pattern: pattern,
		Ruleid:  ruleid,
		Version: version,
	}

	resp, err := client.CatalogService.CreateActionForRule(ruleresourcename, model.MakeActionPostFromRegexActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateAnnotationForDashboardbyId Create a new annotation for a specific dashboard.
func CreateAnnotationForDashboardbyId(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// CreateAnnotationForDashboardsByResourceName Create a new annotation for a specific dataset.
func CreateAnnotationForDashboardsByResourceName(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// CreateAnnotationForDatasetById Create a new annotation for a specific dataset.
func CreateAnnotationForDatasetById(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// CreateAnnotationForDatasetByResourceName Create a new annotation for a specific dataset.
func CreateAnnotationForDatasetByResourceName(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// CreateDashboard Create a new dashboard.
func CreateDashboard(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var definition string
	err = flags.ParseFlag(cmd.Flags(), "definition", &definition)
	if err != nil {
		return fmt.Errorf(`error parsing "definition": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var isactiveDefault bool
	isactive := &isactiveDefault
	err = flags.ParseFlag(cmd.Flags(), "isactive", &isactive)
	if err != nil {
		return fmt.Errorf(`error parsing "isactive": ` + err.Error())
	}
	var module string
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.DashboardPost{

		Definition: definition,
		Id:         id,
		Isactive:   isactive,
		Module:     module,
		Name:       name,
		Version:    version,
	}

	resp, err := client.CatalogService.CreateDashboard(generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetImport Create a new dataset import.
func CreateDatasetImport(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var module string
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.DatasetImportedBy{

		Module: module,
		Name:   name,
	}

	resp, err := client.CatalogService.CreateDatasetImport(datasetresourcename, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetImportById Create a new dataset import.
func CreateDatasetImportById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var module string
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.DatasetImportedBy{

		Module: module,
		Name:   name,
	}

	resp, err := client.CatalogService.CreateDatasetImportById(datasetid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetImportByIdv1 Create a new dataset import.
func CreateDatasetImportByIdv1(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var module string
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.DatasetImportedBy{

		Module: module,
		Name:   name,
	}

	resp, err := client.CatalogService.CreateDatasetImportByIdv1(datasetid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetImportDataset Create a new dataset.
func CreateDatasetImportDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Form the request body
	generated_request_body := model.ImportDatasetPost{}

	resp, err := client.CatalogService.CreateDataset(model.MakeDatasetPostFromImportDatasetPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetImportv1 Create a new dataset import.
func CreateDatasetImportv1(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var module string
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.DatasetImportedBy{

		Module: module,
		Name:   name,
	}

	resp, err := client.CatalogService.CreateDatasetImportv1(datasetresourcename, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetIndexDataset Create a new dataset.
func CreateDatasetIndexDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var disabled bool
	err = flags.ParseFlag(cmd.Flags(), "disabled", &disabled)
	if err != nil {
		return fmt.Errorf(`error parsing "disabled": ` + err.Error())
	}
	var fields []model.FieldPost
	err = flags.ParseFlag(cmd.Flags(), "fields", &fields)
	if err != nil {
		return fmt.Errorf(`error parsing "fields": ` + err.Error())
	}
	var frozenTimePeriodInSecsDefault int32
	frozenTimePeriodInSecs := &frozenTimePeriodInSecsDefault
	err = flags.ParseFlag(cmd.Flags(), "frozen-time-period-in-secs", &frozenTimePeriodInSecs)
	if err != nil {
		return fmt.Errorf(`error parsing "frozen-time-period-in-secs": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.IndexDatasetKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.IndexDatasetPost{

		Disabled:               disabled,
		Fields:                 fields,
		FrozenTimePeriodInSecs: frozenTimePeriodInSecs,
		Id:                     id,
		Kind:                   kind,
		Module:                 module,
		Name:                   name,
	}

	resp, err := client.CatalogService.CreateDataset(model.MakeDatasetPostFromIndexDatasetPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetJobDataset Create a new dataset.
func CreateDatasetJobDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var collectEventSummaryDefault bool
	collectEventSummary := &collectEventSummaryDefault
	err = flags.ParseFlag(cmd.Flags(), "collect-event-summary", &collectEventSummary)
	if err != nil {
		return fmt.Errorf(`error parsing "collect-event-summary": ` + err.Error())
	}
	var collectFieldSummaryDefault bool
	collectFieldSummary := &collectFieldSummaryDefault
	err = flags.ParseFlag(cmd.Flags(), "collect-field-summary", &collectFieldSummary)
	if err != nil {
		return fmt.Errorf(`error parsing "collect-field-summary": ` + err.Error())
	}
	var collectTimeBucketsDefault bool
	collectTimeBuckets := &collectTimeBucketsDefault
	err = flags.ParseFlag(cmd.Flags(), "collect-time-buckets", &collectTimeBuckets)
	if err != nil {
		return fmt.Errorf(`error parsing "collect-time-buckets": ` + err.Error())
	}
	var completionTime string
	err = flags.ParseFlag(cmd.Flags(), "completion-time", &completionTime)
	if err != nil {
		return fmt.Errorf(`error parsing "completion-time": ` + err.Error())
	}
	var deleteTime string
	err = flags.ParseFlag(cmd.Flags(), "delete-time", &deleteTime)
	if err != nil {
		return fmt.Errorf(`error parsing "delete-time": ` + err.Error())
	}
	var dispatchTime string
	err = flags.ParseFlag(cmd.Flags(), "dispatch-time", &dispatchTime)
	if err != nil {
		return fmt.Errorf(`error parsing "dispatch-time": ` + err.Error())
	}
	var executionTimeDefault float32
	executionTime := &executionTimeDefault
	err = flags.ParseFlag(cmd.Flags(), "execution-time", &executionTime)
	if err != nil {
		return fmt.Errorf(`error parsing "execution-time": ` + err.Error())
	}
	var extractAllFieldsDefault bool
	extractAllFields := &extractAllFieldsDefault
	err = flags.ParseFlag(cmd.Flags(), "extract-all-fields", &extractAllFields)
	if err != nil {
		return fmt.Errorf(`error parsing "extract-all-fields": ` + err.Error())
	}
	var fields []model.FieldPost
	err = flags.ParseFlag(cmd.Flags(), "fields", &fields)
	if err != nil {
		return fmt.Errorf(`error parsing "fields": ` + err.Error())
	}
	var hasSideEffectsDefault bool
	hasSideEffects := &hasSideEffectsDefault
	err = flags.ParseFlag(cmd.Flags(), "has-side-effects", &hasSideEffects)
	if err != nil {
		return fmt.Errorf(`error parsing "has-side-effects": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.JobDatasetKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var maxTimeDefault int32
	maxTime := &maxTimeDefault
	err = flags.ParseFlag(cmd.Flags(), "max-time", &maxTime)
	if err != nil {
		return fmt.Errorf(`error parsing "max-time": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var parameters map[string]interface{}
	err = flags.ParseFlag(cmd.Flags(), "parameters", &parameters)
	if err != nil {
		return fmt.Errorf(`error parsing "parameters": ` + err.Error())
	}
	var parentDefault string
	parent := &parentDefault
	err = flags.ParseFlag(cmd.Flags(), "parent", &parent)
	if err != nil {
		return fmt.Errorf(`error parsing "parent": ` + err.Error())
	}
	var percentCompleteDefault int32
	percentComplete := &percentCompleteDefault
	err = flags.ParseFlag(cmd.Flags(), "percent-complete", &percentComplete)
	if err != nil {
		return fmt.Errorf(`error parsing "percent-complete": ` + err.Error())
	}
	var query string
	err = flags.ParseFlag(cmd.Flags(), "query", &query)
	if err != nil {
		return fmt.Errorf(`error parsing "query": ` + err.Error())
	}
	var resolvedEarliest string
	err = flags.ParseFlag(cmd.Flags(), "resolved-earliest", &resolvedEarliest)
	if err != nil {
		return fmt.Errorf(`error parsing "resolved-earliest": ` + err.Error())
	}
	var resolvedLatest string
	err = flags.ParseFlag(cmd.Flags(), "resolved-latest", &resolvedLatest)
	if err != nil {
		return fmt.Errorf(`error parsing "resolved-latest": ` + err.Error())
	}
	var resultsAvailableDefault int32
	resultsAvailable := &resultsAvailableDefault
	err = flags.ParseFlag(cmd.Flags(), "results-available", &resultsAvailable)
	if err != nil {
		return fmt.Errorf(`error parsing "results-available": ` + err.Error())
	}
	var searchHeadDefault string
	searchHead := &searchHeadDefault
	err = flags.ParseFlag(cmd.Flags(), "search-head", &searchHead)
	if err != nil {
		return fmt.Errorf(`error parsing "search-head": ` + err.Error())
	}
	var sid string
	err = flags.ParseFlag(cmd.Flags(), "sid", &sid)
	if err != nil {
		return fmt.Errorf(`error parsing "sid": ` + err.Error())
	}
	var splDefault string
	spl := &splDefault
	err = flags.ParseFlag(cmd.Flags(), "spl", &spl)
	if err != nil {
		return fmt.Errorf(`error parsing "spl": ` + err.Error())
	}
	var statusDefault string
	status := &statusDefault
	err = flags.ParseFlag(cmd.Flags(), "status", &status)
	if err != nil {
		return fmt.Errorf(`error parsing "status": ` + err.Error())
	}
	var timelineMetadataDefault model.JobDatasetPropertiesTimelineMetadata
	timelineMetadata := &timelineMetadataDefault
	err = flags.ParseFlag(cmd.Flags(), "timeline-metadata", &timelineMetadata)
	if err != nil {
		return fmt.Errorf(`error parsing "timeline-metadata": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.JobDatasetPost{

		CollectEventSummary: collectEventSummary,
		CollectFieldSummary: collectFieldSummary,
		CollectTimeBuckets:  collectTimeBuckets,
		CompletionTime:      completionTime,
		DeleteTime:          deleteTime,
		DispatchTime:        dispatchTime,
		ExecutionTime:       executionTime,
		ExtractAllFields:    extractAllFields,
		Fields:              fields,
		HasSideEffects:      hasSideEffects,
		Id:                  id,
		Kind:                kind,
		MaxTime:             maxTime,
		Module:              module,
		Name:                name,
		Parameters:          parameters,
		Parent:              parent,
		PercentComplete:     percentComplete,
		Query:               query,
		ResolvedEarliest:    resolvedEarliest,
		ResolvedLatest:      resolvedLatest,
		ResultsAvailable:    resultsAvailable,
		SearchHead:          searchHead,
		Sid:                 sid,
		Spl:                 spl,
		Status:              status,
		TimelineMetadata:    timelineMetadata,
	}

	resp, err := client.CatalogService.CreateDataset(model.MakeDatasetPostFromJobDatasetPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetKvCollectionDataset Create a new dataset.
func CreateDatasetKvCollectionDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var fields []model.FieldPost
	err = flags.ParseFlag(cmd.Flags(), "fields", &fields)
	if err != nil {
		return fmt.Errorf(`error parsing "fields": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.KvCollectionDatasetKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.KvCollectionDatasetPost{

		Fields: fields,
		Id:     id,
		Kind:   kind,
		Module: module,
		Name:   name,
	}

	resp, err := client.CatalogService.CreateDataset(model.MakeDatasetPostFromKvCollectionDatasetPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetLookupDataset Create a new dataset.
func CreateDatasetLookupDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var caseSensitiveMatchDefault bool
	caseSensitiveMatch := &caseSensitiveMatchDefault
	err = flags.ParseFlag(cmd.Flags(), "case-sensitive-match", &caseSensitiveMatch)
	if err != nil {
		return fmt.Errorf(`error parsing "case-sensitive-match": ` + err.Error())
	}
	var externalKind model.LookupDatasetExternalKind
	err = flags.ParseFlag(cmd.Flags(), "external-kind", &externalKind)
	if err != nil {
		return fmt.Errorf(`error parsing "external-kind": ` + err.Error())
	}
	var externalName string
	err = flags.ParseFlag(cmd.Flags(), "external-name", &externalName)
	if err != nil {
		return fmt.Errorf(`error parsing "external-name": ` + err.Error())
	}
	var fields []model.FieldPost
	err = flags.ParseFlag(cmd.Flags(), "fields", &fields)
	if err != nil {
		return fmt.Errorf(`error parsing "fields": ` + err.Error())
	}
	var filterDefault string
	filter := &filterDefault
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.LookupDatasetKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.LookupDatasetPost{

		CaseSensitiveMatch: caseSensitiveMatch,
		ExternalKind:       externalKind,
		ExternalName:       externalName,
		Fields:             fields,
		Filter:             filter,
		Id:                 id,
		Kind:               kind,
		Module:             module,
		Name:               name,
	}

	resp, err := client.CatalogService.CreateDataset(model.MakeDatasetPostFromLookupDatasetPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetMetricDataset Create a new dataset.
func CreateDatasetMetricDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var disabled bool
	err = flags.ParseFlag(cmd.Flags(), "disabled", &disabled)
	if err != nil {
		return fmt.Errorf(`error parsing "disabled": ` + err.Error())
	}
	var fields []model.FieldPost
	err = flags.ParseFlag(cmd.Flags(), "fields", &fields)
	if err != nil {
		return fmt.Errorf(`error parsing "fields": ` + err.Error())
	}
	var frozenTimePeriodInSecsDefault int32
	frozenTimePeriodInSecs := &frozenTimePeriodInSecsDefault
	err = flags.ParseFlag(cmd.Flags(), "frozen-time-period-in-secs", &frozenTimePeriodInSecs)
	if err != nil {
		return fmt.Errorf(`error parsing "frozen-time-period-in-secs": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.MetricDatasetKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.MetricDatasetPost{

		Disabled:               disabled,
		Fields:                 fields,
		FrozenTimePeriodInSecs: frozenTimePeriodInSecs,
		Id:                     id,
		Kind:                   kind,
		Module:                 module,
		Name:                   name,
	}

	resp, err := client.CatalogService.CreateDataset(model.MakeDatasetPostFromMetricDatasetPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetViewDataset Create a new dataset.
func CreateDatasetViewDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var fields []model.FieldPost
	err = flags.ParseFlag(cmd.Flags(), "fields", &fields)
	if err != nil {
		return fmt.Errorf(`error parsing "fields": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.ViewDatasetKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var search string
	err = flags.ParseFlag(cmd.Flags(), "search", &search)
	if err != nil {
		return fmt.Errorf(`error parsing "search": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.ViewDatasetPost{

		Fields: fields,
		Id:     id,
		Kind:   kind,
		Module: module,
		Name:   name,
		Search: search,
	}

	resp, err := client.CatalogService.CreateDataset(model.MakeDatasetPostFromViewDatasetPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateFieldForDataset Create a new field on a specific dataset.
func CreateFieldForDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var datatypeDefault model.FieldDataType
	datatype := &datatypeDefault
	err = flags.ParseFlag(cmd.Flags(), "datatype", &datatype)
	if err != nil {
		return fmt.Errorf(`error parsing "datatype": ` + err.Error())
	}
	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var fieldtypeDefault model.FieldType
	fieldtype := &fieldtypeDefault
	err = flags.ParseFlag(cmd.Flags(), "fieldtype", &fieldtype)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldtype": ` + err.Error())
	}
	var indexedDefault bool
	indexed := &indexedDefault
	err = flags.ParseFlag(cmd.Flags(), "indexed", &indexed)
	if err != nil {
		return fmt.Errorf(`error parsing "indexed": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var prevalenceDefault model.FieldPrevalence
	prevalence := &prevalenceDefault
	err = flags.ParseFlag(cmd.Flags(), "prevalence", &prevalence)
	if err != nil {
		return fmt.Errorf(`error parsing "prevalence": ` + err.Error())
	}
	var summaryDefault string
	summary := &summaryDefault
	err = flags.ParseFlag(cmd.Flags(), "summary", &summary)
	if err != nil {
		return fmt.Errorf(`error parsing "summary": ` + err.Error())
	}
	var titleDefault string
	title := &titleDefault
	err = flags.ParseFlag(cmd.Flags(), "title", &title)
	if err != nil {
		return fmt.Errorf(`error parsing "title": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.FieldPost{

		Datatype:    datatype,
		Description: description,
		Fieldtype:   fieldtype,
		Indexed:     indexed,
		Name:        name,
		Prevalence:  prevalence,
		Summary:     summary,
		Title:       title,
	}

	resp, err := client.CatalogService.CreateFieldForDataset(datasetresourcename, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateFieldForDatasetById Add a new field to a dataset.
func CreateFieldForDatasetById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var datatypeDefault model.FieldDataType
	datatype := &datatypeDefault
	err = flags.ParseFlag(cmd.Flags(), "datatype", &datatype)
	if err != nil {
		return fmt.Errorf(`error parsing "datatype": ` + err.Error())
	}
	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var fieldtypeDefault model.FieldType
	fieldtype := &fieldtypeDefault
	err = flags.ParseFlag(cmd.Flags(), "fieldtype", &fieldtype)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldtype": ` + err.Error())
	}
	var indexedDefault bool
	indexed := &indexedDefault
	err = flags.ParseFlag(cmd.Flags(), "indexed", &indexed)
	if err != nil {
		return fmt.Errorf(`error parsing "indexed": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var prevalenceDefault model.FieldPrevalence
	prevalence := &prevalenceDefault
	err = flags.ParseFlag(cmd.Flags(), "prevalence", &prevalence)
	if err != nil {
		return fmt.Errorf(`error parsing "prevalence": ` + err.Error())
	}
	var summaryDefault string
	summary := &summaryDefault
	err = flags.ParseFlag(cmd.Flags(), "summary", &summary)
	if err != nil {
		return fmt.Errorf(`error parsing "summary": ` + err.Error())
	}
	var titleDefault string
	title := &titleDefault
	err = flags.ParseFlag(cmd.Flags(), "title", &title)
	if err != nil {
		return fmt.Errorf(`error parsing "title": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.FieldPost{

		Datatype:    datatype,
		Description: description,
		Fieldtype:   fieldtype,
		Indexed:     indexed,
		Name:        name,
		Prevalence:  prevalence,
		Summary:     summary,
		Title:       title,
	}

	resp, err := client.CatalogService.CreateFieldForDatasetById(datasetid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateRelationship Create a new relationship.
func CreateRelationship(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var fields []model.RelationshipFieldPost
	err = flags.ParseFlag(cmd.Flags(), "fields", &fields)
	if err != nil {
		return fmt.Errorf(`error parsing "fields": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.RelationshipKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var sourceidDefault string
	sourceid := &sourceidDefault
	err = flags.ParseFlag(cmd.Flags(), "sourceid", &sourceid)
	if err != nil {
		return fmt.Errorf(`error parsing "sourceid": ` + err.Error())
	}
	var sourceresourcenameDefault string
	sourceresourcename := &sourceresourcenameDefault
	err = flags.ParseFlag(cmd.Flags(), "sourceresourcename", &sourceresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "sourceresourcename": ` + err.Error())
	}
	var targetidDefault string
	targetid := &targetidDefault
	err = flags.ParseFlag(cmd.Flags(), "targetid", &targetid)
	if err != nil {
		return fmt.Errorf(`error parsing "targetid": ` + err.Error())
	}
	var targetresourcenameDefault string
	targetresourcename := &targetresourcenameDefault
	err = flags.ParseFlag(cmd.Flags(), "targetresourcename", &targetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "targetresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RelationshipPost{

		Fields:             fields,
		Id:                 id,
		Kind:               kind,
		Module:             module,
		Name:               name,
		Sourceid:           sourceid,
		Sourceresourcename: sourceresourcename,
		Targetid:           targetid,
		Targetresourcename: targetresourcename,
		Version:            version,
	}

	resp, err := client.CatalogService.CreateRelationship(generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateRule Create a new rule.
func CreateRule(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actions []model.ActionPost
	err = flags.ParseFlag(cmd.Flags(), "actions", &actions)
	if err != nil {
		return fmt.Errorf(`error parsing "actions": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var match string
	err = flags.ParseFlag(cmd.Flags(), "match", &match)
	if err != nil {
		return fmt.Errorf(`error parsing "match": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RulePost{

		Actions: actions,
		Id:      id,
		Match:   match,
		Module:  module,
		Name:    name,
		Version: version,
	}

	resp, err := client.CatalogService.CreateRule(generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateWorkflow Create a new workflow configuration.
func CreateWorkflow(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var experimentidDefault string
	experimentid := &experimentidDefault
	err = flags.ParseFlag(cmd.Flags(), "experimentid", &experimentid)
	if err != nil {
		return fmt.Errorf(`error parsing "experimentid": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var tasks []model.TaskPost
	err = flags.ParseFlag(cmd.Flags(), "tasks", &tasks)
	if err != nil {
		return fmt.Errorf(`error parsing "tasks": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.WorkflowPost{

		Description:  description,
		Experimentid: experimentid,
		Id:           id,
		Name:         name,
		Tasks:        tasks,
		Version:      version,
	}

	resp, err := client.CatalogService.CreateWorkflow(generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateWorkflowBuild Create a new workflow build.
func CreateWorkflowBuild(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var endedDefault string
	ended := &endedDefault
	err = flags.ParseFlag(cmd.Flags(), "ended", &ended)
	if err != nil {
		return fmt.Errorf(`error parsing "ended": ` + err.Error())
	}
	var evaluationresults []string
	err = flags.ParseFlag(cmd.Flags(), "evaluationresults", &evaluationresults)
	if err != nil {
		return fmt.Errorf(`error parsing "evaluationresults": ` + err.Error())
	}
	var failuremessageDefault string
	failuremessage := &failuremessageDefault
	err = flags.ParseFlag(cmd.Flags(), "failuremessage", &failuremessage)
	if err != nil {
		return fmt.Errorf(`error parsing "failuremessage": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var inputdata []string
	err = flags.ParseFlag(cmd.Flags(), "inputdata", &inputdata)
	if err != nil {
		return fmt.Errorf(`error parsing "inputdata": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var outputdata []string
	err = flags.ParseFlag(cmd.Flags(), "outputdata", &outputdata)
	if err != nil {
		return fmt.Errorf(`error parsing "outputdata": ` + err.Error())
	}
	var randomstateDefault int32
	randomstate := &randomstateDefault
	err = flags.ParseFlag(cmd.Flags(), "randomstate", &randomstate)
	if err != nil {
		return fmt.Errorf(`error parsing "randomstate": ` + err.Error())
	}
	var startedDefault string
	started := &startedDefault
	err = flags.ParseFlag(cmd.Flags(), "started", &started)
	if err != nil {
		return fmt.Errorf(`error parsing "started": ` + err.Error())
	}
	var statusDefault string
	status := &statusDefault
	err = flags.ParseFlag(cmd.Flags(), "status", &status)
	if err != nil {
		return fmt.Errorf(`error parsing "status": ` + err.Error())
	}
	var timeoutsecs int32
	err = flags.ParseFlag(cmd.Flags(), "timeoutsecs", &timeoutsecs)
	if err != nil {
		return fmt.Errorf(`error parsing "timeoutsecs": ` + err.Error())
	}
	var traintestsplitDefault float32
	traintestsplit := &traintestsplitDefault
	err = flags.ParseFlag(cmd.Flags(), "traintestsplit", &traintestsplit)
	if err != nil {
		return fmt.Errorf(`error parsing "traintestsplit": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}
	var workflowidBodyDefault string
	workflowidBody := &workflowidBodyDefault
	err = flags.ParseFlag(cmd.Flags(), "workflowid-body", &workflowidBody)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid-body": ` + err.Error())
	}
	var workflowversionDefault int32
	workflowversion := &workflowversionDefault
	err = flags.ParseFlag(cmd.Flags(), "workflowversion", &workflowversion)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowversion": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.WorkflowBuildPost{

		Description:       description,
		Ended:             ended,
		Evaluationresults: evaluationresults,
		Failuremessage:    failuremessage,
		Id:                id,
		Inputdata:         inputdata,
		Name:              name,
		Outputdata:        outputdata,
		Randomstate:       randomstate,
		Started:           started,
		Status:            status,
		Timeoutsecs:       timeoutsecs,
		Traintestsplit:    traintestsplit,
		Version:           version,
		Workflowid:        workflowidBody,
		Workflowversion:   workflowversion,
	}

	resp, err := client.CatalogService.CreateWorkflowBuild(workflowid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateWorkflowRun Create a new workflow run for the specified workflow build ID.
func CreateWorkflowRun(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var endedDefault string
	ended := &endedDefault
	err = flags.ParseFlag(cmd.Flags(), "ended", &ended)
	if err != nil {
		return fmt.Errorf(`error parsing "ended": ` + err.Error())
	}
	var failuremessageDefault string
	failuremessage := &failuremessageDefault
	err = flags.ParseFlag(cmd.Flags(), "failuremessage", &failuremessage)
	if err != nil {
		return fmt.Errorf(`error parsing "failuremessage": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var inputdata []string
	err = flags.ParseFlag(cmd.Flags(), "inputdata", &inputdata)
	if err != nil {
		return fmt.Errorf(`error parsing "inputdata": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var outputdata []string
	err = flags.ParseFlag(cmd.Flags(), "outputdata", &outputdata)
	if err != nil {
		return fmt.Errorf(`error parsing "outputdata": ` + err.Error())
	}
	var startedDefault string
	started := &startedDefault
	err = flags.ParseFlag(cmd.Flags(), "started", &started)
	if err != nil {
		return fmt.Errorf(`error parsing "started": ` + err.Error())
	}
	var statusDefault string
	status := &statusDefault
	err = flags.ParseFlag(cmd.Flags(), "status", &status)
	if err != nil {
		return fmt.Errorf(`error parsing "status": ` + err.Error())
	}
	var timeoutsecs int32
	err = flags.ParseFlag(cmd.Flags(), "timeoutsecs", &timeoutsecs)
	if err != nil {
		return fmt.Errorf(`error parsing "timeoutsecs": ` + err.Error())
	}
	var workflowbuildid string
	err = flags.ParseFlag(cmd.Flags(), "workflowbuildid", &workflowbuildid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowbuildid": ` + err.Error())
	}
	var workflowbuildidBodyDefault string
	workflowbuildidBody := &workflowbuildidBodyDefault
	err = flags.ParseFlag(cmd.Flags(), "workflowbuildid-body", &workflowbuildidBody)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowbuildid-body": ` + err.Error())
	}
	var workflowbuildversionDefault int32
	workflowbuildversion := &workflowbuildversionDefault
	err = flags.ParseFlag(cmd.Flags(), "workflowbuildversion", &workflowbuildversion)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowbuildversion": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.WorkflowRunPost{

		Description:          description,
		Ended:                ended,
		Failuremessage:       failuremessage,
		Id:                   id,
		Inputdata:            inputdata,
		Name:                 name,
		Outputdata:           outputdata,
		Started:              started,
		Status:               status,
		Timeoutsecs:          timeoutsecs,
		Workflowbuildid:      workflowbuildidBody,
		Workflowbuildversion: workflowbuildversion,
	}

	resp, err := client.CatalogService.CreateWorkflowRun(workflowid, workflowbuildid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// DeleteActionByIdForRule Delete an action on a rule.
func DeleteActionByIdForRule(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}

	err = client.CatalogService.DeleteActionByIdForRule(ruleresourcename, actionid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteActionByIdForRuleById Delete an action that is part of a specific rule.
func DeleteActionByIdForRuleById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}

	err = client.CatalogService.DeleteActionByIdForRuleById(ruleid, actionid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteAnnotationOfDashboardById Delete a specific annotation of a dashboard.
func DeleteAnnotationOfDashboardById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var annotationid string
	err = flags.ParseFlag(cmd.Flags(), "annotationid", &annotationid)
	if err != nil {
		return fmt.Errorf(`error parsing "annotationid": ` + err.Error())
	}
	var dashboardid string
	err = flags.ParseFlag(cmd.Flags(), "dashboardid", &dashboardid)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardid": ` + err.Error())
	}

	err = client.CatalogService.DeleteAnnotationOfDashboardById(dashboardid, annotationid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteAnnotationOfDashboardByResourceName Delete a specific annotation of a dashboard.
func DeleteAnnotationOfDashboardByResourceName(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var annotationid string
	err = flags.ParseFlag(cmd.Flags(), "annotationid", &annotationid)
	if err != nil {
		return fmt.Errorf(`error parsing "annotationid": ` + err.Error())
	}
	var dashboardresourcename string
	err = flags.ParseFlag(cmd.Flags(), "dashboardresourcename", &dashboardresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardresourcename": ` + err.Error())
	}

	err = client.CatalogService.DeleteAnnotationOfDashboardByResourceName(dashboardresourcename, annotationid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteAnnotationOfDatasetById Delete a specific annotation of a dataset.
func DeleteAnnotationOfDatasetById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var annotationid string
	err = flags.ParseFlag(cmd.Flags(), "annotationid", &annotationid)
	if err != nil {
		return fmt.Errorf(`error parsing "annotationid": ` + err.Error())
	}
	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}

	err = client.CatalogService.DeleteAnnotationOfDatasetById(datasetid, annotationid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteAnnotationOfDatasetByResourceName Delete a specific annotation of a dataset.
func DeleteAnnotationOfDatasetByResourceName(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var annotationid string
	err = flags.ParseFlag(cmd.Flags(), "annotationid", &annotationid)
	if err != nil {
		return fmt.Errorf(`error parsing "annotationid": ` + err.Error())
	}
	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}

	err = client.CatalogService.DeleteAnnotationOfDatasetByResourceName(datasetresourcename, annotationid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteDashboardById Delete the dashboard with the specified ID.
func DeleteDashboardById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var dashboardid string
	err = flags.ParseFlag(cmd.Flags(), "dashboardid", &dashboardid)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardid": ` + err.Error())
	}

	err = client.CatalogService.DeleteDashboardById(dashboardid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteDashboardByResourceName Delete the dashboard with the specified resource name.
func DeleteDashboardByResourceName(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var dashboardresourcename string
	err = flags.ParseFlag(cmd.Flags(), "dashboardresourcename", &dashboardresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardresourcename": ` + err.Error())
	}

	err = client.CatalogService.DeleteDashboardByResourceName(dashboardresourcename)
	if err != nil {
		return err
	}

	return nil
}

// DeleteDataset Delete the dataset with the specified resource name, along with its dependencies. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
func DeleteDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}

	err = client.CatalogService.DeleteDataset(datasetresourcename)
	if err != nil {
		return err
	}

	return nil
}

// DeleteDatasetById Delete a specific dataset. Deleting a dataset also deletes its dependent objects, such as fields.
func DeleteDatasetById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}

	err = client.CatalogService.DeleteDatasetById(datasetid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteFieldByIdForDataset Delete a field that is part of a specific dataset.
func DeleteFieldByIdForDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var fieldid string
	err = flags.ParseFlag(cmd.Flags(), "fieldid", &fieldid)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldid": ` + err.Error())
	}

	err = client.CatalogService.DeleteFieldByIdForDataset(datasetresourcename, fieldid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteFieldByIdForDatasetById Delete a field that is part of a specific dataset.
func DeleteFieldByIdForDatasetById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var fieldid string
	err = flags.ParseFlag(cmd.Flags(), "fieldid", &fieldid)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldid": ` + err.Error())
	}

	err = client.CatalogService.DeleteFieldByIdForDatasetById(datasetid, fieldid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteRelationshipById Delete a specific relationship. Deleting a relationship also deleletes any objects that are dependents of that relationship, such as relationship fields.
func DeleteRelationshipById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var relationshipid string
	err = flags.ParseFlag(cmd.Flags(), "relationshipid", &relationshipid)
	if err != nil {
		return fmt.Errorf(`error parsing "relationshipid": ` + err.Error())
	}

	err = client.CatalogService.DeleteRelationshipById(relationshipid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteRule Delete the rule with the specified resource name and its dependencies.
func DeleteRule(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}

	err = client.CatalogService.DeleteRule(ruleresourcename)
	if err != nil {
		return err
	}

	return nil
}

// DeleteRuleById Delete a specific rule. Deleting a rule also deleletes any objects that are dependents of that rule, such as rule actions.
func DeleteRuleById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}

	err = client.CatalogService.DeleteRuleById(ruleid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteWorkflowBuildById Delete the workflow build with the specified workflow build ID.
func DeleteWorkflowBuildById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var workflowbuildid string
	err = flags.ParseFlag(cmd.Flags(), "workflowbuildid", &workflowbuildid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowbuildid": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}

	err = client.CatalogService.DeleteWorkflowBuildById(workflowid, workflowbuildid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteWorkflowById Delete the workflow with the specified workflow ID.
func DeleteWorkflowById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}

	err = client.CatalogService.DeleteWorkflowById(workflowid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteWorkflowRunById Delete the workflow run with the specified workflow run ID.
func DeleteWorkflowRunById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var workflowbuildid string
	err = flags.ParseFlag(cmd.Flags(), "workflowbuildid", &workflowbuildid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowbuildid": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}
	var workflowrunid string
	err = flags.ParseFlag(cmd.Flags(), "workflowrunid", &workflowrunid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowrunid": ` + err.Error())
	}

	err = client.CatalogService.DeleteWorkflowRunById(workflowid, workflowbuildid, workflowrunid)
	if err != nil {
		return err
	}

	return nil
}

// GetActionByIdForRule Return an action that is part of a specified rule.
func GetActionByIdForRule(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}

	resp, err := client.CatalogService.GetActionByIdForRule(ruleresourcename, actionid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetActionByIdForRuleById Return information about an action that is part of a specific rule.
func GetActionByIdForRuleById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}

	resp, err := client.CatalogService.GetActionByIdForRuleById(ruleid, actionid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetDashboardById Return information about a dashboard with the specified ID.
func GetDashboardById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var dashboardid string
	err = flags.ParseFlag(cmd.Flags(), "dashboardid", &dashboardid)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardid": ` + err.Error())
	}

	resp, err := client.CatalogService.GetDashboardById(dashboardid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetDashboardByResourceName Return information about a dashboard with the specified resource name.
func GetDashboardByResourceName(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var dashboardresourcename string
	err = flags.ParseFlag(cmd.Flags(), "dashboardresourcename", &dashboardresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardresourcename": ` + err.Error())
	}

	resp, err := client.CatalogService.GetDashboardByResourceName(dashboardresourcename)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetDataset Return the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
func GetDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var maxstaleDefault int32
	maxstale := &maxstaleDefault
	err = flags.ParseFlag(cmd.Flags(), "maxstale", &maxstale)
	if err != nil {
		return fmt.Errorf(`error parsing "maxstale": ` + err.Error())
	}
	// Form query params
	generated_query := model.GetDatasetQueryParams{}
	generated_query.Maxstale = maxstale

	resp, err := client.CatalogService.GetDataset(datasetresourcename, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetDatasetById Return information about the dataset with the specified ID.
func GetDatasetById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var maxstaleDefault int32
	maxstale := &maxstaleDefault
	err = flags.ParseFlag(cmd.Flags(), "maxstale", &maxstale)
	if err != nil {
		return fmt.Errorf(`error parsing "maxstale": ` + err.Error())
	}
	// Form query params
	generated_query := model.GetDatasetByIdQueryParams{}
	generated_query.Maxstale = maxstale

	resp, err := client.CatalogService.GetDatasetById(datasetid, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetFieldById Get a field that corresponds to a specific field ID.
func GetFieldById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var fieldid string
	err = flags.ParseFlag(cmd.Flags(), "fieldid", &fieldid)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldid": ` + err.Error())
	}

	resp, err := client.CatalogService.GetFieldById(fieldid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetFieldByIdForDataset Return a field that is part of a specific dataset.
func GetFieldByIdForDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var fieldid string
	err = flags.ParseFlag(cmd.Flags(), "fieldid", &fieldid)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldid": ` + err.Error())
	}

	resp, err := client.CatalogService.GetFieldByIdForDataset(datasetresourcename, fieldid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetFieldByIdForDatasetById Return a field that is part of a specific dataset.
func GetFieldByIdForDatasetById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var fieldid string
	err = flags.ParseFlag(cmd.Flags(), "fieldid", &fieldid)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldid": ` + err.Error())
	}

	resp, err := client.CatalogService.GetFieldByIdForDatasetById(datasetid, fieldid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetRelationshipById Get a specific relationship.
func GetRelationshipById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var relationshipid string
	err = flags.ParseFlag(cmd.Flags(), "relationshipid", &relationshipid)
	if err != nil {
		return fmt.Errorf(`error parsing "relationshipid": ` + err.Error())
	}

	resp, err := client.CatalogService.GetRelationshipById(relationshipid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetRule Get a rule with a specified resource name.
func GetRule(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}

	resp, err := client.CatalogService.GetRule(ruleresourcename)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetRuleById Get information about a specific rule.
func GetRuleById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}

	resp, err := client.CatalogService.GetRuleById(ruleid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetWorkflowBuildById Return information about the workflow build with the specified workflow build ID.
func GetWorkflowBuildById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var workflowbuildid string
	err = flags.ParseFlag(cmd.Flags(), "workflowbuildid", &workflowbuildid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowbuildid": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}

	resp, err := client.CatalogService.GetWorkflowBuildById(workflowid, workflowbuildid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetWorkflowById Return information about a workflow with the specified workflow ID.
func GetWorkflowById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}

	resp, err := client.CatalogService.GetWorkflowById(workflowid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetWorkflowRunById Return information about the workflow run with the specified workflow build ID.
func GetWorkflowRunById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var workflowbuildid string
	err = flags.ParseFlag(cmd.Flags(), "workflowbuildid", &workflowbuildid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowbuildid": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}
	var workflowrunid string
	err = flags.ParseFlag(cmd.Flags(), "workflowrunid", &workflowrunid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowrunid": ` + err.Error())
	}

	resp, err := client.CatalogService.GetWorkflowRunById(workflowid, workflowbuildid, workflowrunid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListActionsForRule Return the list of actions that are part of a specified rule.
func ListActionsForRule(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListActionsForRuleQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListActionsForRule(ruleresourcename, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListActionsForRuleById Return the set of actions that are part of a rule.
func ListActionsForRuleById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListActionsForRuleByIdQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListActionsForRuleById(ruleid, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListAnnotations Return the set of annotations across all objects.
func ListAnnotations(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListAnnotationsQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListAnnotations(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListAnnotationsForDashboardById Return the set of annotations that are part of a dashboard.
func ListAnnotationsForDashboardById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var dashboardid string
	err = flags.ParseFlag(cmd.Flags(), "dashboardid", &dashboardid)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardid": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListAnnotationsForDashboardByIdQueryParams{}
	generated_query.Filter = filter

	resp, err := client.CatalogService.ListAnnotationsForDashboardById(dashboardid, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListAnnotationsForDashboardByResourceName Return the set of annotations that are part of a dashboard.
func ListAnnotationsForDashboardByResourceName(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var dashboardresourcename string
	err = flags.ParseFlag(cmd.Flags(), "dashboardresourcename", &dashboardresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardresourcename": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListAnnotationsForDashboardByResourceNameQueryParams{}
	generated_query.Filter = filter

	resp, err := client.CatalogService.ListAnnotationsForDashboardByResourceName(dashboardresourcename, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListAnnotationsForDatasetById Return the set of annotations that are part of a dataset.
func ListAnnotationsForDatasetById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListAnnotationsForDatasetByIdQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListAnnotationsForDatasetById(datasetid, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListAnnotationsForDatasetByResourceName Return the set of annotations that are part of a dataset.
func ListAnnotationsForDatasetByResourceName(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListAnnotationsForDatasetByResourceNameQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListAnnotationsForDatasetByResourceName(datasetresourcename, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListDashboards Return a list of Dashboards.
func ListDashboards(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListDashboardsQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListDashboards(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListDatasets Returns a list of all datasets, unless you specify a filter. Use a filter to return a specific list of datasets.
func ListDatasets(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var maxstaleDefault int32
	maxstale := &maxstaleDefault
	err = flags.ParseFlag(cmd.Flags(), "maxstale", &maxstale)
	if err != nil {
		return fmt.Errorf(`error parsing "maxstale": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListDatasetsQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Maxstale = maxstale
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListDatasets(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListFields Get a list of all fields in the Catalog.
func ListFields(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListFieldsQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListFields(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListFieldsForDataset Return the list of fields that are part of a specified dataset.
func ListFieldsForDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListFieldsForDatasetQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListFieldsForDataset(datasetresourcename, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListFieldsForDatasetById Return the set of fields for the specified dataset.
func ListFieldsForDatasetById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListFieldsForDatasetByIdQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListFieldsForDatasetById(datasetid, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListModules Return a list of all modules, unless you specify a filter. Use a filter to return a specific list of modules.
func ListModules(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListModulesQueryParams{}
	generated_query.Filter = filter

	resp, err := client.CatalogService.ListModules(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListRelationships Returns a list of all relationships, unless you specify a filter. Use a filter to return a specific list of relationships.
func ListRelationships(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListRelationshipsQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListRelationships(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListRules Return a list of rules that match a filter query if it is given, otherwise return all rules.
func ListRules(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListRulesQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListRules(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListWorkflowBuilds Return a list of Machine Learning workflow builds.
func ListWorkflowBuilds(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListWorkflowBuildsQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListWorkflowBuilds(workflowid, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListWorkflowRuns Return a list of Machine Learning workflow runs for specified workflow build ID.
func ListWorkflowRuns(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	var workflowbuildid string
	err = flags.ParseFlag(cmd.Flags(), "workflowbuildid", &workflowbuildid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowbuildid": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListWorkflowRunsQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListWorkflowRuns(workflowid, workflowbuildid, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListWorkflows Return a list of Machine Learning workflow configurations.
func ListWorkflows(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListWorkflowsQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListWorkflows(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleAliasAction Update the Action with the specified id for the specified Rule
func UpdateActionByIdForRuleAliasAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var aliasDefault string
	alias := &aliasDefault
	err = flags.ParseFlag(cmd.Flags(), "alias", &alias)
	if err != nil {
		return fmt.Errorf(`error parsing "alias": ` + err.Error())
	}
	var fieldDefault string
	field := &fieldDefault
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var kindDefault model.AliasActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.AliasActionPatch{

		Alias:   alias,
		Field:   field,
		Kind:    kind,
		Owner:   owner,
		Version: version,
	}

	resp, err := client.CatalogService.UpdateActionByIdForRule(ruleresourcename, actionid, model.MakeActionPatchFromAliasActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleAutoKvAction Update the Action with the specified id for the specified Rule
func UpdateActionByIdForRuleAutoKvAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var kindDefault model.AutoKvActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var modeDefault string
	mode := &modeDefault
	err = flags.ParseFlag(cmd.Flags(), "mode", &mode)
	if err != nil {
		return fmt.Errorf(`error parsing "mode": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.AutoKvActionPatch{

		Kind:    kind,
		Mode:    mode,
		Owner:   owner,
		Version: version,
	}

	resp, err := client.CatalogService.UpdateActionByIdForRule(ruleresourcename, actionid, model.MakeActionPatchFromAutoKvActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleByIdAliasAction Update an action for a specific rule.
func UpdateActionByIdForRuleByIdAliasAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var aliasDefault string
	alias := &aliasDefault
	err = flags.ParseFlag(cmd.Flags(), "alias", &alias)
	if err != nil {
		return fmt.Errorf(`error parsing "alias": ` + err.Error())
	}
	var fieldDefault string
	field := &fieldDefault
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var kindDefault model.AliasActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.AliasActionPatch{

		Alias:   alias,
		Field:   field,
		Kind:    kind,
		Owner:   owner,
		Version: version,
	}

	resp, err := client.CatalogService.UpdateActionByIdForRuleById(ruleid, actionid, model.MakeActionPatchFromAliasActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleByIdAutoKvAction Update an action for a specific rule.
func UpdateActionByIdForRuleByIdAutoKvAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var kindDefault model.AutoKvActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var modeDefault string
	mode := &modeDefault
	err = flags.ParseFlag(cmd.Flags(), "mode", &mode)
	if err != nil {
		return fmt.Errorf(`error parsing "mode": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.AutoKvActionPatch{

		Kind:    kind,
		Mode:    mode,
		Owner:   owner,
		Version: version,
	}

	resp, err := client.CatalogService.UpdateActionByIdForRuleById(ruleid, actionid, model.MakeActionPatchFromAutoKvActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleByIdEvalAction Update an action for a specific rule.
func UpdateActionByIdForRuleByIdEvalAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var expressionDefault string
	expression := &expressionDefault
	err = flags.ParseFlag(cmd.Flags(), "expression", &expression)
	if err != nil {
		return fmt.Errorf(`error parsing "expression": ` + err.Error())
	}
	var fieldDefault string
	field := &fieldDefault
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var kindDefault model.EvalActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.EvalActionPatch{

		Expression: expression,
		Field:      field,
		Kind:       kind,
		Owner:      owner,
		Version:    version,
	}

	resp, err := client.CatalogService.UpdateActionByIdForRuleById(ruleid, actionid, model.MakeActionPatchFromEvalActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleByIdLookupAction Update an action for a specific rule.
func UpdateActionByIdForRuleByIdLookupAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var expressionDefault string
	expression := &expressionDefault
	err = flags.ParseFlag(cmd.Flags(), "expression", &expression)
	if err != nil {
		return fmt.Errorf(`error parsing "expression": ` + err.Error())
	}
	var kindDefault model.LookupActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.LookupActionPatch{

		Expression: expression,
		Kind:       kind,
		Owner:      owner,
		Version:    version,
	}

	resp, err := client.CatalogService.UpdateActionByIdForRuleById(ruleid, actionid, model.MakeActionPatchFromLookupActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleByIdRegexAction Update an action for a specific rule.
func UpdateActionByIdForRuleByIdRegexAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var fieldDefault string
	field := &fieldDefault
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var kindDefault model.RegexActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var limitDefault int32
	limit := &limitDefault
	err = flags.ParseFlag(cmd.Flags(), "limit", &limit)
	if err != nil {
		return fmt.Errorf(`error parsing "limit": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var patternDefault string
	pattern := &patternDefault
	err = flags.ParseFlag(cmd.Flags(), "pattern", &pattern)
	if err != nil {
		return fmt.Errorf(`error parsing "pattern": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RegexActionPatch{

		Field:   field,
		Kind:    kind,
		Limit:   limit,
		Owner:   owner,
		Pattern: pattern,
		Version: version,
	}

	resp, err := client.CatalogService.UpdateActionByIdForRuleById(ruleid, actionid, model.MakeActionPatchFromRegexActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleEvalAction Update the Action with the specified id for the specified Rule
func UpdateActionByIdForRuleEvalAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var expressionDefault string
	expression := &expressionDefault
	err = flags.ParseFlag(cmd.Flags(), "expression", &expression)
	if err != nil {
		return fmt.Errorf(`error parsing "expression": ` + err.Error())
	}
	var fieldDefault string
	field := &fieldDefault
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var kindDefault model.EvalActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.EvalActionPatch{

		Expression: expression,
		Field:      field,
		Kind:       kind,
		Owner:      owner,
		Version:    version,
	}

	resp, err := client.CatalogService.UpdateActionByIdForRule(ruleresourcename, actionid, model.MakeActionPatchFromEvalActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleLookupAction Update the Action with the specified id for the specified Rule
func UpdateActionByIdForRuleLookupAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var expressionDefault string
	expression := &expressionDefault
	err = flags.ParseFlag(cmd.Flags(), "expression", &expression)
	if err != nil {
		return fmt.Errorf(`error parsing "expression": ` + err.Error())
	}
	var kindDefault model.LookupActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.LookupActionPatch{

		Expression: expression,
		Kind:       kind,
		Owner:      owner,
		Version:    version,
	}

	resp, err := client.CatalogService.UpdateActionByIdForRule(ruleresourcename, actionid, model.MakeActionPatchFromLookupActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleRegexAction Update the Action with the specified id for the specified Rule
func UpdateActionByIdForRuleRegexAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var fieldDefault string
	field := &fieldDefault
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var kindDefault model.RegexActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var limitDefault int32
	limit := &limitDefault
	err = flags.ParseFlag(cmd.Flags(), "limit", &limit)
	if err != nil {
		return fmt.Errorf(`error parsing "limit": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var patternDefault string
	pattern := &patternDefault
	err = flags.ParseFlag(cmd.Flags(), "pattern", &pattern)
	if err != nil {
		return fmt.Errorf(`error parsing "pattern": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RegexActionPatch{

		Field:   field,
		Kind:    kind,
		Limit:   limit,
		Owner:   owner,
		Pattern: pattern,
		Version: version,
	}

	resp, err := client.CatalogService.UpdateActionByIdForRule(ruleresourcename, actionid, model.MakeActionPatchFromRegexActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDashboardById Update the dashboard with the specified ID.
func UpdateDashboardById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var dashboardid string
	err = flags.ParseFlag(cmd.Flags(), "dashboardid", &dashboardid)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardid": ` + err.Error())
	}
	var definitionDefault string
	definition := &definitionDefault
	err = flags.ParseFlag(cmd.Flags(), "definition", &definition)
	if err != nil {
		return fmt.Errorf(`error parsing "definition": ` + err.Error())
	}
	var isactiveDefault bool
	isactive := &isactiveDefault
	err = flags.ParseFlag(cmd.Flags(), "isactive", &isactive)
	if err != nil {
		return fmt.Errorf(`error parsing "isactive": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.DashboardPatch{

		Definition: definition,
		Isactive:   isactive,
		Module:     module,
		Name:       name,
		Version:    version,
	}

	resp, err := client.CatalogService.UpdateDashboardById(dashboardid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDashboardByResourceName Update the dashboard with the specified resource name.
func UpdateDashboardByResourceName(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var dashboardresourcename string
	err = flags.ParseFlag(cmd.Flags(), "dashboardresourcename", &dashboardresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardresourcename": ` + err.Error())
	}
	var definitionDefault string
	definition := &definitionDefault
	err = flags.ParseFlag(cmd.Flags(), "definition", &definition)
	if err != nil {
		return fmt.Errorf(`error parsing "definition": ` + err.Error())
	}
	var isactiveDefault bool
	isactive := &isactiveDefault
	err = flags.ParseFlag(cmd.Flags(), "isactive", &isactive)
	if err != nil {
		return fmt.Errorf(`error parsing "isactive": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.DashboardPatch{

		Definition: definition,
		Isactive:   isactive,
		Module:     module,
		Name:       name,
		Version:    version,
	}

	err = client.CatalogService.UpdateDashboardByResourceName(dashboardresourcename, generated_request_body)
	if err != nil {
		return err
	}

	return nil
}

// UpdateDatasetByIdImportDataset Update a specific dataset.
func UpdateDatasetByIdImportDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.ImportDatasetPatch{

		Module: module,
		Name:   name,
		Owner:  owner,
	}

	resp, err := client.CatalogService.UpdateDatasetById(datasetid, model.MakeDatasetPatchFromImportDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetByIdIndexDataset Update a specific dataset.
func UpdateDatasetByIdIndexDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var disabledDefault bool
	disabled := &disabledDefault
	err = flags.ParseFlag(cmd.Flags(), "disabled", &disabled)
	if err != nil {
		return fmt.Errorf(`error parsing "disabled": ` + err.Error())
	}
	var frozenTimePeriodInSecsDefault int32
	frozenTimePeriodInSecs := &frozenTimePeriodInSecsDefault
	err = flags.ParseFlag(cmd.Flags(), "frozen-time-period-in-secs", &frozenTimePeriodInSecs)
	if err != nil {
		return fmt.Errorf(`error parsing "frozen-time-period-in-secs": ` + err.Error())
	}
	var kindDefault model.IndexDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.IndexDatasetPatch{

		Disabled:               disabled,
		FrozenTimePeriodInSecs: frozenTimePeriodInSecs,
		Kind:                   kind,
		Module:                 module,
		Name:                   name,
		Owner:                  owner,
	}

	resp, err := client.CatalogService.UpdateDatasetById(datasetid, model.MakeDatasetPatchFromIndexDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetByIdJobDataset Update a specific dataset.
func UpdateDatasetByIdJobDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var collectEventSummaryDefault bool
	collectEventSummary := &collectEventSummaryDefault
	err = flags.ParseFlag(cmd.Flags(), "collect-event-summary", &collectEventSummary)
	if err != nil {
		return fmt.Errorf(`error parsing "collect-event-summary": ` + err.Error())
	}
	var collectFieldSummaryDefault bool
	collectFieldSummary := &collectFieldSummaryDefault
	err = flags.ParseFlag(cmd.Flags(), "collect-field-summary", &collectFieldSummary)
	if err != nil {
		return fmt.Errorf(`error parsing "collect-field-summary": ` + err.Error())
	}
	var collectTimeBucketsDefault bool
	collectTimeBuckets := &collectTimeBucketsDefault
	err = flags.ParseFlag(cmd.Flags(), "collect-time-buckets", &collectTimeBuckets)
	if err != nil {
		return fmt.Errorf(`error parsing "collect-time-buckets": ` + err.Error())
	}
	var completionTimeDefault string
	completionTime := &completionTimeDefault
	err = flags.ParseFlag(cmd.Flags(), "completion-time", &completionTime)
	if err != nil {
		return fmt.Errorf(`error parsing "completion-time": ` + err.Error())
	}
	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var deleteTimeDefault string
	deleteTime := &deleteTimeDefault
	err = flags.ParseFlag(cmd.Flags(), "delete-time", &deleteTime)
	if err != nil {
		return fmt.Errorf(`error parsing "delete-time": ` + err.Error())
	}
	var dispatchTimeDefault string
	dispatchTime := &dispatchTimeDefault
	err = flags.ParseFlag(cmd.Flags(), "dispatch-time", &dispatchTime)
	if err != nil {
		return fmt.Errorf(`error parsing "dispatch-time": ` + err.Error())
	}
	var executionTimeDefault float32
	executionTime := &executionTimeDefault
	err = flags.ParseFlag(cmd.Flags(), "execution-time", &executionTime)
	if err != nil {
		return fmt.Errorf(`error parsing "execution-time": ` + err.Error())
	}
	var extractAllFieldsDefault bool
	extractAllFields := &extractAllFieldsDefault
	err = flags.ParseFlag(cmd.Flags(), "extract-all-fields", &extractAllFields)
	if err != nil {
		return fmt.Errorf(`error parsing "extract-all-fields": ` + err.Error())
	}
	var hasSideEffectsDefault bool
	hasSideEffects := &hasSideEffectsDefault
	err = flags.ParseFlag(cmd.Flags(), "has-side-effects", &hasSideEffects)
	if err != nil {
		return fmt.Errorf(`error parsing "has-side-effects": ` + err.Error())
	}
	var kindDefault model.JobDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var maxTimeDefault int32
	maxTime := &maxTimeDefault
	err = flags.ParseFlag(cmd.Flags(), "max-time", &maxTime)
	if err != nil {
		return fmt.Errorf(`error parsing "max-time": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var parameters map[string]interface{}
	err = flags.ParseFlag(cmd.Flags(), "parameters", &parameters)
	if err != nil {
		return fmt.Errorf(`error parsing "parameters": ` + err.Error())
	}
	var parentDefault string
	parent := &parentDefault
	err = flags.ParseFlag(cmd.Flags(), "parent", &parent)
	if err != nil {
		return fmt.Errorf(`error parsing "parent": ` + err.Error())
	}
	var percentCompleteDefault int32
	percentComplete := &percentCompleteDefault
	err = flags.ParseFlag(cmd.Flags(), "percent-complete", &percentComplete)
	if err != nil {
		return fmt.Errorf(`error parsing "percent-complete": ` + err.Error())
	}
	var queryDefault string
	query := &queryDefault
	err = flags.ParseFlag(cmd.Flags(), "query", &query)
	if err != nil {
		return fmt.Errorf(`error parsing "query": ` + err.Error())
	}
	var resolvedEarliestDefault string
	resolvedEarliest := &resolvedEarliestDefault
	err = flags.ParseFlag(cmd.Flags(), "resolved-earliest", &resolvedEarliest)
	if err != nil {
		return fmt.Errorf(`error parsing "resolved-earliest": ` + err.Error())
	}
	var resolvedLatestDefault string
	resolvedLatest := &resolvedLatestDefault
	err = flags.ParseFlag(cmd.Flags(), "resolved-latest", &resolvedLatest)
	if err != nil {
		return fmt.Errorf(`error parsing "resolved-latest": ` + err.Error())
	}
	var resultsAvailableDefault int32
	resultsAvailable := &resultsAvailableDefault
	err = flags.ParseFlag(cmd.Flags(), "results-available", &resultsAvailable)
	if err != nil {
		return fmt.Errorf(`error parsing "results-available": ` + err.Error())
	}
	var searchHeadDefault string
	searchHead := &searchHeadDefault
	err = flags.ParseFlag(cmd.Flags(), "search-head", &searchHead)
	if err != nil {
		return fmt.Errorf(`error parsing "search-head": ` + err.Error())
	}
	var sidDefault string
	sid := &sidDefault
	err = flags.ParseFlag(cmd.Flags(), "sid", &sid)
	if err != nil {
		return fmt.Errorf(`error parsing "sid": ` + err.Error())
	}
	var splDefault string
	spl := &splDefault
	err = flags.ParseFlag(cmd.Flags(), "spl", &spl)
	if err != nil {
		return fmt.Errorf(`error parsing "spl": ` + err.Error())
	}
	var statusDefault string
	status := &statusDefault
	err = flags.ParseFlag(cmd.Flags(), "status", &status)
	if err != nil {
		return fmt.Errorf(`error parsing "status": ` + err.Error())
	}
	var timelineMetadataDefault model.JobDatasetPropertiesTimelineMetadata
	timelineMetadata := &timelineMetadataDefault
	err = flags.ParseFlag(cmd.Flags(), "timeline-metadata", &timelineMetadata)
	if err != nil {
		return fmt.Errorf(`error parsing "timeline-metadata": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.JobDatasetPatch{

		CollectEventSummary: collectEventSummary,
		CollectFieldSummary: collectFieldSummary,
		CollectTimeBuckets:  collectTimeBuckets,
		CompletionTime:      completionTime,
		DeleteTime:          deleteTime,
		DispatchTime:        dispatchTime,
		ExecutionTime:       executionTime,
		ExtractAllFields:    extractAllFields,
		HasSideEffects:      hasSideEffects,
		Kind:                kind,
		MaxTime:             maxTime,
		Module:              module,
		Name:                name,
		Owner:               owner,
		Parameters:          parameters,
		Parent:              parent,
		PercentComplete:     percentComplete,
		Query:               query,
		ResolvedEarliest:    resolvedEarliest,
		ResolvedLatest:      resolvedLatest,
		ResultsAvailable:    resultsAvailable,
		SearchHead:          searchHead,
		Sid:                 sid,
		Spl:                 spl,
		Status:              status,
		TimelineMetadata:    timelineMetadata,
	}

	resp, err := client.CatalogService.UpdateDatasetById(datasetid, model.MakeDatasetPatchFromJobDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetByIdKvCollectionDataset Update a specific dataset.
func UpdateDatasetByIdKvCollectionDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var kindDefault model.KvCollectionDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.KvCollectionDatasetPatch{

		Kind:   kind,
		Module: module,
		Name:   name,
		Owner:  owner,
	}

	resp, err := client.CatalogService.UpdateDatasetById(datasetid, model.MakeDatasetPatchFromKvCollectionDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetByIdLookupDataset Update a specific dataset.
func UpdateDatasetByIdLookupDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var caseSensitiveMatchDefault bool
	caseSensitiveMatch := &caseSensitiveMatchDefault
	err = flags.ParseFlag(cmd.Flags(), "case-sensitive-match", &caseSensitiveMatch)
	if err != nil {
		return fmt.Errorf(`error parsing "case-sensitive-match": ` + err.Error())
	}
	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var externalKindDefault model.LookupDatasetExternalKind
	externalKind := &externalKindDefault
	err = flags.ParseFlag(cmd.Flags(), "external-kind", &externalKind)
	if err != nil {
		return fmt.Errorf(`error parsing "external-kind": ` + err.Error())
	}
	var externalNameDefault string
	externalName := &externalNameDefault
	err = flags.ParseFlag(cmd.Flags(), "external-name", &externalName)
	if err != nil {
		return fmt.Errorf(`error parsing "external-name": ` + err.Error())
	}
	var filterDefault string
	filter := &filterDefault
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var kindDefault model.LookupDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.LookupDatasetPatch{

		CaseSensitiveMatch: caseSensitiveMatch,
		ExternalKind:       externalKind,
		ExternalName:       externalName,
		Filter:             filter,
		Kind:               kind,
		Module:             module,
		Name:               name,
		Owner:              owner,
	}

	resp, err := client.CatalogService.UpdateDatasetById(datasetid, model.MakeDatasetPatchFromLookupDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetByIdMetricDataset Update a specific dataset.
func UpdateDatasetByIdMetricDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var disabledDefault bool
	disabled := &disabledDefault
	err = flags.ParseFlag(cmd.Flags(), "disabled", &disabled)
	if err != nil {
		return fmt.Errorf(`error parsing "disabled": ` + err.Error())
	}
	var frozenTimePeriodInSecsDefault int32
	frozenTimePeriodInSecs := &frozenTimePeriodInSecsDefault
	err = flags.ParseFlag(cmd.Flags(), "frozen-time-period-in-secs", &frozenTimePeriodInSecs)
	if err != nil {
		return fmt.Errorf(`error parsing "frozen-time-period-in-secs": ` + err.Error())
	}
	var kindDefault model.MetricDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.MetricDatasetPatch{

		Disabled:               disabled,
		FrozenTimePeriodInSecs: frozenTimePeriodInSecs,
		Kind:                   kind,
		Module:                 module,
		Name:                   name,
		Owner:                  owner,
	}

	resp, err := client.CatalogService.UpdateDatasetById(datasetid, model.MakeDatasetPatchFromMetricDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetByIdViewDataset Update a specific dataset.
func UpdateDatasetByIdViewDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var kindDefault model.ViewDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var searchDefault string
	search := &searchDefault
	err = flags.ParseFlag(cmd.Flags(), "search", &search)
	if err != nil {
		return fmt.Errorf(`error parsing "search": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.ViewDatasetPatch{

		Kind:   kind,
		Module: module,
		Name:   name,
		Owner:  owner,
		Search: search,
	}

	resp, err := client.CatalogService.UpdateDatasetById(datasetid, model.MakeDatasetPatchFromViewDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetImportDataset Update the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
func UpdateDatasetImportDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.ImportDatasetPatch{

		Module: module,
		Name:   name,
		Owner:  owner,
	}

	resp, err := client.CatalogService.UpdateDataset(datasetresourcename, model.MakeDatasetPatchFromImportDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetIndexDataset Update the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
func UpdateDatasetIndexDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var disabledDefault bool
	disabled := &disabledDefault
	err = flags.ParseFlag(cmd.Flags(), "disabled", &disabled)
	if err != nil {
		return fmt.Errorf(`error parsing "disabled": ` + err.Error())
	}
	var frozenTimePeriodInSecsDefault int32
	frozenTimePeriodInSecs := &frozenTimePeriodInSecsDefault
	err = flags.ParseFlag(cmd.Flags(), "frozen-time-period-in-secs", &frozenTimePeriodInSecs)
	if err != nil {
		return fmt.Errorf(`error parsing "frozen-time-period-in-secs": ` + err.Error())
	}
	var kindDefault model.IndexDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.IndexDatasetPatch{

		Disabled:               disabled,
		FrozenTimePeriodInSecs: frozenTimePeriodInSecs,
		Kind:                   kind,
		Module:                 module,
		Name:                   name,
		Owner:                  owner,
	}

	resp, err := client.CatalogService.UpdateDataset(datasetresourcename, model.MakeDatasetPatchFromIndexDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetJobDataset Update the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
func UpdateDatasetJobDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var collectEventSummaryDefault bool
	collectEventSummary := &collectEventSummaryDefault
	err = flags.ParseFlag(cmd.Flags(), "collect-event-summary", &collectEventSummary)
	if err != nil {
		return fmt.Errorf(`error parsing "collect-event-summary": ` + err.Error())
	}
	var collectFieldSummaryDefault bool
	collectFieldSummary := &collectFieldSummaryDefault
	err = flags.ParseFlag(cmd.Flags(), "collect-field-summary", &collectFieldSummary)
	if err != nil {
		return fmt.Errorf(`error parsing "collect-field-summary": ` + err.Error())
	}
	var collectTimeBucketsDefault bool
	collectTimeBuckets := &collectTimeBucketsDefault
	err = flags.ParseFlag(cmd.Flags(), "collect-time-buckets", &collectTimeBuckets)
	if err != nil {
		return fmt.Errorf(`error parsing "collect-time-buckets": ` + err.Error())
	}
	var completionTimeDefault string
	completionTime := &completionTimeDefault
	err = flags.ParseFlag(cmd.Flags(), "completion-time", &completionTime)
	if err != nil {
		return fmt.Errorf(`error parsing "completion-time": ` + err.Error())
	}
	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var deleteTimeDefault string
	deleteTime := &deleteTimeDefault
	err = flags.ParseFlag(cmd.Flags(), "delete-time", &deleteTime)
	if err != nil {
		return fmt.Errorf(`error parsing "delete-time": ` + err.Error())
	}
	var dispatchTimeDefault string
	dispatchTime := &dispatchTimeDefault
	err = flags.ParseFlag(cmd.Flags(), "dispatch-time", &dispatchTime)
	if err != nil {
		return fmt.Errorf(`error parsing "dispatch-time": ` + err.Error())
	}
	var executionTimeDefault float32
	executionTime := &executionTimeDefault
	err = flags.ParseFlag(cmd.Flags(), "execution-time", &executionTime)
	if err != nil {
		return fmt.Errorf(`error parsing "execution-time": ` + err.Error())
	}
	var extractAllFieldsDefault bool
	extractAllFields := &extractAllFieldsDefault
	err = flags.ParseFlag(cmd.Flags(), "extract-all-fields", &extractAllFields)
	if err != nil {
		return fmt.Errorf(`error parsing "extract-all-fields": ` + err.Error())
	}
	var hasSideEffectsDefault bool
	hasSideEffects := &hasSideEffectsDefault
	err = flags.ParseFlag(cmd.Flags(), "has-side-effects", &hasSideEffects)
	if err != nil {
		return fmt.Errorf(`error parsing "has-side-effects": ` + err.Error())
	}
	var kindDefault model.JobDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var maxTimeDefault int32
	maxTime := &maxTimeDefault
	err = flags.ParseFlag(cmd.Flags(), "max-time", &maxTime)
	if err != nil {
		return fmt.Errorf(`error parsing "max-time": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var parameters map[string]interface{}
	err = flags.ParseFlag(cmd.Flags(), "parameters", &parameters)
	if err != nil {
		return fmt.Errorf(`error parsing "parameters": ` + err.Error())
	}
	var parentDefault string
	parent := &parentDefault
	err = flags.ParseFlag(cmd.Flags(), "parent", &parent)
	if err != nil {
		return fmt.Errorf(`error parsing "parent": ` + err.Error())
	}
	var percentCompleteDefault int32
	percentComplete := &percentCompleteDefault
	err = flags.ParseFlag(cmd.Flags(), "percent-complete", &percentComplete)
	if err != nil {
		return fmt.Errorf(`error parsing "percent-complete": ` + err.Error())
	}
	var queryDefault string
	query := &queryDefault
	err = flags.ParseFlag(cmd.Flags(), "query", &query)
	if err != nil {
		return fmt.Errorf(`error parsing "query": ` + err.Error())
	}
	var resolvedEarliestDefault string
	resolvedEarliest := &resolvedEarliestDefault
	err = flags.ParseFlag(cmd.Flags(), "resolved-earliest", &resolvedEarliest)
	if err != nil {
		return fmt.Errorf(`error parsing "resolved-earliest": ` + err.Error())
	}
	var resolvedLatestDefault string
	resolvedLatest := &resolvedLatestDefault
	err = flags.ParseFlag(cmd.Flags(), "resolved-latest", &resolvedLatest)
	if err != nil {
		return fmt.Errorf(`error parsing "resolved-latest": ` + err.Error())
	}
	var resultsAvailableDefault int32
	resultsAvailable := &resultsAvailableDefault
	err = flags.ParseFlag(cmd.Flags(), "results-available", &resultsAvailable)
	if err != nil {
		return fmt.Errorf(`error parsing "results-available": ` + err.Error())
	}
	var searchHeadDefault string
	searchHead := &searchHeadDefault
	err = flags.ParseFlag(cmd.Flags(), "search-head", &searchHead)
	if err != nil {
		return fmt.Errorf(`error parsing "search-head": ` + err.Error())
	}
	var sidDefault string
	sid := &sidDefault
	err = flags.ParseFlag(cmd.Flags(), "sid", &sid)
	if err != nil {
		return fmt.Errorf(`error parsing "sid": ` + err.Error())
	}
	var splDefault string
	spl := &splDefault
	err = flags.ParseFlag(cmd.Flags(), "spl", &spl)
	if err != nil {
		return fmt.Errorf(`error parsing "spl": ` + err.Error())
	}
	var statusDefault string
	status := &statusDefault
	err = flags.ParseFlag(cmd.Flags(), "status", &status)
	if err != nil {
		return fmt.Errorf(`error parsing "status": ` + err.Error())
	}
	var timelineMetadataDefault model.JobDatasetPropertiesTimelineMetadata
	timelineMetadata := &timelineMetadataDefault
	err = flags.ParseFlag(cmd.Flags(), "timeline-metadata", &timelineMetadata)
	if err != nil {
		return fmt.Errorf(`error parsing "timeline-metadata": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.JobDatasetPatch{

		CollectEventSummary: collectEventSummary,
		CollectFieldSummary: collectFieldSummary,
		CollectTimeBuckets:  collectTimeBuckets,
		CompletionTime:      completionTime,
		DeleteTime:          deleteTime,
		DispatchTime:        dispatchTime,
		ExecutionTime:       executionTime,
		ExtractAllFields:    extractAllFields,
		HasSideEffects:      hasSideEffects,
		Kind:                kind,
		MaxTime:             maxTime,
		Module:              module,
		Name:                name,
		Owner:               owner,
		Parameters:          parameters,
		Parent:              parent,
		PercentComplete:     percentComplete,
		Query:               query,
		ResolvedEarliest:    resolvedEarliest,
		ResolvedLatest:      resolvedLatest,
		ResultsAvailable:    resultsAvailable,
		SearchHead:          searchHead,
		Sid:                 sid,
		Spl:                 spl,
		Status:              status,
		TimelineMetadata:    timelineMetadata,
	}

	resp, err := client.CatalogService.UpdateDataset(datasetresourcename, model.MakeDatasetPatchFromJobDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetKvCollectionDataset Update the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
func UpdateDatasetKvCollectionDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var kindDefault model.KvCollectionDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.KvCollectionDatasetPatch{

		Kind:   kind,
		Module: module,
		Name:   name,
		Owner:  owner,
	}

	resp, err := client.CatalogService.UpdateDataset(datasetresourcename, model.MakeDatasetPatchFromKvCollectionDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetLookupDataset Update the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
func UpdateDatasetLookupDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var caseSensitiveMatchDefault bool
	caseSensitiveMatch := &caseSensitiveMatchDefault
	err = flags.ParseFlag(cmd.Flags(), "case-sensitive-match", &caseSensitiveMatch)
	if err != nil {
		return fmt.Errorf(`error parsing "case-sensitive-match": ` + err.Error())
	}
	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var externalKindDefault model.LookupDatasetExternalKind
	externalKind := &externalKindDefault
	err = flags.ParseFlag(cmd.Flags(), "external-kind", &externalKind)
	if err != nil {
		return fmt.Errorf(`error parsing "external-kind": ` + err.Error())
	}
	var externalNameDefault string
	externalName := &externalNameDefault
	err = flags.ParseFlag(cmd.Flags(), "external-name", &externalName)
	if err != nil {
		return fmt.Errorf(`error parsing "external-name": ` + err.Error())
	}
	var filterDefault string
	filter := &filterDefault
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var kindDefault model.LookupDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.LookupDatasetPatch{

		CaseSensitiveMatch: caseSensitiveMatch,
		ExternalKind:       externalKind,
		ExternalName:       externalName,
		Filter:             filter,
		Kind:               kind,
		Module:             module,
		Name:               name,
		Owner:              owner,
	}

	resp, err := client.CatalogService.UpdateDataset(datasetresourcename, model.MakeDatasetPatchFromLookupDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetMetricDataset Update the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
func UpdateDatasetMetricDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var disabledDefault bool
	disabled := &disabledDefault
	err = flags.ParseFlag(cmd.Flags(), "disabled", &disabled)
	if err != nil {
		return fmt.Errorf(`error parsing "disabled": ` + err.Error())
	}
	var frozenTimePeriodInSecsDefault int32
	frozenTimePeriodInSecs := &frozenTimePeriodInSecsDefault
	err = flags.ParseFlag(cmd.Flags(), "frozen-time-period-in-secs", &frozenTimePeriodInSecs)
	if err != nil {
		return fmt.Errorf(`error parsing "frozen-time-period-in-secs": ` + err.Error())
	}
	var kindDefault model.MetricDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.MetricDatasetPatch{

		Disabled:               disabled,
		FrozenTimePeriodInSecs: frozenTimePeriodInSecs,
		Kind:                   kind,
		Module:                 module,
		Name:                   name,
		Owner:                  owner,
	}

	resp, err := client.CatalogService.UpdateDataset(datasetresourcename, model.MakeDatasetPatchFromMetricDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetViewDataset Update the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
func UpdateDatasetViewDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var kindDefault model.ViewDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var searchDefault string
	search := &searchDefault
	err = flags.ParseFlag(cmd.Flags(), "search", &search)
	if err != nil {
		return fmt.Errorf(`error parsing "search": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.ViewDatasetPatch{

		Kind:   kind,
		Module: module,
		Name:   name,
		Owner:  owner,
		Search: search,
	}

	resp, err := client.CatalogService.UpdateDataset(datasetresourcename, model.MakeDatasetPatchFromViewDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateFieldByIdForDataset Update a field with a specified ID for a specified dataset.
func UpdateFieldByIdForDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var datatypeDefault model.FieldDataType
	datatype := &datatypeDefault
	err = flags.ParseFlag(cmd.Flags(), "datatype", &datatype)
	if err != nil {
		return fmt.Errorf(`error parsing "datatype": ` + err.Error())
	}
	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var fieldid string
	err = flags.ParseFlag(cmd.Flags(), "fieldid", &fieldid)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldid": ` + err.Error())
	}
	var fieldtypeDefault model.FieldType
	fieldtype := &fieldtypeDefault
	err = flags.ParseFlag(cmd.Flags(), "fieldtype", &fieldtype)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldtype": ` + err.Error())
	}
	var indexedDefault bool
	indexed := &indexedDefault
	err = flags.ParseFlag(cmd.Flags(), "indexed", &indexed)
	if err != nil {
		return fmt.Errorf(`error parsing "indexed": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var prevalenceDefault model.FieldPrevalence
	prevalence := &prevalenceDefault
	err = flags.ParseFlag(cmd.Flags(), "prevalence", &prevalence)
	if err != nil {
		return fmt.Errorf(`error parsing "prevalence": ` + err.Error())
	}
	var summaryDefault string
	summary := &summaryDefault
	err = flags.ParseFlag(cmd.Flags(), "summary", &summary)
	if err != nil {
		return fmt.Errorf(`error parsing "summary": ` + err.Error())
	}
	var titleDefault string
	title := &titleDefault
	err = flags.ParseFlag(cmd.Flags(), "title", &title)
	if err != nil {
		return fmt.Errorf(`error parsing "title": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.FieldPatch{

		Datatype:    datatype,
		Description: description,
		Fieldtype:   fieldtype,
		Indexed:     indexed,
		Name:        name,
		Prevalence:  prevalence,
		Summary:     summary,
		Title:       title,
	}

	resp, err := client.CatalogService.UpdateFieldByIdForDataset(datasetresourcename, fieldid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateFieldByIdForDatasetById Update a field for a specific dataset.
func UpdateFieldByIdForDatasetById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var datatypeDefault model.FieldDataType
	datatype := &datatypeDefault
	err = flags.ParseFlag(cmd.Flags(), "datatype", &datatype)
	if err != nil {
		return fmt.Errorf(`error parsing "datatype": ` + err.Error())
	}
	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var fieldid string
	err = flags.ParseFlag(cmd.Flags(), "fieldid", &fieldid)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldid": ` + err.Error())
	}
	var fieldtypeDefault model.FieldType
	fieldtype := &fieldtypeDefault
	err = flags.ParseFlag(cmd.Flags(), "fieldtype", &fieldtype)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldtype": ` + err.Error())
	}
	var indexedDefault bool
	indexed := &indexedDefault
	err = flags.ParseFlag(cmd.Flags(), "indexed", &indexed)
	if err != nil {
		return fmt.Errorf(`error parsing "indexed": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var prevalenceDefault model.FieldPrevalence
	prevalence := &prevalenceDefault
	err = flags.ParseFlag(cmd.Flags(), "prevalence", &prevalence)
	if err != nil {
		return fmt.Errorf(`error parsing "prevalence": ` + err.Error())
	}
	var summaryDefault string
	summary := &summaryDefault
	err = flags.ParseFlag(cmd.Flags(), "summary", &summary)
	if err != nil {
		return fmt.Errorf(`error parsing "summary": ` + err.Error())
	}
	var titleDefault string
	title := &titleDefault
	err = flags.ParseFlag(cmd.Flags(), "title", &title)
	if err != nil {
		return fmt.Errorf(`error parsing "title": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.FieldPatch{

		Datatype:    datatype,
		Description: description,
		Fieldtype:   fieldtype,
		Indexed:     indexed,
		Name:        name,
		Prevalence:  prevalence,
		Summary:     summary,
		Title:       title,
	}

	resp, err := client.CatalogService.UpdateFieldByIdForDatasetById(datasetid, fieldid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateRelationshipById Update a specific relationship.
func UpdateRelationshipById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var relationshipid string
	err = flags.ParseFlag(cmd.Flags(), "relationshipid", &relationshipid)
	if err != nil {
		return fmt.Errorf(`error parsing "relationshipid": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RelationshipPatch{

		Name:  name,
		Owner: owner,
	}

	resp, err := client.CatalogService.UpdateRelationshipById(relationshipid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateRule Update the Rule with the specified resourcename
func UpdateRule(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var matchDefault string
	match := &matchDefault
	err = flags.ParseFlag(cmd.Flags(), "match", &match)
	if err != nil {
		return fmt.Errorf(`error parsing "match": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RulePatch{

		Match:   match,
		Module:  module,
		Name:    name,
		Owner:   owner,
		Version: version,
	}

	resp, err := client.CatalogService.UpdateRule(ruleresourcename, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateRuleById Update a specific rule.
func UpdateRuleById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var matchDefault string
	match := &matchDefault
	err = flags.ParseFlag(cmd.Flags(), "match", &match)
	if err != nil {
		return fmt.Errorf(`error parsing "match": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RulePatch{

		Match:   match,
		Module:  module,
		Name:    name,
		Owner:   owner,
		Version: version,
	}

	resp, err := client.CatalogService.UpdateRuleById(ruleid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateWorkflowBuildById Update the workflow build with the specified workflow build ID.
func UpdateWorkflowBuildById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var statusDefault string
	status := &statusDefault
	err = flags.ParseFlag(cmd.Flags(), "status", &status)
	if err != nil {
		return fmt.Errorf(`error parsing "status": ` + err.Error())
	}
	var workflowbuildid string
	err = flags.ParseFlag(cmd.Flags(), "workflowbuildid", &workflowbuildid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowbuildid": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.WorkflowBuildPatch{

		Description: description,
		Name:        name,
		Status:      status,
	}

	err = client.CatalogService.UpdateWorkflowBuildById(workflowid, workflowbuildid, generated_request_body)
	if err != nil {
		return err
	}

	return nil
}

// UpdateWorkflowById Update the workflow with the specified workflow ID.
func UpdateWorkflowById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.WorkflowPatch{

		Description: description,
		Name:        name,
	}

	err = client.CatalogService.UpdateWorkflowById(workflowid, generated_request_body)
	if err != nil {
		return err
	}

	return nil
}

// UpdateWorkflowRunById Update the workflow run with the specified workflow run ID.
func UpdateWorkflowRunById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var statusDefault string
	status := &statusDefault
	err = flags.ParseFlag(cmd.Flags(), "status", &status)
	if err != nil {
		return fmt.Errorf(`error parsing "status": ` + err.Error())
	}
	var workflowbuildid string
	err = flags.ParseFlag(cmd.Flags(), "workflowbuildid", &workflowbuildid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowbuildid": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}
	var workflowrunid string
	err = flags.ParseFlag(cmd.Flags(), "workflowrunid", &workflowrunid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowrunid": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.WorkflowRunPatch{

		Description: description,
		Name:        name,
		Status:      status,
	}

	err = client.CatalogService.UpdateWorkflowRunById(workflowid, workflowbuildid, workflowrunid, generated_request_body)
	if err != nil {
		return err
	}

	return nil
}
