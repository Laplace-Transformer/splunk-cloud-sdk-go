/*
 * Copyright Â© 2019 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

// Code generated by gen_interface.go. DO NOT EDIT.

package ingest

import (
	"io"
	"net/http"
)

// Servicer represents the interface for implementing all endpoints for this service
type Servicer interface {
	/*
	   	NewBatchEventsSenderWithMaxAllowedError initializes a BatchEventsSender to collect events and send them as a single
	           batched request when a maximum event batch size, time interval, or maximum payload size is reached. It also
	           validates the user input for BatchEventSender.
	   	Parameters:
	   		batchSize: maximum number of events to reach before sending the batch, default maximum is 500
	   		interval: milliseconds to wait before sending the batch if other conditions have not been met
	   		dataSize: bytes that the overall payload should not exceed before sending, default maximum is 1040000 ~1MiB
	   		maxErrorsAllowed: number of errors after which the BatchEventsSender will stop
	*/
	NewBatchEventsSenderWithMaxAllowedError(batchSize int, interval int64, dataSize int, maxErrorsAllowed int) (*BatchEventsSender, error)
	/*
	   	NewBatchEventsSender initializes a BatchEventsSender to collect events and send them as a single batched
	           request when a maximum event batch size, time interval, or maximum payload size is reached.
	   	Parameters:
	   		batchSize: maximum number of events to reach before sending the batch, default maximum is 500
	   		interval: milliseconds to wait before sending the batch if other conditions have not been met
	   		payLoadSize: bytes that the overall payload should not exceed before sending, default maximum is 1040000 ~1MiB
	*/
	NewBatchEventsSender(batchSize int, interval int64, payLoadSize int) (*BatchEventsSender, error)
	/*
		UploadFiles - Upload a CSV or text file that contains events.
		Parameters:
			filename
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	UploadFiles(filename string, resp ...*http.Response) error
	/*
		UploadFilesStream - Upload stream of io.Reader.
		Parameters:
			stream
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	UploadFilesStream(stream io.Reader, resp ...*http.Response) error
	/*
		DeleteAllCollectorTokens - Delete All dsphec tokens for a given tenant.
		Parameters:
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	DeleteAllCollectorTokens(resp ...*http.Response) (*map[string]interface{}, error)
	/*
		DeleteCollectorToken - Delete dsphec token by name.
		Parameters:
			tokenName
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	DeleteCollectorToken(tokenName string, resp ...*http.Response) (*map[string]interface{}, error)
	/*
		GetCollectorToken - Get the metadata of a dsphec token by name.
		Parameters:
			tokenName
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetCollectorToken(tokenName string, resp ...*http.Response) (*HecTokenAccessResponse, error)
	/*
		ListCollectorTokens - List dsphec tokens for a tenant.
		Parameters:
			query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListCollectorTokens(query *ListCollectorTokensQueryParams, resp ...*http.Response) ([]HecTokenAccessResponse, error)
	/*
		PostCollectorTokens - Creates dsphec tokens.
		Parameters:
			hecTokenCreateRequest: The API request schema for the token.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	PostCollectorTokens(hecTokenCreateRequest HecTokenCreateRequest, resp ...*http.Response) (*HecTokenCreateResponse, error)
	/*
		PostEvents - Sends events.
		Parameters:
			event
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	PostEvents(event []Event, resp ...*http.Response) (*HttpResponse, error)
	/*
		PostMetrics - Sends metric events.
		Parameters:
			metricEvent
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	PostMetrics(metricEvent []MetricEvent, resp ...*http.Response) (*HttpResponse, error)
	/*
		PutCollectorToken - Update the metadata of a dsphec token by name.
		Parameters:
			tokenName
			hecTokenUpdateRequest: The API request schema for the token.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	PutCollectorToken(tokenName string, hecTokenUpdateRequest HecTokenUpdateRequest, resp ...*http.Response) (*HecTokenAccessResponse, error)
}
