/*
 * Copyright Â© 2019 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

// Code generated by gen_interface.go. DO NOT EDIT.

package identity

import (
	"net/http"
)

// Servicer represents the interface for implementing all endpoints for this service
type Servicer interface {
	/*
		AddGroupMember - identity service endpoint
		Adds a member to the group
		Parameters:
			group: The group name.
			addGroupMemberBody: Member to add to a group
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	AddGroupMember(group string, addGroupMemberBody AddGroupMemberBody, resp ...*http.Response) (*GroupMember, error)
	/*
		AddGroupRole - identity service endpoint
		Adds a role to the group
		Parameters:
			group: The group name.
			addGroupRoleBody: Role to add to a group
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	AddGroupRole(group string, addGroupRoleBody AddGroupRoleBody, resp ...*http.Response) (*GroupRole, error)
	/*
		AddMember - identity service endpoint
		Adds a member to the given tenant
		Parameters:
			addMemberBody: Member to associate with a tenant
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	AddMember(addMemberBody AddMemberBody, resp ...*http.Response) (*Member, error)
	/*
		AddRolePermission - identity service endpoint
		Adds permissions to a role in this tenant
		Parameters:
			role: The role name.
			body: Permission to add to a role
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	AddRolePermission(role string, body string, resp ...*http.Response) (*RolePermission, error)
	/*
		CreateGroup - identity service endpoint
		Creates a new group in the given tenant
		Parameters:
			createGroupBody: Group definition
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	CreateGroup(createGroupBody CreateGroupBody, resp ...*http.Response) (*Group, error)
	/*
		CreateRole - identity service endpoint
		Creates a new authorization role in the given tenant
		Parameters:
			createRoleBody: Role definition
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	CreateRole(createRoleBody CreateRoleBody, resp ...*http.Response) (*Role, error)
	/*
		DeleteGroup - identity service endpoint
		Deletes a group in the given tenant
		Parameters:
			group: The group name.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	DeleteGroup(group string, resp ...*http.Response) error
	/*
		DeleteRole - identity service endpoint
		Deletes a defined role for the given tenant
		Parameters:
			role: The role name.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	DeleteRole(role string, resp ...*http.Response) error
	/*
		GetGroup - identity service endpoint
		Defines a group in the given tenant
		Parameters:
			group: The group name.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetGroup(group string, resp ...*http.Response) (*Group, error)
	/*
		GetGroupMember - identity service endpoint
		Returns group-member relationship details
		Parameters:
			group: The group name.
			member: The member name.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetGroupMember(group string, member string, resp ...*http.Response) (*GroupMember, error)
	/*
		GetGroupRole - identity service endpoint
		Returns group-role relationship details
		Parameters:
			group: The group name.
			role: The role name.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetGroupRole(group string, role string, resp ...*http.Response) (*GroupRole, error)
	/*
		GetMember - identity service endpoint
		Get a member of the given tenant
		Parameters:
			member: The member name.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetMember(member string, resp ...*http.Response) (*Member, error)
	/*
		GetPrincipal - identity service endpoint
		Returns details of a principal, including their tenant membership
		Parameters:
			principal: The principal name.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetPrincipal(principal string, resp ...*http.Response) (*Principal, error)
	/*
		GetRole - identity service endpoint
		Get a role for the given tenant
		Parameters:
			role: The role name.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetRole(role string, resp ...*http.Response) (*Role, error)
	/*
		GetRolePermission - identity service endpoint
		Gets a permission
		Parameters:
			role: The role name.
			permission: The permission string.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetRolePermission(role string, permission string, resp ...*http.Response) (*RolePermission, error)
	/*
		ListGroupMembers - identity service endpoint
		Lists the members attached to the group
		Parameters:
			group: The group name.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListGroupMembers(group string, resp ...*http.Response) ([]string, error)
	/*
		ListGroupRoles - identity service endpoint
		Lists the roles attached to the group
		Parameters:
			group: The group name.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListGroupRoles(group string, resp ...*http.Response) ([]string, error)
	/*
		ListGroups - identity service endpoint
		List groups that exist in the tenant
		Parameters:
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListGroups(resp ...*http.Response) ([]string, error)
	/*
		ListMemberGroups - identity service endpoint
		Returns the list of groups a member belongs to within a tenant
		Parameters:
			member: The member name.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListMemberGroups(member string, resp ...*http.Response) ([]string, error)
	/*
		ListMemberPermissions - identity service endpoint
		Returns the set of permissions granted to the member within the tenant
		Parameters:
			member: The member name.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListMemberPermissions(member string, resp ...*http.Response) ([]string, error)
	/*
		ListMemberRoles - identity service endpoint
		Returns the set of roles the member possesses within the tenant
		Parameters:
			member: The member name.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListMemberRoles(member string, resp ...*http.Response) ([]string, error)
	/*
		ListMembers - identity service endpoint
		Returns the list of members in the given tenant
		Parameters:
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListMembers(resp ...*http.Response) ([]string, error)
	/*
		ListPrincipals - identity service endpoint
		Returns the list of principals known to IAC
		Parameters:
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListPrincipals(resp ...*http.Response) ([]string, error)
	/*
		ListRoleGroups - identity service endpoint
		Gets groups for a role in this tenant
		Parameters:
			role: The role name.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListRoleGroups(role string, resp ...*http.Response) ([]string, error)
	/*
		ListRolePermissions - identity service endpoint
		Gets permissions for a role in this tenant
		Parameters:
			role: The role name.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListRolePermissions(role string, resp ...*http.Response) ([]string, error)
	/*
		ListRoles - identity service endpoint
		Get all roles for the given tenant
		Parameters:
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListRoles(resp ...*http.Response) ([]string, error)
	/*
		RemoveGroupMember - identity service endpoint
		Removes the member from the group
		Parameters:
			group: The group name.
			member: The member name.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	RemoveGroupMember(group string, member string, resp ...*http.Response) error
	/*
		RemoveGroupRole - identity service endpoint
		Removes the role from the group
		Parameters:
			group: The group name.
			role: The role name.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	RemoveGroupRole(group string, role string, resp ...*http.Response) error
	/*
		RemoveMember - identity service endpoint
		Removes a member from the given tenant
		Parameters:
			member: The member name.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	RemoveMember(member string, resp ...*http.Response) error
	/*
		RemoveRolePermission - identity service endpoint
		Removes a permission from the role
		Parameters:
			role: The role name.
			permission: The permission string.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	RemoveRolePermission(role string, permission string, resp ...*http.Response) error
	/*
		ValidateToken - identity service endpoint
		Validates the access token obtained from authorization header and returns the principal name and tenant memberships
		Parameters:
			query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ValidateToken(query *ValidateTokenQueryParams, resp ...*http.Response) (*ValidateInfo, error)
}
