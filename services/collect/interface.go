/*
 * Copyright Â© 2019 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

// Code generated by gen_interface.go. DO NOT EDIT.

package collect

import (
	"net/http"
)

// Servicer represents the interface for implementing all endpoints for this service
type Servicer interface {
	/*
		CreateJob - Creates a job
		This API returns &#x60;403&#x60; if the number of collect workers is over a certain limit.
		Parameters:
			job: The API request schema for the job.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	CreateJob(job Job, resp ...*http.Response) (*SingleJobResponse, error)
	/*
		DeleteJob - Removes a job based on the job ID.
		Parameters:
			jobId: The job ID.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	DeleteJob(jobId string, resp ...*http.Response) error
	/*
		DeleteJobs - Removes all jobs on a tenant.
		Parameters:
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	DeleteJobs(resp ...*http.Response) (*DeleteJobsResponse, error)
	/*
		GetJob - Returns a job based on the job ID.
		Parameters:
			jobId: The job ID.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetJob(jobId string, resp ...*http.Response) (*SingleJobResponse, error)
	/*
		ListJobs - Returns a list of all jobs that belong to a tenant.
		Parameters:
			query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListJobs(query *ListJobsQueryParams, resp ...*http.Response) (*ListJobsResponse, error)
	/*
		PatchJob - Modifies a job based on the job ID.
		This API returns &#x60;403&#x60; if the number of collect workers is over a certain limit.
		Parameters:
			jobId: The job ID.
			jobPatch: The API request schema for patching a job.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	PatchJob(jobId string, jobPatch JobPatch, resp ...*http.Response) (*SingleJobResponse, error)
	/*
		PatchJobs - Finds all jobs that match the query and modifies the with the changes specified in the request.
		This is a non-atomic operation and the results are returned as a list with each job patch result as its element. This API returns &#x60;200 OK&#x60; regardless of how many jobs were successfully patched. You must read the response body to find out if all jobs are patched. When the API is called, the &#x60;jobIDs&#x60; or &#x60;connectorID&#x60; must be specified. Do not specify more than one of them at the same time. This API returns &#x60;403&#x60; if the number of collect workers is over a certain limit.
		Parameters:
			jobsPatch: The API request schema for patching jobs.
			query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	PatchJobs(jobsPatch JobsPatch, query *PatchJobsQueryParams, resp ...*http.Response) (*PatchJobsResponse, error)
}
