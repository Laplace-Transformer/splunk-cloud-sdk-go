/*
 * Copyright Â© 2020 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Data Stream Processing REST API
 *
 * Use the Streams service to perform create, read, update, and delete (CRUD) operations on your data pipeline. The Streams service also has metrics and preview session endpoints and gives you full control over your data pipeline.
 *
 * API version: v2beta1.4 (recommended default)
 * Generated by: OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
 */

package streams

type ActivatePipelineRequest struct {
	// Set to true to activate the latest version of the pipeline. Set to false to use the previously activated version of the pipeline. Defaults to true.
	ActivateLatestVersion *bool `json:"activateLatestVersion,omitempty"`
	// Set to true to allow the pipeline to ignore any unused progress states. In some cases, when a data pipeline is changed, the progress state will be stored for functions that no longer exist, so this must be set to activate a pipeline in this state. Defaults to false.
	AllowNonRestoredState *bool `json:"allowNonRestoredState,omitempty"`
	// Set to true to start reading from the latest input rather than from where the pipeline's previous run left off, which can cause data loss. Defaults to false.
	SkipRestoreState *bool `json:"skipRestoreState,omitempty"`
}

type ConnectionPatchRequest struct {
	// The key-value pairs of configurations for this connection. Connectors may have some configurations that are required, which all connections must provide values for. For configuration values of type BYTES, the provided values must be Base64 encoded.
	Data map[string]interface{} `json:"data,omitempty"`
	// The description of the connection.
	Description *string `json:"description,omitempty"`
	// The name of the connection.
	Name *string `json:"name,omitempty"`
}

type ConnectionPutRequest struct {
	// The key-value pairs of configurations for this connection. Connectors may have some configurations that are required, which all connections must provide values for. For configuration values of type BYTES, the provided values must be Base64 encoded.
	Data map[string]interface{} `json:"data"`
	// The description of the connection.
	Description string `json:"description"`
	// The name of the connection.
	Name string `json:"name"`
}

type ConnectionRequest struct {
	// The ID of the parent connector.
	ConnectorId string `json:"connectorId"`
	// The key-value pairs of configurations for this connection. Connectors may have some configurations that are required, which all connections must provide values for. For configuration values of type BYTES, the provided values must be Base64 encoded.
	Data map[string]interface{} `json:"data"`
	// The description of the connection.
	Description string `json:"description"`
	// The name of the connection.
	Name string `json:"name"`
}

type ConnectionResponse struct {
	ActivePipelinesUsing []map[string]interface{}    `json:"activePipelinesUsing,omitempty"`
	ConnectorId          *string                     `json:"connectorId,omitempty"`
	ConnectorName        *string                     `json:"connectorName,omitempty"`
	CreateDate           *int64                      `json:"createDate,omitempty"`
	CreateUserId         *string                     `json:"createUserId,omitempty"`
	Id                   *string                     `json:"id,omitempty"`
	LastUpdateDate       *int64                      `json:"lastUpdateDate,omitempty"`
	LastUpdateUserId     *string                     `json:"lastUpdateUserId,omitempty"`
	Versions             []ConnectionVersionResponse `json:"versions,omitempty"`
}

type ConnectionSaveResponse struct {
	ConnectorId  *string     `json:"connectorId,omitempty"`
	CreateDate   *int64      `json:"createDate,omitempty"`
	CreateUserId *string     `json:"createUserId,omitempty"`
	Data         *ObjectNode `json:"data,omitempty"`
	Description  *string     `json:"description,omitempty"`
	Id           *string     `json:"id,omitempty"`
	Name         *string     `json:"name,omitempty"`
	Version      *int64      `json:"version,omitempty"`
}

type ConnectionVersionResponse struct {
	CreateDate   *int64      `json:"createDate,omitempty"`
	CreateUserId *string     `json:"createUserId,omitempty"`
	Data         *ObjectNode `json:"data,omitempty"`
	Description  *string     `json:"description,omitempty"`
	Name         *string     `json:"name,omitempty"`
	Version      *int64      `json:"version,omitempty"`
}

type ConnectorResponse struct {
	Config        *ObjectNode              `json:"config,omitempty"`
	ConnectorType *string                  `json:"connectorType,omitempty"`
	Description   *string                  `json:"description,omitempty"`
	Functions     []map[string]interface{} `json:"functions,omitempty"`
	Hidden        *bool                    `json:"hidden,omitempty"`
	Id            *string                  `json:"id,omitempty"`
	Name          *string                  `json:"name,omitempty"`
	PanelUrl      *string                  `json:"panelUrl,omitempty"`
	Tag           *string                  `json:"tag,omitempty"`
}

type DeactivatePipelineRequest struct {
	// Set to true to skip saving the state of a deactivated pipeline. When the pipeline is later activated, it will start with the newest data and skip any data that arrived after this deactivation, which can cause data loss. Defaults to false.
	SkipSavepoint *bool `json:"skipSavepoint,omitempty"`
}

type DslCompilationRequest struct {
	// The Streams DSL representation of a pipeline.
	Dsl string `json:"dsl"`
}

type GetInputSchemaRequest struct {
	// The function ID.
	NodeUuid string `json:"nodeUuid"`
	// The name of the input port.
	TargetPortName string      `json:"targetPortName"`
	UplJson        UplPipeline `json:"uplJson"`
}

type GetOutputSchemaRequest struct {
	UplJson UplPipeline `json:"uplJson"`
	// The function ID. If omitted, returns the output schema for all functions.
	NodeUuid *string `json:"nodeUuid,omitempty"`
	// The name of the output port. Deprecated.
	SourcePortName *string `json:"sourcePortName,omitempty"`
}

type GroupArgumentsNode struct {
	// The argument name for your group function.
	GroupArg string `json:"groupArg"`
	// Group function argument position number.
	Position int32 `json:"position"`
	// The group function's data type.
	Type string `json:"type"`
}

type GroupExpandRequest struct {
	// Function arguments for the given id. Overrides default values.
	Arguments map[string]interface{} `json:"arguments"`
	// The ID associated with your group function in the pipeline Streams JSON
	Id string `json:"id"`
}

type GroupFunctionArgsMappingNode struct {
	// List of mappings from group function argument to function argument.
	Arguments []GroupFunctionArgsNode `json:"arguments"`
	// The function id to map to a group function argument.
	FunctionId string `json:"functionId"`
}

type GroupFunctionArgsNode struct {
	// Function argument name.
	FunctionArg string `json:"functionArg"`
	// The argument name for your group function.
	GroupArg string `json:"groupArg"`
}

type GroupPatchRequest struct {
	// Group function arguments list.
	Arguments []GroupArgumentsNode `json:"arguments,omitempty"`
	Ast       *UplPipeline         `json:"ast,omitempty"`
	// Attributes map for function.
	Attributes map[string]interface{} `json:"attributes,omitempty"`
	// Categories for this function.
	Categories []int64 `json:"categories,omitempty"`
	// Group function mappings list.
	Mappings []GroupFunctionArgsMappingNode `json:"mappings,omitempty"`
	// The name for the group function.
	Name *string `json:"name,omitempty"`
	// The data type of the output of your function.
	OutputType *string `json:"outputType,omitempty"`
	Scalar     *bool   `json:"scalar,omitempty"`
	Variadic   *bool   `json:"variadic,omitempty"`
}

type GroupPutRequest struct {
	// The group function arguments list.
	Arguments []GroupArgumentsNode `json:"arguments"`
	Ast       UplPipeline          `json:"ast"`
	// The attributes map for function.
	Attributes map[string]interface{} `json:"attributes"`
	// The categories for this function.
	Categories []int64 `json:"categories"`
	// The group function mappings list.
	Mappings []GroupFunctionArgsMappingNode `json:"mappings"`
	// The group function name.
	Name string `json:"name"`
	// The data type of the function's output.
	OutputType string `json:"outputType"`
	Scalar     *bool  `json:"scalar,omitempty"`
	Variadic   *bool  `json:"variadic,omitempty"`
}

type GroupRequest struct {
	// The group function arguments list.
	Arguments []GroupArgumentsNode `json:"arguments"`
	Ast       UplPipeline          `json:"ast"`
	// The attributes map for function.
	Attributes map[string]interface{} `json:"attributes"`
	// The categories for this function.
	Categories []int64 `json:"categories"`
	// The group function mappings list.
	Mappings []GroupFunctionArgsMappingNode `json:"mappings"`
	// The group function name.
	Name string `json:"name"`
	// The data type of the function's output.
	OutputType string `json:"outputType"`
	Scalar     *bool  `json:"scalar,omitempty"`
	Variadic   *bool  `json:"variadic,omitempty"`
}

type GroupResponse struct {
	Arguments        []GroupArgumentsNode           `json:"arguments,omitempty"`
	Ast              *UplPipeline                   `json:"ast,omitempty"`
	Attributes       map[string]interface{}         `json:"attributes,omitempty"`
	Categories       []int64                        `json:"categories,omitempty"`
	CreateDate       *int64                         `json:"createDate,omitempty"`
	CreateUserId     *string                        `json:"createUserId,omitempty"`
	GroupId          *string                        `json:"groupId,omitempty"`
	LastUpdateDate   *int64                         `json:"lastUpdateDate,omitempty"`
	LastUpdateUserId *string                        `json:"lastUpdateUserId,omitempty"`
	Mappings         []GroupFunctionArgsMappingNode `json:"mappings,omitempty"`
	Name             *string                        `json:"name,omitempty"`
	OutputType       *string                        `json:"outputType,omitempty"`
	Scalar           *bool                          `json:"scalar,omitempty"`
	TenantId         *string                        `json:"tenantId,omitempty"`
	Variadic         *bool                          `json:"variadic,omitempty"`
}

type MapOfstringAndobject map[string]interface{}

type MetricsResponse struct {
	Nodes map[string]NodeMetrics `json:"nodes,omitempty"`
}

type NodeMetrics struct {
	Metrics map[string]interface{} `json:"metrics,omitempty"`
}

type ObjectNode struct {
	Array               *bool               `json:"array,omitempty"`
	BigDecimal          *bool               `json:"bigDecimal,omitempty"`
	BigInteger          *bool               `json:"bigInteger,omitempty"`
	Binary              *bool               `json:"binary,omitempty"`
	Boolean             *bool               `json:"boolean,omitempty"`
	ContainerNode       *bool               `json:"containerNode,omitempty"`
	Double              *bool               `json:"double,omitempty"`
	Float               *bool               `json:"float,omitempty"`
	FloatingPointNumber *bool               `json:"floatingPointNumber,omitempty"`
	Int                 *bool               `json:"int,omitempty"`
	IntegralNumber      *bool               `json:"integralNumber,omitempty"`
	Long                *bool               `json:"long,omitempty"`
	MissingNode         *bool               `json:"missingNode,omitempty"`
	NodeType            *ObjectNodeNodeType `json:"nodeType,omitempty"`
	Null                *bool               `json:"null,omitempty"`
	Number              *bool               `json:"number,omitempty"`
	Object              *bool               `json:"object,omitempty"`
	Pojo                *bool               `json:"pojo,omitempty"`
	Short               *bool               `json:"short,omitempty"`
	Textual             *bool               `json:"textual,omitempty"`
	ValueNode           *bool               `json:"valueNode,omitempty"`
}

type ObjectNodeNodeType string

// List of ObjectNodeNodeType
const (
	ObjectNodeNodeTypeArray   ObjectNodeNodeType = "ARRAY"
	ObjectNodeNodeTypeBinary  ObjectNodeNodeType = "BINARY"
	ObjectNodeNodeTypeBoolean ObjectNodeNodeType = "BOOLEAN"
	ObjectNodeNodeTypeMissing ObjectNodeNodeType = "MISSING"
	ObjectNodeNodeTypeNull    ObjectNodeNodeType = "NULL"
	ObjectNodeNodeTypeNumber  ObjectNodeNodeType = "NUMBER"
	ObjectNodeNodeTypeObject  ObjectNodeNodeType = "OBJECT"
	ObjectNodeNodeTypePojo    ObjectNodeNodeType = "POJO"
	ObjectNodeNodeTypeString  ObjectNodeNodeType = "STRING"
)

type PaginatedResponseOfConnectionResponse struct {
	Items []ConnectionResponse `json:"items,omitempty"`
	Total *int64               `json:"total,omitempty"`
}

type PaginatedResponseOfConnectorResponse struct {
	Items []ConnectorResponse `json:"items,omitempty"`
	Total *int64              `json:"total,omitempty"`
}

type PaginatedResponseOfPipelineJobStatus struct {
	Items []PipelineJobStatus `json:"items,omitempty"`
	Total *int64              `json:"total,omitempty"`
}

type PaginatedResponseOfPipelineResponse struct {
	Items []PipelineResponse `json:"items,omitempty"`
	Total *int64             `json:"total,omitempty"`
}

type PaginatedResponseOfTemplateResponse struct {
	Items []TemplateResponse `json:"items,omitempty"`
	Total *int64             `json:"total,omitempty"`
}

type PipelineDeleteResponse struct {
	CouldDeactivate *bool `json:"couldDeactivate,omitempty"`
	Running         *bool `json:"running,omitempty"`
}

type PipelineJobStatus struct {
	JobId      *string `json:"jobId,omitempty"`
	JobStatus  *string `json:"jobStatus,omitempty"`
	PipelineId *string `json:"pipelineId,omitempty"`
}

type PipelinePatchRequest struct {
	// Set to true to bypass initial pipeline validation upon creation. The pipeline still needs to be validated before activation. Defaults to false.
	BypassValidation *bool `json:"bypassValidation,omitempty"`
	// The user that created the pipeline. Deprecated.
	CreateUserId *string      `json:"createUserId,omitempty"`
	Data         *UplPipeline `json:"data,omitempty"`
	// The description of the pipeline. Defaults to null.
	Description *string `json:"description,omitempty"`
	// The name of the pipeline.
	Name *string `json:"name,omitempty"`
}

type PipelineReactivateResponse struct {
	CurrentlyActiveVersion     *int64                                                `json:"currentlyActiveVersion,omitempty"`
	PipelineId                 *string                                               `json:"pipelineId,omitempty"`
	PipelineReactivationStatus *PipelineReactivateResponsePipelineReactivationStatus `json:"pipelineReactivationStatus,omitempty"`
}

type PipelineReactivateResponsePipelineReactivationStatus string

// List of PipelineReactivateResponsePipelineReactivationStatus
const (
	PipelineReactivateResponsePipelineReactivationStatusActivated                        PipelineReactivateResponsePipelineReactivationStatus = "activated"
	PipelineReactivateResponsePipelineReactivationStatusCurrentVersionInvalid            PipelineReactivateResponsePipelineReactivationStatus = "currentVersionInvalid"
	PipelineReactivateResponsePipelineReactivationStatusFailedToDeactivateCurrentVersion PipelineReactivateResponsePipelineReactivationStatus = "failedToDeactivateCurrentVersion"
	PipelineReactivateResponsePipelineReactivationStatusNotActivated                     PipelineReactivateResponsePipelineReactivationStatus = "notActivated"
	PipelineReactivateResponsePipelineReactivationStatusRolledBack                       PipelineReactivateResponsePipelineReactivationStatus = "rolledBack"
	PipelineReactivateResponsePipelineReactivationStatusRolledBackError                  PipelineReactivateResponsePipelineReactivationStatus = "rolledBackError"
)

type PipelineRequest struct {
	Data UplPipeline `json:"data"`
	// The name of the pipeline.
	Name string `json:"name"`
	// Set to true to bypass initial pipeline validation upon creation. The pipeline still needs to be validated before activation. Defaults to false.
	BypassValidation *bool `json:"bypassValidation,omitempty"`
	// The description of the pipeline. Defaults to null.
	Description *string `json:"description,omitempty"`
}

type PipelineResponse struct {
	ActivatedDate            *int64                  `json:"activatedDate,omitempty"`
	ActivatedUserId          *string                 `json:"activatedUserId,omitempty"`
	ActivatedVersion         *int64                  `json:"activatedVersion,omitempty"`
	CreateDate               *int64                  `json:"createDate,omitempty"`
	CreateUserId             *string                 `json:"createUserId,omitempty"`
	CurrentVersion           *int64                  `json:"currentVersion,omitempty"`
	Data                     *UplPipeline            `json:"data,omitempty"`
	Description              *string                 `json:"description,omitempty"`
	Id                       *string                 `json:"id,omitempty"`
	LastUpdateDate           *int64                  `json:"lastUpdateDate,omitempty"`
	LastUpdateUserId         *string                 `json:"lastUpdateUserId,omitempty"`
	Name                     *string                 `json:"name,omitempty"`
	Status                   *PipelineResponseStatus `json:"status,omitempty"`
	StatusMessage            *string                 `json:"statusMessage,omitempty"`
	StreamingConfigurationId *int64                  `json:"streamingConfigurationId,omitempty"`
	TenantId                 *string                 `json:"tenantId,omitempty"`
	ValidationMessages       []string                `json:"validationMessages,omitempty"`
	Version                  *int64                  `json:"version,omitempty"`
}

type PipelineResponseStatus string

// List of PipelineResponseStatus
const (
	PipelineResponseStatusCreated    PipelineResponseStatus = "CREATED"
	PipelineResponseStatusActivated  PipelineResponseStatus = "ACTIVATED"
	PipelineResponseStatusFailed     PipelineResponseStatus = "FAILED"
	PipelineResponseStatusRestarting PipelineResponseStatus = "RESTARTING"
	PipelineResponseStatusFinished   PipelineResponseStatus = "FINISHED"
)

type PipelinesMergeRequest struct {
	InputTree UplPipeline `json:"inputTree"`
	MainTree  UplPipeline `json:"mainTree"`
	// The function ID of the merge target in the main pipeline.
	TargetNode string `json:"targetNode"`
	// The input port of the merge target in the main pipeline.
	TargetPort string `json:"targetPort"`
}

type PreviewData struct {
	CurrentNumberOfRecords *int32                 `json:"currentNumberOfRecords,omitempty"`
	Nodes                  map[string]PreviewNode `json:"nodes,omitempty"`
	PreviewId              *string                `json:"previewId,omitempty"`
	RecordsPerPipeline     *int32                 `json:"recordsPerPipeline,omitempty"`
	TenantId               *string                `json:"tenantId,omitempty"`
}

type PreviewNode struct {
	NodeName *string      `json:"nodeName,omitempty"`
	Records  []ObjectNode `json:"records,omitempty"`
}

type PreviewSessionStartRequest struct {
	Upl UplPipeline `json:"upl"`
	// The maximum number of events per function. Defaults to 100.
	RecordsLimit *int32 `json:"recordsLimit,omitempty"`
	// The maximum number of events per pipeline. Defaults to 10000.
	RecordsPerPipeline *int32 `json:"recordsPerPipeline,omitempty"`
	// The maximum lifetime of a session, in milliseconds. Defaults to 300,000.
	SessionLifetimeMs *int64 `json:"sessionLifetimeMs,omitempty"`
}

type PreviewStartResponse struct {
	PreviewId *int64 `json:"previewId,omitempty"`
}

type PreviewState struct {
	ActivatedDate          *int64  `json:"activatedDate,omitempty"`
	CreatedDate            *int64  `json:"createdDate,omitempty"`
	CurrentNumberOfRecords *int32  `json:"currentNumberOfRecords,omitempty"`
	JobId                  *string `json:"jobId,omitempty"`
	PreviewId              *int64  `json:"previewId,omitempty"`
	RecordsPerPipeline     *int32  `json:"recordsPerPipeline,omitempty"`
}

type Response struct {
	// Only set for /activate endpoint
	Activated *string `json:"activated,omitempty"`
	// Only set for /deactivate endpoint
	Deactivated *string `json:"deactivated,omitempty"`
}

type SplCompileRequest struct {
	// The SPL2 representation of a pipeline or function parameters.
	Spl string `json:"spl"`
	// The parse parameters as arguments to this SPL2 command
	Syntax *SplCompileRequestSyntax `json:"syntax,omitempty"`
}

// SplCompileRequestSyntax : The parse parameters as arguments to this SPL2 command
type SplCompileRequestSyntax string

// List of SplCompileRequestSyntax
const (
	SplCompileRequestSyntaxUpl        SplCompileRequestSyntax = "UPL"
	SplCompileRequestSyntaxDsl        SplCompileRequestSyntax = "DSL"
	SplCompileRequestSyntaxSpl        SplCompileRequestSyntax = "SPL"
	SplCompileRequestSyntaxEval       SplCompileRequestSyntax = "EVAL"
	SplCompileRequestSyntaxWhere      SplCompileRequestSyntax = "WHERE"
	SplCompileRequestSyntaxTimechart  SplCompileRequestSyntax = "TIMECHART"
	SplCompileRequestSyntaxFields     SplCompileRequestSyntax = "FIELDS"
	SplCompileRequestSyntaxMvexpand   SplCompileRequestSyntax = "MVEXPAND"
	SplCompileRequestSyntaxRex        SplCompileRequestSyntax = "REX"
	SplCompileRequestSyntaxBin        SplCompileRequestSyntax = "BIN"
	SplCompileRequestSyntaxRename     SplCompileRequestSyntax = "RENAME"
	SplCompileRequestSyntaxStats      SplCompileRequestSyntax = "STATS"
	SplCompileRequestSyntaxStatsBy    SplCompileRequestSyntax = "STATS_BY"
	SplCompileRequestSyntaxSelect     SplCompileRequestSyntax = "SELECT"
	SplCompileRequestSyntaxExpression SplCompileRequestSyntax = "EXPRESSION"
	SplCompileRequestSyntaxFunction   SplCompileRequestSyntax = "FUNCTION"
	SplCompileRequestSyntaxLiteral    SplCompileRequestSyntax = "LITERAL"
	SplCompileRequestSyntaxUnknown    SplCompileRequestSyntax = "UNKNOWN"
)

type TemplatePatchRequest struct {
	Data *UplPipeline `json:"data,omitempty"`
	// Template description
	Description *string `json:"description,omitempty"`
	// Template name
	Name *string `json:"name,omitempty"`
}

type TemplatePutRequest struct {
	Data UplPipeline `json:"data"`
	// Template description
	Description string `json:"description"`
	// Template name
	Name string `json:"name"`
}

type TemplateRequest struct {
	Data UplPipeline `json:"data"`
	// Template description
	Description string `json:"description"`
	// Template name
	Name string `json:"name"`
}

type TemplateResponse struct {
	CreateDate    *int64       `json:"createDate,omitempty"`
	CreateUserId  *string      `json:"createUserId,omitempty"`
	Data          *UplPipeline `json:"data,omitempty"`
	Description   *string      `json:"description,omitempty"`
	Name          *string      `json:"name,omitempty"`
	OwnerTenantId *string      `json:"ownerTenantId,omitempty"`
	TemplateId    *string      `json:"templateId,omitempty"`
	Version       *int64       `json:"version,omitempty"`
}

type UplArgument struct {
	Type        string      `json:"type"`
	ElementType interface{} `json:"elementType,omitempty"`
	Optional    *bool       `json:"optional,omitempty"`
	Position    *int32      `json:"position,omitempty"`
}

type UplCategory struct {
	Id   int64  `json:"id"`
	Name string `json:"name"`
}

type UplEdge struct {
	// The source function's (node's) id
	SourceNode string `json:"sourceNode"`
	// The source function's (node's) port
	SourcePort string `json:"sourcePort"`
	// The target function's (node's) id
	TargetNode string `json:"targetNode"`
	// The target function's (node's) port
	TargetPort string                 `json:"targetPort"`
	Attributes map[string]interface{} `json:"attributes,omitempty"`
}

type UplFunction struct {
	Arguments  map[string]UplArgument `json:"arguments,omitempty"`
	Attributes map[string]interface{} `json:"attributes,omitempty"`
	Categories []int64                `json:"categories,omitempty"`
	Id         *string                `json:"id,omitempty"`
	IsVariadic *bool                  `json:"isVariadic,omitempty"`
	Op         *string                `json:"op,omitempty"`
	Output     *UplArgument           `json:"output,omitempty"`
	ResolvedId *string                `json:"resolvedId,omitempty"`
}

type UplNode map[string]interface{}

type UplPipeline struct {
	// A list of links or connections between the output of one pipeline function and the input of another pipeline function
	Edges []UplEdge `json:"edges"`
	// The functions (or nodes) in your entire pipeline, including each function's operations, attributes, and properties
	Nodes []UplNode `json:"nodes"`
	// The UUIDs of all sink functions in a given pipeline
	RootNode                []string `json:"rootNode"`
	RootNodeFromUplPipeline []string `json:"rootNodeFromUplPipeline,omitempty"`
}

type UplRegistry struct {
	Categories []UplCategory `json:"categories,omitempty"`
	Functions  []UplFunction `json:"functions,omitempty"`
	Types      []UplType     `json:"types,omitempty"`
}

type UplType struct {
	FieldName  *string   `json:"fieldName,omitempty"`
	Parameters []UplType `json:"parameters,omitempty"`
	Type       *string   `json:"type,omitempty"`
}

type ValidateRequest struct {
	Upl UplPipeline `json:"upl"`
}

type ValidateResponse struct {
	Spl                *string  `json:"spl,omitempty"`
	Success            *bool    `json:"success,omitempty"`
	ValidationMessages []string `json:"validationMessages,omitempty"`
}
