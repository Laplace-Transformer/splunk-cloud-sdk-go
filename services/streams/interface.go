/*
 * Copyright Â© 2019 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

// Code generated by gen_interface.go. DO NOT EDIT.

package streams

import (
	"net/http"
)

// Servicer represents the interface for implementing all endpoints for this service
type Servicer interface {
	/*
		ActivatePipeline - Activates an existing pipeline.
		Parameters:
			id: id of the pipeline to activate
			activatePipelineRequest: Request JSON
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ActivatePipeline(id string, activatePipelineRequest ActivatePipelineRequest, resp ...*http.Response) (*Response, error)
	/*
		CompileDSL - Compiles the Streams DSL and returns Streams JSON.
		Parameters:
			dslCompilationRequest: Request JSON
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	CompileDSL(dslCompilationRequest DslCompilationRequest, resp ...*http.Response) (*UplPipeline, error)
	/*
		CompileSPL - Compiles SPL2 and returns Streams JSON.
		Parameters:
			splCompileRequest: Request JSON
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	CompileSPL(splCompileRequest SplCompileRequest, resp ...*http.Response) (*UplPipeline, error)
	/*
		CreateConnection - Create a new DSP connection.
		Parameters:
			connectionRequest: Request JSON
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	CreateConnection(connectionRequest ConnectionRequest, resp ...*http.Response) (*ConnectionSaveResponse, error)
	/*
		CreateGroup - Create a new group function by combining the Streams JSON of two or more functions.
		Parameters:
			groupRequest: Request JSON
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	CreateGroup(groupRequest GroupRequest, resp ...*http.Response) (*GroupResponse, error)
	/*
		CreatePipeline - Creates a pipeline.
		Parameters:
			pipelineRequest: Request JSON
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	CreatePipeline(pipelineRequest PipelineRequest, resp ...*http.Response) (*PipelineResponse, error)
	/*
		CreateTemplate - Creates a template for a tenant.
		Parameters:
			templateRequest: Request JSON
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	CreateTemplate(templateRequest TemplateRequest, resp ...*http.Response) (*TemplateResponse, error)
	/*
		DeactivatePipeline - Deactivates an existing pipeline.
		Parameters:
			id: id of the pipeline to deactivate
			deactivatePipelineRequest: Request JSON
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	DeactivatePipeline(id string, deactivatePipelineRequest DeactivatePipelineRequest, resp ...*http.Response) (*Response, error)
	/*
		DeleteConnection - Delete all versions of a connection by its id.
		Parameters:
			connectionId: ID of the connection
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	DeleteConnection(connectionId string, resp ...*http.Response) error
	/*
		DeleteGroup - Removes an existing group.
		Parameters:
			groupId: The group function's ID from the function registry
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	DeleteGroup(groupId string, resp ...*http.Response) error
	/*
		DeletePipeline - Removes a pipeline.
		Parameters:
			id: id of the pipeline to delete
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	DeletePipeline(id string, resp ...*http.Response) (*PipelineDeleteResponse, error)
	/*
		DeleteTemplate - Removes a template with a specific ID.
		Parameters:
			templateId: ID of the template to delete
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	DeleteTemplate(templateId string, resp ...*http.Response) error
	/*
		ExpandGroup - Creates and returns the expanded version of a group.
		Parameters:
			groupId: The group function's ID from the function registry
			groupExpandRequest: Request JSON
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ExpandGroup(groupId string, groupExpandRequest GroupExpandRequest, resp ...*http.Response) (*UplPipeline, error)
	/*
		ExpandPipeline - Returns the entire Streams JSON, including the expanded Streams JSON of any group functions in the pipeline.
		Parameters:
			uplPipeline: Request JSON
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ExpandPipeline(uplPipeline UplPipeline, resp ...*http.Response) (*UplPipeline, error)
	/*
		GetGroup - Returns the full Streams JSON of a group.
		Parameters:
			groupId: The group function's ID from the function registry
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetGroup(groupId string, resp ...*http.Response) (*GroupResponse, error)
	/*
		GetInputSchema - Returns the input schema for a function in a pipeline.
		Parameters:
			getInputSchemaRequest: Input Schema Request
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetInputSchema(getInputSchemaRequest GetInputSchemaRequest, resp ...*http.Response) (*UplType, error)
	/*
		GetOutputSchema - Returns the output schema for a specified function in a pipeline. If no function ID is  specified, the request returns the output schema for all functions in a pipeline.
		Parameters:
			getOutputSchemaRequest: Output Schema Request
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetOutputSchema(getOutputSchemaRequest GetOutputSchemaRequest, resp ...*http.Response) (map[string]UplType, error)
	/*
		GetPipeline - Returns an individual pipeline by version.
		Parameters:
			id: id of the pipeline to get
			query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetPipeline(id string, query *GetPipelineQueryParams, resp ...*http.Response) (*PipelineResponse, error)
	/*
		GetPipelineLatestMetrics - Returns the latest metrics for a single pipeline.
		Parameters:
			id: ID of the pipeline to get metrics for
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetPipelineLatestMetrics(id string, resp ...*http.Response) (*MetricsResponse, error)
	/*
		GetPipelinesStatus - Returns the status of pipelines from the underlying streaming system.
		Parameters:
			query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetPipelinesStatus(query *GetPipelinesStatusQueryParams, resp ...*http.Response) (*PaginatedResponseOfPipelineJobStatus, error)
	/*
		GetPreviewData - Returns the preview data for a session.
		Parameters:
			previewSessionId: ID of the preview session
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetPreviewData(previewSessionId int64, resp ...*http.Response) (*PreviewData, error)
	/*
		GetPreviewSession - Returns information from a preview session.
		Parameters:
			previewSessionId: ID of the preview session
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetPreviewSession(previewSessionId int64, resp ...*http.Response) (*PreviewState, error)
	/*
		GetPreviewSessionLatestMetrics - Returns the latest metrics for a preview session.
		Parameters:
			previewSessionId: ID of the preview session
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetPreviewSessionLatestMetrics(previewSessionId int64, resp ...*http.Response) (*MetricsResponse, error)
	/*
		GetRegistry - Returns all functions in JSON format.
		Parameters:
			query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetRegistry(query *GetRegistryQueryParams, resp ...*http.Response) (*UplRegistry, error)
	/*
		GetTemplate - Returns an individual template by version.
		Parameters:
			templateId: ID of the template
			query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetTemplate(templateId string, query *GetTemplateQueryParams, resp ...*http.Response) (*TemplateResponse, error)
	/*
		ListConnections - Returns a list of connections (latest versions only) by tenant ID.
		Parameters:
			query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListConnections(query *ListConnectionsQueryParams, resp ...*http.Response) (*PaginatedResponseOfConnectionResponse, error)
	/*
		ListConnectors - Returns a list of the available connectors.
		Parameters:
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListConnectors(resp ...*http.Response) (*PaginatedResponseOfConnectorResponse, error)
	/*
		ListPipelines - Returns all pipelines.
		Parameters:
			query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListPipelines(query *ListPipelinesQueryParams, resp ...*http.Response) (*PaginatedResponseOfPipelineResponse, error)
	/*
		ListTemplates - Returns a list of all templates.
		Parameters:
			query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListTemplates(query *ListTemplatesQueryParams, resp ...*http.Response) (*PaginatedResponseOfTemplateResponse, error)
	/*
		MergePipelines - Combines two Streams JSON programs.
		Parameters:
			pipelinesMergeRequest: Request JSON
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	MergePipelines(pipelinesMergeRequest PipelinesMergeRequest, resp ...*http.Response) (*UplPipeline, error)
	/*
		PutConnection - Modifies an existing DSP connection.
		Parameters:
			connectionId: ID of the connection
			connectionPutRequest: Request JSON
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	PutConnection(connectionId string, connectionPutRequest ConnectionPutRequest, resp ...*http.Response) (*ConnectionSaveResponse, error)
	/*
		PutGroup - Update a group function combining the Streams JSON of two or more functions.
		Parameters:
			groupId: The group function's ID from the function registry
			groupPutRequest: Request JSON
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	PutGroup(groupId string, groupPutRequest GroupPutRequest, resp ...*http.Response) (*GroupResponse, error)
	/*
		PutTemplate - Updates an existing template.
		Parameters:
			templateId: ID of the template
			templatePutRequest: Request JSON
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	PutTemplate(templateId string, templatePutRequest TemplatePutRequest, resp ...*http.Response) (*TemplateResponse, error)
	/*
		ReactivatePipeline - Reactivate a pipeline
		Parameters:
			id: Pipeline UUID to reactivate
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ReactivatePipeline(id string, resp ...*http.Response) (*PipelineReactivateResponse, error)
	/*
		StartPreview - Creates a preview session for a pipeline.
		Parameters:
			previewSessionStartRequest: Parameters to start a new Preview session
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	StartPreview(previewSessionStartRequest PreviewSessionStartRequest, resp ...*http.Response) (*PreviewStartResponse, error)
	/*
		StopPreview - Stops a preview session.
		Parameters:
			previewSessionId: ID of the preview session
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	StopPreview(previewSessionId int64, resp ...*http.Response) (*string, error)
	/*
		UpdateConnection - Partially modifies an existing DSP connection.
		Parameters:
			connectionId: ID of the connection
			connectionPatchRequest: Request JSON
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	UpdateConnection(connectionId string, connectionPatchRequest ConnectionPatchRequest, resp ...*http.Response) (*ConnectionSaveResponse, error)
	/*
		UpdateGroup - Modify a group function by combining the Streams JSON of two or more functions.
		Parameters:
			groupId: The group function's ID from the function registry
			groupPatchRequest: Request JSON
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	UpdateGroup(groupId string, groupPatchRequest GroupPatchRequest, resp ...*http.Response) (*GroupResponse, error)
	/*
		UpdatePipeline - Partially modifies an existing pipeline.
		Parameters:
			id: id of the pipeline to update
			pipelinePatchRequest: Request JSON
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	UpdatePipeline(id string, pipelinePatchRequest PipelinePatchRequest, resp ...*http.Response) (*PipelineResponse, error)
	/*
		UpdateTemplate - Partially modifies an existing template.
		Parameters:
			templateId: ID of the template
			templatePatchRequest: Request JSON
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	UpdateTemplate(templateId string, templatePatchRequest TemplatePatchRequest, resp ...*http.Response) (*TemplateResponse, error)
	/*
		ValidatePipeline - Verifies whether the Streams JSON is valid.
		Parameters:
			validateRequest: JSON UPL to validate
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ValidatePipeline(validateRequest ValidateRequest, resp ...*http.Response) (*ValidateResponse, error)
}
