// Package streams -- generated by scloudgen
// !! DO NOT EDIT !!
//
package streams

import (
	"encoding/json"
	"io/ioutil"

	"github.com/splunk/splunk-cloud-sdk-go/cmd/scloud_generated/auth"
	model "github.com/splunk/splunk-cloud-sdk-go/services/streams"
)

// CreatePipeline
func CreatePipelineOverride(filename string) (*model.PipelineResponse, error) {
	client, err := auth.GetClient()
	if err != nil {
		return nil, err
	}

	byets, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var data model.PipelineRequest
	err = json.Unmarshal(byets, &data)
	if err != nil {
		return nil, err
	}

	resp, err := client.StreamsService.CreatePipeline(data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// ExpandPipelineOverride
func ExpandPipelineOverride(filename string) (*model.UplPipeline, error) {
	client, err := auth.GetClient()
	if err != nil {
		return nil, err
	}

	byets, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var data model.UplPipeline
	err = json.Unmarshal(byets, &data)
	if err != nil {
		return nil, err
	}

	resp, err := client.StreamsService.ExpandPipeline(data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// GetGroupOverride
func PutGroupOverride(groupId string, filename string) (*model.GroupResponse, error) {
	client, err := auth.GetClient()
	if err != nil {
		return nil, err
	}

	byets, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var data model.GroupPutRequest
	err = json.Unmarshal(byets, &data)
	if err != nil {
		return nil, err
	}

	resp, err := client.StreamsService.PutGroup(groupId, data)
	if err != nil {
		return nil, err
	}
	return resp, nil

}

// PutTemplateOverride
func PutTemplateOverride(templateId string, filename string) (*model.TemplateResponse, error) {
	client, err := auth.GetClient()
	if err != nil {
		return nil, err
	}

	byets, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var data model.TemplatePutRequest
	err = json.Unmarshal(byets, &data)
	if err != nil {
		return nil, err
	}

	resp, err := client.StreamsService.PutTemplate(templateId, data)
	if err != nil {
		return nil, err
	}
	return resp, nil

}

// StartPreviewOverride
func StartPreviewOverride(filename string) (*model.PreviewStartResponse, error) {
	client, err := auth.GetClient()
	if err != nil {
		return nil, err
	}

	byets, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var data model.PreviewSessionStartRequest
	err = json.Unmarshal(byets, &data)
	if err != nil {
		return nil, err
	}

	resp, err := client.StreamsService.StartPreview(data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// UpdateGroupOverride
func UpdateGroupOverride(groupId string, filename string) (*model.GroupResponse, error) {
	client, err := auth.GetClient()
	if err != nil {
		return nil, err
	}

	byets, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var data model.GroupPatchRequest
	err = json.Unmarshal(byets, &data)
	if err != nil {
		return nil, err
	}

	resp, err := client.StreamsService.UpdateGroup(groupId, data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// UpdatePipelineOverride
func UpdatePipelineOverride(id string, filename string) (*model.PipelineResponse, error) {
	client, err := auth.GetClient()
	if err != nil {
		return nil, err
	}

	byets, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var data model.PipelinePatchRequest
	err = json.Unmarshal(byets, &data)
	if err != nil {
		return nil, err
	}

	resp, err := client.StreamsService.UpdatePipeline(id, data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// UpdateTemplateOverride
func UpdateTemplateOverride(templateId string, filename string) (*model.TemplateResponse, error) {
	client, err := auth.GetClient()
	if err != nil {
		return nil, err
	}

	byets, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var data model.TemplatePatchRequest
	err = json.Unmarshal(byets, &data)
	if err != nil {
		return nil, err
	}

	resp, err := client.StreamsService.UpdateTemplate(templateId, data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// ValidatePipelineOverride
func ValidatePipelineOverride(filename string) (*model.ValidateResponse, error) {
	client, err := auth.GetClient()
	if err != nil {
		return nil, err
	}

	byets, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var data model.ValidateRequest
	err = json.Unmarshal(byets, &data)
	if err != nil {
		return nil, err
	}

	resp, err := client.StreamsService.ValidatePipeline(data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// CompileDSLOverride
func CompileDSLOverride(filename string) (*model.UplPipeline, error) {
	client, err := auth.GetClient()
	if err != nil {
		return nil, err
	}

	byets, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var data model.DslCompilationRequest
	err = json.Unmarshal(byets, &data)
	if err != nil {
		return nil, err
	}

	resp, err := client.StreamsService.CompileDSL(data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// CompileSPLOverride
func CompileSPLOverride(filename string) (*model.UplPipeline, error) {
	client, err := auth.GetClient()
	if err != nil {
		return nil, err
	}

	byets, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var data model.SplCompileRequest
	err = json.Unmarshal(byets, &data)
	if err != nil {
		return nil, err
	}

	resp, err := client.StreamsService.CompileSPL(data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// CreateTemplateOverride
func CreateTemplateOverride(filename string) (*model.TemplateResponse, error) {
	client, err := auth.GetClient()
	if err != nil {
		return nil, err
	}

	byets, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var data model.TemplateRequest
	err = json.Unmarshal(byets, &data)
	if err != nil {
		return nil, err
	}

	resp, err := client.StreamsService.CreateTemplate(data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// MergePipelinesOverride
func MergePipelinesOverride(filename string) (*model.UplPipeline, error) {
	client, err := auth.GetClient()
	if err != nil {
		return nil, err
	}

	byets, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var data model.PipelinesMergeRequest
	err = json.Unmarshal(byets, &data)
	if err != nil {
		return nil, err
	}

	resp, err := client.StreamsService.MergePipelines(data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// PutConnectionOverride
func PutConnectionOverride(id string, filename string) (*model.ConnectionSaveResponse, error) {
	client, err := auth.GetClient()
	if err != nil {
		return nil, err
	}

	byets, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var data model.ConnectionPutRequest
	err = json.Unmarshal(byets, &data)
	if err != nil {
		return nil, err
	}

	resp, err := client.StreamsService.PutConnection(id, data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// PutConnectionOverride
func CreateGroupOverride(filename string) (*model.GroupResponse, error) {
	client, err := auth.GetClient()
	if err != nil {
		return nil, err
	}

	byets, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var data model.GroupRequest
	err = json.Unmarshal(byets, &data)
	if err != nil {
		return nil, err
	}

	resp, err := client.StreamsService.CreateGroup(data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// PutConnectionOverride
func GetOutputSchemaOverride(filename string) (map[string]model.UplType, error) {
	client, err := auth.GetClient()
	if err != nil {
		return nil, err
	}

	byets, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var data model.GetOutputSchemaRequest
	err = json.Unmarshal(byets, &data)
	if err != nil {
		return nil, err
	}

	resp, err := client.StreamsService.GetOutputSchema(data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// PutConnectionOverride
func GetInputSchemaOverride(filename string) (*model.UplType, error) {
	client, err := auth.GetClient()
	if err != nil {
		return nil, err
	}

	byets, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var data model.GetInputSchemaRequest
	err = json.Unmarshal(byets, &data)
	if err != nil {
		return nil, err
	}

	resp, err := client.StreamsService.GetInputSchema(data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// UpdateConnectionOverride
func UpdateConnectionOverride(id string, filename string) (*model.ConnectionSaveResponse, error) {
	client, err := auth.GetClient()
	if err != nil {
		return nil, err
	}

	byets, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var data model.ConnectionPatchRequest
	err = json.Unmarshal(byets, &data)
	if err != nil {
		return nil, err
	}

	resp, err := client.StreamsService.UpdateConnection(id, data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
