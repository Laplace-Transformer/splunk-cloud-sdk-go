// Package ingest -- generated by scloudgen
// !! DO NOT EDIT !!
//
package ingest

import (
	"github.com/spf13/cobra"
	impl "github.com/splunk/splunk-cloud-sdk-go/cmd/scloud_generated/pkg/ingest"
)

// postEvents -- Sends events.
var postEventsCmd = &cobra.Command{
	Use:   "post-events",
	Short: "Sends events.",
	RunE:  impl.PostEvents,
}

// postMetrics -- Sends metric events.
var postMetricsCmd = &cobra.Command{
	Use:   "post-metrics",
	Short: "Sends metric events.",
	RunE:  impl.PostMetrics,
}

// uploadFiles -- Upload a CSV or text file that contains events.
var uploadFilesCmd = &cobra.Command{
	Use:   "upload-files",
	Short: "Upload a CSV or text file that contains events.",
	RunE:  impl.UploadFiles,
}

func init() {
	ingestCmd.AddCommand(postEventsCmd)

	var postEventsAttributes string
	postEventsCmd.Flags().StringVar(&postEventsAttributes, "attributes", "", "Specifies a JSON object that contains explicit custom fields to be defined at index time.")

	var postEventsFormat string
	postEventsCmd.Flags().StringVar(&postEventsFormat, "format", "", "The format of the event. Can accept values raw, json or event. The default is raw.")

	var postEventsHost string
	postEventsCmd.Flags().StringVar(&postEventsHost, "host", "", "The host value assigned to the event data. Typically, this is the hostname of the client from which you are sending data.")

	var postEventsId string
	postEventsCmd.Flags().StringVar(&postEventsId, "id", "", "An optional ID that uniquely identifies the event data. It is used to deduplicate the data if same data is set multiple times. If ID is not specified, it will be assigned by the system.")

	var postEventsNanos int32
	postEventsCmd.Flags().Int32Var(&postEventsNanos, "nanos", 0, "Optional nanoseconds part of the timestamp.")

	var postEventsSource string
	postEventsCmd.Flags().StringVar(&postEventsSource, "source", "", "The source value to assign to the event data. For example, if you are sending data from an app that you are developing, set this key to the name of the app.")

	var postEventsSourcetype string
	postEventsCmd.Flags().StringVar(&postEventsSourcetype, "sourcetype", "", "The sourcetype value assigned to the event data.")

	var postEventsTimestamp int64
	postEventsCmd.Flags().Int64Var(&postEventsTimestamp, "timestamp", 0, "Epoch time in milliseconds.")

	ingestCmd.AddCommand(postMetricsCmd)

	var postMetricsDefaultDimensions string
	postMetricsCmd.Flags().StringVar(&postMetricsDefaultDimensions, "default-dimensions", "", "Optional. If set, individual metrics inherit these dimensions and can override any and/or all of them.")

	var postMetricsDefaultType string
	postMetricsCmd.Flags().StringVar(&postMetricsDefaultType, "default-type", "", "Optional. If set, individual metrics inherit this type and can optionally override.")

	var postMetricsDefaultUnit string
	postMetricsCmd.Flags().StringVar(&postMetricsDefaultUnit, "default-unit", "", "Optional. If set, individual metrics inherit this unit and can optionally override.")

	var postMetricsHost string
	postMetricsCmd.Flags().StringVar(&postMetricsHost, "host", "", "The host value assigned to the event data. Typically, this is the hostname of the client from which you are sending data.")

	var postMetricsId string
	postMetricsCmd.Flags().StringVar(&postMetricsId, "id", "", "An optional ID that uniquely identifies the metric data. It is used to deduplicate the data if same data is set multiple times. If ID is not specified, it will be assigned by the system.")

	var postMetricsNanos int32
	postMetricsCmd.Flags().Int32Var(&postMetricsNanos, "nanos", 0, "Optional nanoseconds part of the timestamp.")

	var postMetricsSource string
	postMetricsCmd.Flags().StringVar(&postMetricsSource, "source", "", "The source value to assign to the event data. For example, if you are sending data from an app that you are developing, set this key to the name of the app.")

	var postMetricsSourcetype string
	postMetricsCmd.Flags().StringVar(&postMetricsSourcetype, "sourcetype", "", "The sourcetype value assigned to the event data.")

	var postMetricsTimestamp int64
	postMetricsCmd.Flags().Int64Var(&postMetricsTimestamp, "timestamp", 0, "Epoch time in milliseconds.")

	ingestCmd.AddCommand(uploadFilesCmd)

	var uploadFilesFileName string
	uploadFilesCmd.Flags().StringVar(&uploadFilesFileName, "file-name", "", "File to ingest data from.")

}
