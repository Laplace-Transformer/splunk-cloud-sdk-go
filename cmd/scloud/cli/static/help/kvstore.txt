Use Splunk Cloud CLI commands with the KV Store service to perform lookup 
operations.


SYNTAX

    scloud [-u <username>] [-p <password>] [-tenant <tenant>] [-no-prompt] 
        kvstore <subcommand> [params]


SUBCOMMANDS

    create-index <collection-name> [-index <index-name>] [-field=<field-name:dir>]
        Create an index for the specified collection, index, and fields.

        Arguments:
            <collection-name>
                The collection name.

            -index <index-name>
                The name of the index.

            -field=<field-name:dir>
                One or more fields for the index with the direction. Use the 
                format "-field=field-name:direction".

    delete-index <collection-name> <index-name>
        Delete an index for the specified collection and index.

        Arguments:
            <collection-name>
                The collection name.

            <index-name>
                The index name.

    delete-record <collection-name> <key>
        Delete a record for the specified collection and key.

        Arguments:
            <collection-name>
                The collection name.

            <key>
                The record key.

    delete-records <collection-name> [-query <query-string>]
        Delete all records for the specified collection.

        Arguments:
            <collection-name>
                The collection name.

            -query <query-string>
                The JSON query string to filter on.

    get-record <collection-name> <key>
        Get a record by key for the specified collection.

        Arguments:
            <collection-name>
                The collection name.

            <key>
                The record key.

    get-health-status
        Display a health status response from the database.

    get-spec-json
        Display the OpenAPI spec for the KV Store service in JSON format.

    get-spec-yaml
        Display the OpenAPI spec for the KV Store service in YAML format.

    insert-batch-records <collection-name>
        Create multiple records in the specified collection from standard input.

        Arguments:
            <collection-name>
                The collection name.

    insert-record <collection-name> <json-record>
        Create a record in the specified collection.

        Arguments:
            <collection-name>
                The collection name.

            <json-record>
                The record in JSON format.

    list-indexes <collection-name>
        Display all indexes in the specified collection.

        Arguments:
            <collection-name>
                The collection name.

    list-records <collection-name> [-field <field-name>] [-count <integer>] 
    [-offset <integer>] [-order-by <field-name>]
        Display the records in a collection with optional filters.

        Arguments:
            <collection-name>
                The collection name.

            -field <field-name> 
                Display records that contain the specified field. Specify this
                option for each field to filter on.

            -count <integer>
                The maximum number of records to return.

            -offset <integer>
                The number of records to skip from the start.

            -order-by <field-name>
                The name of the field to sort by.

    query <collection-name> [-field <field-name>] [-count <integer>] 
    [-offset <integer>] [-order-by <field-name>] [-json <query-string>]
        Display the records in a collection matching optional filters and JSON 
        query string.

        Arguments:
            <collection-name>
                The collection name.

            -field <field-name> 
                Display records that contain the specified field. Specify this
                option for each field to filter on.

            -count <integer>
                The maximum number of records to return.

            -offset <integer>
                The number of records to skip from the start.

            -order-by <field-name>
                The name of the field to sort by.

            -json <query-string>
                The JSON query string to filter on.


EXAMPLES

    Create a new index:
        $ scloud kvstore create-index devtest_collection -index=idx -field=f1:1 -field=f2:1
        {
            "collection": "devtest_collection",
            "fields": [
                {
                    "direction": 1,
                    "field": "f1"
                },
                {
                    "direction": 1,
                    "field": "f2"
                }
            ],
            "name": "idx"
        }

    List the indexes:
        $ scloud kvstore list-indexes devtest_collection
        [
            {
                "name": "idx",
                "fields": [
                    {
                        "direction": 1,
                        "field": "f1"
                    },
                    {
                        "direction": 1,
                        "field": "f2"
                    }
                ]
                },

        ]

    Delete an index:
        $ scloud kvstore delete-index devtest_collection testidx

    Insert a record:
        $ scloud kvstore insert-record devtest_collection '{"capacity_gb": "8", "size": "tiny", "description": "This is a tiny amount of GB", "_raw": ""}'
        {
            "_key": "5b920839c066af0001a19138"
        }

    Insert batch records from standard input (on *nix):
        $ tail examples/data/kvstore/records.txt | scloud kvstore insert-batch-records kvtest1

    List records:
        $ scloud kvstore list-records devtest_collection
        ...

    Query records:
        $ scloud kvstore query devtest_collection
        ...

        $ scloud kvstore query devtest_collection -json '{"noodle": 76}'
        ...

        $ scloud kvstore query devtest_collection -field=noodle
        ...

        $ scloud kvstore query devtest_collection -field=noodle -field=_key
        ...

    Delete record by key:
        $ scloud kvstore delete-record devtest_collection 5ba93ac5fea481000158f068

    Delete records with matching json query:
        $ scloud kvstore delete-records devtest_collection -json='{"ned": "stark"}'
