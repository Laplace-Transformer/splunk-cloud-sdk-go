// Package ml -- generated by scloudgen
// !! DO NOT EDIT !!
//
package ml

import (
	"fmt"

	"github.com/spf13/cobra"
	"github.com/splunk/splunk-cloud-sdk-go/cmd/scloud/auth"
	"github.com/splunk/splunk-cloud-sdk-go/cmd/scloud/flags"
	"github.com/splunk/splunk-cloud-sdk-go/cmd/scloud/jsonx"
	model "github.com/splunk/splunk-cloud-sdk-go/services/ml"
)

// CreateWorkflow Creates a workflow configuration.
func CreateWorkflow(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var tasks []model.Task
	err = flags.ParseFlag(cmd.Flags(), "tasks", &tasks)
	if err != nil {
		return fmt.Errorf(`error parsing "tasks": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.Workflow{

		Name:  name,
		Tasks: tasks,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.MachineLearningService.CreateWorkflow(generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateWorkflowBuild Creates a workflow build.
func CreateWorkflowBuild(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var input model.InputData
	err = flags.ParseFlag(cmd.Flags(), "input", &input)
	if err != nil {
		return fmt.Errorf(`error parsing "input": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var nameWorkflowDefault string
	nameWorkflow := &nameWorkflowDefault
	err = flags.ParseFlag(cmd.Flags(), "name-workflow", &nameWorkflow)
	if err != nil {
		return fmt.Errorf(`error parsing "name-workflow": ` + err.Error())
	}
	var outputDefault model.OutputData
	output := &outputDefault
	err = flags.ParseFlag(cmd.Flags(), "output", &output)
	if err != nil {
		return fmt.Errorf(`error parsing "output": ` + err.Error())
	}
	var tasks []model.Task
	err = flags.ParseFlag(cmd.Flags(), "tasks", &tasks)
	if err != nil {
		return fmt.Errorf(`error parsing "tasks": ` + err.Error())
	}
	var timeoutSecsDefault int32
	timeoutSecs := &timeoutSecsDefault
	err = flags.ParseFlag(cmd.Flags(), "timeout-secs", &timeoutSecs)
	if err != nil {
		return fmt.Errorf(`error parsing "timeout-secs": ` + err.Error())
	}
	var trainingScoreDefault model.Score
	trainingScore := &trainingScoreDefault
	err = flags.ParseFlag(cmd.Flags(), "training-score", &trainingScore)
	if err != nil {
		return fmt.Errorf(`error parsing "training-score": ` + err.Error())
	}
	var validationOptionDefault model.WorkflowBuildValidationOption
	validationOption := &validationOptionDefault
	err = flags.ParseFlag(cmd.Flags(), "validation-option", &validationOption)
	if err != nil {
		return fmt.Errorf(`error parsing "validation-option": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.WorkflowBuild{

		Input:            input,
		Name:             name,
		Output:           output,
		TimeoutSecs:      timeoutSecs,
		TrainingScore:    trainingScore,
		ValidationOption: validationOption,
		Workflow: &model.Workflow{
			Name:  nameWorkflow,
			Tasks: tasks,
		},
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.MachineLearningService.CreateWorkflowBuild(id, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateWorkflowDeployment Creates a workflow deployment.
func CreateWorkflowDeployment(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var buildId string
	err = flags.ParseFlag(cmd.Flags(), "build-id", &buildId)
	if err != nil {
		return fmt.Errorf(`error parsing "build-id": ` + err.Error())
	}
	var cpuLimitDefault string
	cpuLimit := &cpuLimitDefault
	err = flags.ParseFlag(cmd.Flags(), "cpu-limit", &cpuLimit)
	if err != nil {
		return fmt.Errorf(`error parsing "cpu-limit": ` + err.Error())
	}
	var cpuRequestDefault string
	cpuRequest := &cpuRequestDefault
	err = flags.ParseFlag(cmd.Flags(), "cpu-request", &cpuRequest)
	if err != nil {
		return fmt.Errorf(`error parsing "cpu-request": ` + err.Error())
	}
	var endTimeDefault string
	endTime := &endTimeDefault
	err = flags.ParseFlag(cmd.Flags(), "end-time", &endTime)
	if err != nil {
		return fmt.Errorf(`error parsing "end-time": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var memoryLimitDefault string
	memoryLimit := &memoryLimitDefault
	err = flags.ParseFlag(cmd.Flags(), "memory-limit", &memoryLimit)
	if err != nil {
		return fmt.Errorf(`error parsing "memory-limit": ` + err.Error())
	}
	var memoryRequestDefault string
	memoryRequest := &memoryRequestDefault
	err = flags.ParseFlag(cmd.Flags(), "memory-request", &memoryRequest)
	if err != nil {
		return fmt.Errorf(`error parsing "memory-request": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var replicasDefault int32
	replicas := &replicasDefault
	err = flags.ParseFlag(cmd.Flags(), "replicas", &replicas)
	if err != nil {
		return fmt.Errorf(`error parsing "replicas": ` + err.Error())
	}
	var startTimeDefault string
	startTime := &startTimeDefault
	err = flags.ParseFlag(cmd.Flags(), "start-time", &startTime)
	if err != nil {
		return fmt.Errorf(`error parsing "start-time": ` + err.Error())
	}
	var workflowBuildDefault model.WorkflowBuild
	workflowBuild := &workflowBuildDefault
	err = flags.ParseFlag(cmd.Flags(), "workflow-build", &workflowBuild)
	if err != nil {
		return fmt.Errorf(`error parsing "workflow-build": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.WorkflowDeployment{

		EndTime: endTime,
		Name:    name,
		Spec: model.DeploymentSpec{
			CpuLimit:      cpuLimit,
			CpuRequest:    cpuRequest,
			MemoryLimit:   memoryLimit,
			MemoryRequest: memoryRequest,
			Replicas:      replicas,
		},
		StartTime:     startTime,
		WorkflowBuild: workflowBuild,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.MachineLearningService.CreateWorkflowDeployment(id, buildId, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateWorkflowInference Creates a workflow inference request.
func CreateWorkflowInference(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var buildId string
	err = flags.ParseFlag(cmd.Flags(), "build-id", &buildId)
	if err != nil {
		return fmt.Errorf(`error parsing "build-id": ` + err.Error())
	}
	var deploymentId string
	err = flags.ParseFlag(cmd.Flags(), "deployment-id", &deploymentId)
	if err != nil {
		return fmt.Errorf(`error parsing "deployment-id": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var input string
	err = flags.ParseFlag(cmd.Flags(), "input", &input)
	if err != nil {
		return fmt.Errorf(`error parsing "input": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.WorkflowInference{

		Input: input,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.MachineLearningService.CreateWorkflowInference(id, buildId, deploymentId, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateWorkflowRun Creates a workflow run.
func CreateWorkflowRun(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var buildId string
	err = flags.ParseFlag(cmd.Flags(), "build-id", &buildId)
	if err != nil {
		return fmt.Errorf(`error parsing "build-id": ` + err.Error())
	}
	var evaluateDefault bool
	evaluate := &evaluateDefault
	err = flags.ParseFlag(cmd.Flags(), "evaluate", &evaluate)
	if err != nil {
		return fmt.Errorf(`error parsing "evaluate": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var input model.InputData
	err = flags.ParseFlag(cmd.Flags(), "input", &input)
	if err != nil {
		return fmt.Errorf(`error parsing "input": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var output model.OutputData
	err = flags.ParseFlag(cmd.Flags(), "output", &output)
	if err != nil {
		return fmt.Errorf(`error parsing "output": ` + err.Error())
	}
	var predictionScoreDefault model.Score
	predictionScore := &predictionScoreDefault
	err = flags.ParseFlag(cmd.Flags(), "prediction-score", &predictionScore)
	if err != nil {
		return fmt.Errorf(`error parsing "prediction-score": ` + err.Error())
	}
	var timeoutSecsDefault int32
	timeoutSecs := &timeoutSecsDefault
	err = flags.ParseFlag(cmd.Flags(), "timeout-secs", &timeoutSecs)
	if err != nil {
		return fmt.Errorf(`error parsing "timeout-secs": ` + err.Error())
	}
	var workflowBuildDefault model.WorkflowBuild
	workflowBuild := &workflowBuildDefault
	err = flags.ParseFlag(cmd.Flags(), "workflow-build", &workflowBuild)
	if err != nil {
		return fmt.Errorf(`error parsing "workflow-build": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.WorkflowRun{

		Evaluate:        evaluate,
		Input:           input,
		Name:            name,
		Output:          output,
		PredictionScore: predictionScore,
		TimeoutSecs:     timeoutSecs,
		WorkflowBuild:   workflowBuild,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.MachineLearningService.CreateWorkflowRun(id, buildId, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateWorkflowStreamDeployment Creates a workflow streaming deployment.
func CreateWorkflowStreamDeployment(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var buildId string
	err = flags.ParseFlag(cmd.Flags(), "build-id", &buildId)
	if err != nil {
		return fmt.Errorf(`error parsing "build-id": ` + err.Error())
	}
	var cpuLimitDefault string
	cpuLimit := &cpuLimitDefault
	err = flags.ParseFlag(cmd.Flags(), "cpu-limit", &cpuLimit)
	if err != nil {
		return fmt.Errorf(`error parsing "cpu-limit": ` + err.Error())
	}
	var cpuRequestDefault string
	cpuRequest := &cpuRequestDefault
	err = flags.ParseFlag(cmd.Flags(), "cpu-request", &cpuRequest)
	if err != nil {
		return fmt.Errorf(`error parsing "cpu-request": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var input model.InputStream
	err = flags.ParseFlag(cmd.Flags(), "input", &input)
	if err != nil {
		return fmt.Errorf(`error parsing "input": ` + err.Error())
	}
	var memoryLimitDefault string
	memoryLimit := &memoryLimitDefault
	err = flags.ParseFlag(cmd.Flags(), "memory-limit", &memoryLimit)
	if err != nil {
		return fmt.Errorf(`error parsing "memory-limit": ` + err.Error())
	}
	var memoryRequestDefault string
	memoryRequest := &memoryRequestDefault
	err = flags.ParseFlag(cmd.Flags(), "memory-request", &memoryRequest)
	if err != nil {
		return fmt.Errorf(`error parsing "memory-request": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var output model.OutputStream
	err = flags.ParseFlag(cmd.Flags(), "output", &output)
	if err != nil {
		return fmt.Errorf(`error parsing "output": ` + err.Error())
	}
	var replicasDefault int32
	replicas := &replicasDefault
	err = flags.ParseFlag(cmd.Flags(), "replicas", &replicas)
	if err != nil {
		return fmt.Errorf(`error parsing "replicas": ` + err.Error())
	}
	var workflowBuildDefault model.WorkflowBuild
	workflowBuild := &workflowBuildDefault
	err = flags.ParseFlag(cmd.Flags(), "workflow-build", &workflowBuild)
	if err != nil {
		return fmt.Errorf(`error parsing "workflow-build": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.WorkflowStreamDeployment{

		Input:  input,
		Name:   name,
		Output: output,
		Spec: &model.DeploymentSpec{
			CpuLimit:      cpuLimit,
			CpuRequest:    cpuRequest,
			MemoryLimit:   memoryLimit,
			MemoryRequest: memoryRequest,
			Replicas:      replicas,
		},
		WorkflowBuild: workflowBuild,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.MachineLearningService.CreateWorkflowStreamDeployment(id, buildId, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// DeleteWorkflow Removes a workflow configuration.
func DeleteWorkflow(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	err = client.MachineLearningService.DeleteWorkflow(id)
	if err != nil {
		return err
	}

	return nil
}

// DeleteWorkflowBuild Removes a workflow build.
func DeleteWorkflowBuild(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var buildId string
	err = flags.ParseFlag(cmd.Flags(), "build-id", &buildId)
	if err != nil {
		return fmt.Errorf(`error parsing "build-id": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	err = client.MachineLearningService.DeleteWorkflowBuild(id, buildId)
	if err != nil {
		return err
	}

	return nil
}

// DeleteWorkflowDeployment Removes a workflow deployment.
func DeleteWorkflowDeployment(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var buildId string
	err = flags.ParseFlag(cmd.Flags(), "build-id", &buildId)
	if err != nil {
		return fmt.Errorf(`error parsing "build-id": ` + err.Error())
	}
	var deploymentId string
	err = flags.ParseFlag(cmd.Flags(), "deployment-id", &deploymentId)
	if err != nil {
		return fmt.Errorf(`error parsing "deployment-id": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	err = client.MachineLearningService.DeleteWorkflowDeployment(id, buildId, deploymentId)
	if err != nil {
		return err
	}

	return nil
}

// DeleteWorkflowRun Removes a workflow run.
func DeleteWorkflowRun(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var buildId string
	err = flags.ParseFlag(cmd.Flags(), "build-id", &buildId)
	if err != nil {
		return fmt.Errorf(`error parsing "build-id": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var runId string
	err = flags.ParseFlag(cmd.Flags(), "run-id", &runId)
	if err != nil {
		return fmt.Errorf(`error parsing "run-id": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	err = client.MachineLearningService.DeleteWorkflowRun(id, buildId, runId)
	if err != nil {
		return err
	}

	return nil
}

// DeleteWorkflowStreamDeployment Removes a workflow streaming deployment.
func DeleteWorkflowStreamDeployment(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var buildId string
	err = flags.ParseFlag(cmd.Flags(), "build-id", &buildId)
	if err != nil {
		return fmt.Errorf(`error parsing "build-id": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var streamDeploymentId string
	err = flags.ParseFlag(cmd.Flags(), "stream-deployment-id", &streamDeploymentId)
	if err != nil {
		return fmt.Errorf(`error parsing "stream-deployment-id": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	err = client.MachineLearningService.DeleteWorkflowStreamDeployment(id, buildId, streamDeploymentId)
	if err != nil {
		return err
	}

	return nil
}

// GetWorkflow Returns a workflow configuration.
func GetWorkflow(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.MachineLearningService.GetWorkflow(id)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetWorkflowBuild Returns the status of a workflow build.
func GetWorkflowBuild(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var buildId string
	err = flags.ParseFlag(cmd.Flags(), "build-id", &buildId)
	if err != nil {
		return fmt.Errorf(`error parsing "build-id": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.MachineLearningService.GetWorkflowBuild(id, buildId)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetWorkflowBuildError Returns a list of workflow errors.
func GetWorkflowBuildError(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var buildId string
	err = flags.ParseFlag(cmd.Flags(), "build-id", &buildId)
	if err != nil {
		return fmt.Errorf(`error parsing "build-id": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.MachineLearningService.GetWorkflowBuildError(id, buildId)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetWorkflowBuildLog Returns the logs from a workflow build.
func GetWorkflowBuildLog(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var buildId string
	err = flags.ParseFlag(cmd.Flags(), "build-id", &buildId)
	if err != nil {
		return fmt.Errorf(`error parsing "build-id": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.MachineLearningService.GetWorkflowBuildLog(id, buildId)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetWorkflowDeployment Returns the status of a workflow deployment.
func GetWorkflowDeployment(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var buildId string
	err = flags.ParseFlag(cmd.Flags(), "build-id", &buildId)
	if err != nil {
		return fmt.Errorf(`error parsing "build-id": ` + err.Error())
	}
	var deploymentId string
	err = flags.ParseFlag(cmd.Flags(), "deployment-id", &deploymentId)
	if err != nil {
		return fmt.Errorf(`error parsing "deployment-id": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.MachineLearningService.GetWorkflowDeployment(id, buildId, deploymentId)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetWorkflowDeploymentError Returns a list of workflow deployment errors.
func GetWorkflowDeploymentError(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var buildId string
	err = flags.ParseFlag(cmd.Flags(), "build-id", &buildId)
	if err != nil {
		return fmt.Errorf(`error parsing "build-id": ` + err.Error())
	}
	var deploymentId string
	err = flags.ParseFlag(cmd.Flags(), "deployment-id", &deploymentId)
	if err != nil {
		return fmt.Errorf(`error parsing "deployment-id": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.MachineLearningService.GetWorkflowDeploymentError(id, buildId, deploymentId)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetWorkflowDeploymentLog Returns the logs from a workflow deployment.
func GetWorkflowDeploymentLog(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var buildId string
	err = flags.ParseFlag(cmd.Flags(), "build-id", &buildId)
	if err != nil {
		return fmt.Errorf(`error parsing "build-id": ` + err.Error())
	}
	var deploymentId string
	err = flags.ParseFlag(cmd.Flags(), "deployment-id", &deploymentId)
	if err != nil {
		return fmt.Errorf(`error parsing "deployment-id": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.MachineLearningService.GetWorkflowDeploymentLog(id, buildId, deploymentId)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetWorkflowRun Returns the status of a workflow run.
func GetWorkflowRun(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var buildId string
	err = flags.ParseFlag(cmd.Flags(), "build-id", &buildId)
	if err != nil {
		return fmt.Errorf(`error parsing "build-id": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var runId string
	err = flags.ParseFlag(cmd.Flags(), "run-id", &runId)
	if err != nil {
		return fmt.Errorf(`error parsing "run-id": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.MachineLearningService.GetWorkflowRun(id, buildId, runId)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetWorkflowRunError Returns the errors for a workflow run.
func GetWorkflowRunError(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var buildId string
	err = flags.ParseFlag(cmd.Flags(), "build-id", &buildId)
	if err != nil {
		return fmt.Errorf(`error parsing "build-id": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var runId string
	err = flags.ParseFlag(cmd.Flags(), "run-id", &runId)
	if err != nil {
		return fmt.Errorf(`error parsing "run-id": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.MachineLearningService.GetWorkflowRunError(id, buildId, runId)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetWorkflowRunLog Returns the logs for a workflow run.
func GetWorkflowRunLog(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var buildId string
	err = flags.ParseFlag(cmd.Flags(), "build-id", &buildId)
	if err != nil {
		return fmt.Errorf(`error parsing "build-id": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var runId string
	err = flags.ParseFlag(cmd.Flags(), "run-id", &runId)
	if err != nil {
		return fmt.Errorf(`error parsing "run-id": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.MachineLearningService.GetWorkflowRunLog(id, buildId, runId)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetWorkflowStreamDeployment Returns the status of a workflow streaming deployment.
func GetWorkflowStreamDeployment(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var buildId string
	err = flags.ParseFlag(cmd.Flags(), "build-id", &buildId)
	if err != nil {
		return fmt.Errorf(`error parsing "build-id": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var streamDeploymentId string
	err = flags.ParseFlag(cmd.Flags(), "stream-deployment-id", &streamDeploymentId)
	if err != nil {
		return fmt.Errorf(`error parsing "stream-deployment-id": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.MachineLearningService.GetWorkflowStreamDeployment(id, buildId, streamDeploymentId)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListWorkflowBuilds Returns a list of workflow builds.
func ListWorkflowBuilds(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.MachineLearningService.ListWorkflowBuilds(id)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListWorkflowDeployments Returns a list of workflow deployments.
func ListWorkflowDeployments(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var buildId string
	err = flags.ParseFlag(cmd.Flags(), "build-id", &buildId)
	if err != nil {
		return fmt.Errorf(`error parsing "build-id": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.MachineLearningService.ListWorkflowDeployments(id, buildId)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListWorkflowRuns Returns a list of workflow runs.
func ListWorkflowRuns(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var buildId string
	err = flags.ParseFlag(cmd.Flags(), "build-id", &buildId)
	if err != nil {
		return fmt.Errorf(`error parsing "build-id": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.MachineLearningService.ListWorkflowRuns(id, buildId)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListWorkflows Returns a list of workflow configurations.
func ListWorkflows(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.MachineLearningService.ListWorkflows()
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}
