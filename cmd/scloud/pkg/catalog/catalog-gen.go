// Package catalog -- generated by scloudgen
// !! DO NOT EDIT !!
//
package catalog

import (
	"fmt"

	"github.com/spf13/cobra"
	"github.com/Laplace-Transformer/splunk-cloud-sdk-go/cmd/scloud/auth"
	"github.com/Laplace-Transformer/splunk-cloud-sdk-go/cmd/scloud/flags"
	"github.com/Laplace-Transformer/splunk-cloud-sdk-go/cmd/scloud/jsonx"
	model "github.com/Laplace-Transformer/splunk-cloud-sdk-go/services/catalog"
)

// CreateActionForRuleAliasAction Creates a new action for the specified rule by rule id or resource name.
func CreateActionForRuleAliasAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var alias string
	err = flags.ParseFlag(cmd.Flags(), "alias", &alias)
	if err != nil {
		return fmt.Errorf(`error parsing "alias": ` + err.Error())
	}
	var field string
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.AliasActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ruleidDefault string
	ruleid := &ruleidDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleresource string
	err = flags.ParseFlag(cmd.Flags(), "ruleresource", &ruleresource)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresource": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.AliasActionPost{

		Alias:   alias,
		Field:   field,
		Id:      id,
		Kind:    kind,
		Ruleid:  ruleid,
		Version: version,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.CreateActionForRule(ruleresource, model.MakeActionPostFromAliasActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleAutoKvAction Creates a new action for the specified rule by rule id or resource name.
func CreateActionForRuleAutoKvAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.AutoKvActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var mode string
	err = flags.ParseFlag(cmd.Flags(), "mode", &mode)
	if err != nil {
		return fmt.Errorf(`error parsing "mode": ` + err.Error())
	}
	var ruleidDefault string
	ruleid := &ruleidDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleresource string
	err = flags.ParseFlag(cmd.Flags(), "ruleresource", &ruleresource)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresource": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.AutoKvActionPost{

		Id:      id,
		Kind:    kind,
		Mode:    mode,
		Ruleid:  ruleid,
		Version: version,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.CreateActionForRule(ruleresource, model.MakeActionPostFromAutoKvActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleEvalAction Creates a new action for the specified rule by rule id or resource name.
func CreateActionForRuleEvalAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var expression string
	err = flags.ParseFlag(cmd.Flags(), "expression", &expression)
	if err != nil {
		return fmt.Errorf(`error parsing "expression": ` + err.Error())
	}
	var field string
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.EvalActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ruleidDefault string
	ruleid := &ruleidDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleresource string
	err = flags.ParseFlag(cmd.Flags(), "ruleresource", &ruleresource)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresource": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.EvalActionPost{

		Expression: expression,
		Field:      field,
		Id:         id,
		Kind:       kind,
		Ruleid:     ruleid,
		Version:    version,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.CreateActionForRule(ruleresource, model.MakeActionPostFromEvalActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleLookupAction Creates a new action for the specified rule by rule id or resource name.
func CreateActionForRuleLookupAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var expression string
	err = flags.ParseFlag(cmd.Flags(), "expression", &expression)
	if err != nil {
		return fmt.Errorf(`error parsing "expression": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.LookupActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ruleidDefault string
	ruleid := &ruleidDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleresource string
	err = flags.ParseFlag(cmd.Flags(), "ruleresource", &ruleresource)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresource": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.LookupActionPost{

		Expression: expression,
		Id:         id,
		Kind:       kind,
		Ruleid:     ruleid,
		Version:    version,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.CreateActionForRule(ruleresource, model.MakeActionPostFromLookupActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleRegexAction Creates a new action for the specified rule by rule id or resource name.
func CreateActionForRuleRegexAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var field string
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.RegexActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var limitDefault int32
	limit := &limitDefault
	err = flags.ParseFlag(cmd.Flags(), "limit", &limit)
	if err != nil {
		return fmt.Errorf(`error parsing "limit": ` + err.Error())
	}
	var pattern string
	err = flags.ParseFlag(cmd.Flags(), "pattern", &pattern)
	if err != nil {
		return fmt.Errorf(`error parsing "pattern": ` + err.Error())
	}
	var ruleidDefault string
	ruleid := &ruleidDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleresource string
	err = flags.ParseFlag(cmd.Flags(), "ruleresource", &ruleresource)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresource": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RegexActionPost{

		Field:   field,
		Id:      id,
		Kind:    kind,
		Limit:   limit,
		Pattern: pattern,
		Ruleid:  ruleid,
		Version: version,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.CreateActionForRule(ruleresource, model.MakeActionPostFromRegexActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateAnnotationForDashboard Creates a new annotation for the specified dashboard.
func CreateAnnotationForDashboard(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// CreateAnnotationForDataset Creates a new annotation for the specified dataset.
func CreateAnnotationForDataset(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// CreateDashboard Creates a new dashboard.
func CreateDashboard(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var definition string
	err = flags.ParseFlag(cmd.Flags(), "definition", &definition)
	if err != nil {
		return fmt.Errorf(`error parsing "definition": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var isactiveDefault bool
	isactive := &isactiveDefault
	err = flags.ParseFlag(cmd.Flags(), "isactive", &isactive)
	if err != nil {
		return fmt.Errorf(`error parsing "isactive": ` + err.Error())
	}
	var module string
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.DashboardPost{

		Definition: definition,
		Id:         id,
		Isactive:   isactive,
		Module:     module,
		Name:       name,
		Version:    version,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.CreateDashboard(generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetFederatedDataset Creates a new dataset.
func CreateDatasetFederatedDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var federatedConnection string
	err = flags.ParseFlag(cmd.Flags(), "federated-connection", &federatedConnection)
	if err != nil {
		return fmt.Errorf(`error parsing "federated-connection": ` + err.Error())
	}
	var federatedDataset string
	err = flags.ParseFlag(cmd.Flags(), "federated-dataset", &federatedDataset)
	if err != nil {
		return fmt.Errorf(`error parsing "federated-dataset": ` + err.Error())
	}
	var federatedDatasetKind string
	err = flags.ParseFlag(cmd.Flags(), "federated-dataset-kind", &federatedDatasetKind)
	if err != nil {
		return fmt.Errorf(`error parsing "federated-dataset-kind": ` + err.Error())
	}
	var fields []model.FieldPost
	err = flags.ParseFlag(cmd.Flags(), "fields", &fields)
	if err != nil {
		return fmt.Errorf(`error parsing "fields": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.FederatedDatasetKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.FederatedDatasetPost{

		FederatedConnection:  federatedConnection,
		FederatedDataset:     federatedDataset,
		FederatedDatasetKind: federatedDatasetKind,
		Fields:               fields,
		Id:                   id,
		Kind:                 kind,
		Module:               module,
		Name:                 name,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.CreateDataset(model.MakeDatasetPostFromFederatedDatasetPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetImport Creates a new dataset import using the ID or resource name of the imported dataset.
func CreateDatasetImport(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresource string
	err = flags.ParseFlag(cmd.Flags(), "datasetresource", &datasetresource)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresource": ` + err.Error())
	}
	var module string
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var owner string
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.DatasetImportedBy{

		Module: module,
		Name:   name,
		Owner:  owner,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.CreateDatasetImport(datasetresource, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetImportDataset Creates a new dataset.
func CreateDatasetImportDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Form the request body
	generated_request_body := model.ImportDatasetPost{}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.CreateDataset(model.MakeDatasetPostFromImportDatasetPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetIndexDataset Creates a new dataset.
func CreateDatasetIndexDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var disabled bool
	err = flags.ParseFlag(cmd.Flags(), "disabled", &disabled)
	if err != nil {
		return fmt.Errorf(`error parsing "disabled": ` + err.Error())
	}
	var fields []model.FieldPost
	err = flags.ParseFlag(cmd.Flags(), "fields", &fields)
	if err != nil {
		return fmt.Errorf(`error parsing "fields": ` + err.Error())
	}
	var frozenTimePeriodInSecsDefault int32
	frozenTimePeriodInSecs := &frozenTimePeriodInSecsDefault
	err = flags.ParseFlag(cmd.Flags(), "frozen-time-period-in-secs", &frozenTimePeriodInSecs)
	if err != nil {
		return fmt.Errorf(`error parsing "frozen-time-period-in-secs": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.IndexDatasetKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.IndexDatasetPost{

		Disabled:               disabled,
		Fields:                 fields,
		FrozenTimePeriodInSecs: frozenTimePeriodInSecs,
		Id:                     id,
		Kind:                   kind,
		Module:                 module,
		Name:                   name,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.CreateDataset(model.MakeDatasetPostFromIndexDatasetPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetKvCollectionDataset Creates a new dataset.
func CreateDatasetKvCollectionDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var fields []model.FieldPost
	err = flags.ParseFlag(cmd.Flags(), "fields", &fields)
	if err != nil {
		return fmt.Errorf(`error parsing "fields": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.KvCollectionDatasetKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.KvCollectionDatasetPost{

		Fields: fields,
		Id:     id,
		Kind:   kind,
		Module: module,
		Name:   name,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.CreateDataset(model.MakeDatasetPostFromKvCollectionDatasetPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetLookupDataset Creates a new dataset.
func CreateDatasetLookupDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var caseSensitiveMatchDefault bool
	caseSensitiveMatch := &caseSensitiveMatchDefault
	err = flags.ParseFlag(cmd.Flags(), "case-sensitive-match", &caseSensitiveMatch)
	if err != nil {
		return fmt.Errorf(`error parsing "case-sensitive-match": ` + err.Error())
	}
	var externalKind model.LookupDatasetExternalKind
	err = flags.ParseFlag(cmd.Flags(), "external-kind", &externalKind)
	if err != nil {
		return fmt.Errorf(`error parsing "external-kind": ` + err.Error())
	}
	var externalName string
	err = flags.ParseFlag(cmd.Flags(), "external-name", &externalName)
	if err != nil {
		return fmt.Errorf(`error parsing "external-name": ` + err.Error())
	}
	var fields []model.FieldPost
	err = flags.ParseFlag(cmd.Flags(), "fields", &fields)
	if err != nil {
		return fmt.Errorf(`error parsing "fields": ` + err.Error())
	}
	var filterDefault string
	filter := &filterDefault
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.LookupDatasetKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.LookupDatasetPost{

		CaseSensitiveMatch: caseSensitiveMatch,
		ExternalKind:       externalKind,
		ExternalName:       externalName,
		Fields:             fields,
		Filter:             filter,
		Id:                 id,
		Kind:               kind,
		Module:             module,
		Name:               name,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.CreateDataset(model.MakeDatasetPostFromLookupDatasetPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetMetricDataset Creates a new dataset.
func CreateDatasetMetricDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var disabled bool
	err = flags.ParseFlag(cmd.Flags(), "disabled", &disabled)
	if err != nil {
		return fmt.Errorf(`error parsing "disabled": ` + err.Error())
	}
	var fields []model.FieldPost
	err = flags.ParseFlag(cmd.Flags(), "fields", &fields)
	if err != nil {
		return fmt.Errorf(`error parsing "fields": ` + err.Error())
	}
	var frozenTimePeriodInSecsDefault int32
	frozenTimePeriodInSecs := &frozenTimePeriodInSecsDefault
	err = flags.ParseFlag(cmd.Flags(), "frozen-time-period-in-secs", &frozenTimePeriodInSecs)
	if err != nil {
		return fmt.Errorf(`error parsing "frozen-time-period-in-secs": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.MetricDatasetKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.MetricDatasetPost{

		Disabled:               disabled,
		Fields:                 fields,
		FrozenTimePeriodInSecs: frozenTimePeriodInSecs,
		Id:                     id,
		Kind:                   kind,
		Module:                 module,
		Name:                   name,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.CreateDataset(model.MakeDatasetPostFromMetricDatasetPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetViewDataset Creates a new dataset.
func CreateDatasetViewDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var fields []model.FieldPost
	err = flags.ParseFlag(cmd.Flags(), "fields", &fields)
	if err != nil {
		return fmt.Errorf(`error parsing "fields": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.ViewDatasetKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var search string
	err = flags.ParseFlag(cmd.Flags(), "search", &search)
	if err != nil {
		return fmt.Errorf(`error parsing "search": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.ViewDatasetPost{

		Fields: fields,
		Id:     id,
		Kind:   kind,
		Module: module,
		Name:   name,
		Search: search,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.CreateDataset(model.MakeDatasetPostFromViewDatasetPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateFieldForDataset Adds a new field to the dataset with the specified ID or resource name.
func CreateFieldForDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresource string
	err = flags.ParseFlag(cmd.Flags(), "datasetresource", &datasetresource)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresource": ` + err.Error())
	}
	var datatypeDefault model.FieldDataType
	datatype := &datatypeDefault
	err = flags.ParseFlag(cmd.Flags(), "datatype", &datatype)
	if err != nil {
		return fmt.Errorf(`error parsing "datatype": ` + err.Error())
	}
	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var fieldtypeDefault model.FieldType
	fieldtype := &fieldtypeDefault
	err = flags.ParseFlag(cmd.Flags(), "fieldtype", &fieldtype)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldtype": ` + err.Error())
	}
	var indexedDefault bool
	indexed := &indexedDefault
	err = flags.ParseFlag(cmd.Flags(), "indexed", &indexed)
	if err != nil {
		return fmt.Errorf(`error parsing "indexed": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var prevalenceDefault model.FieldPrevalence
	prevalence := &prevalenceDefault
	err = flags.ParseFlag(cmd.Flags(), "prevalence", &prevalence)
	if err != nil {
		return fmt.Errorf(`error parsing "prevalence": ` + err.Error())
	}
	var summaryDefault string
	summary := &summaryDefault
	err = flags.ParseFlag(cmd.Flags(), "summary", &summary)
	if err != nil {
		return fmt.Errorf(`error parsing "summary": ` + err.Error())
	}
	var titleDefault string
	title := &titleDefault
	err = flags.ParseFlag(cmd.Flags(), "title", &title)
	if err != nil {
		return fmt.Errorf(`error parsing "title": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.FieldPost{

		Datatype:    datatype,
		Description: description,
		Fieldtype:   fieldtype,
		Indexed:     indexed,
		Name:        name,
		Prevalence:  prevalence,
		Summary:     summary,
		Title:       title,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.CreateFieldForDataset(datasetresource, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateRelationship Creates a new relationship.
func CreateRelationship(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var fields []model.RelationshipFieldPost
	err = flags.ParseFlag(cmd.Flags(), "fields", &fields)
	if err != nil {
		return fmt.Errorf(`error parsing "fields": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.RelationshipKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var sourceidDefault string
	sourceid := &sourceidDefault
	err = flags.ParseFlag(cmd.Flags(), "sourceid", &sourceid)
	if err != nil {
		return fmt.Errorf(`error parsing "sourceid": ` + err.Error())
	}
	var sourceresourcenameDefault string
	sourceresourcename := &sourceresourcenameDefault
	err = flags.ParseFlag(cmd.Flags(), "sourceresourcename", &sourceresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "sourceresourcename": ` + err.Error())
	}
	var targetidDefault string
	targetid := &targetidDefault
	err = flags.ParseFlag(cmd.Flags(), "targetid", &targetid)
	if err != nil {
		return fmt.Errorf(`error parsing "targetid": ` + err.Error())
	}
	var targetresourcenameDefault string
	targetresourcename := &targetresourcenameDefault
	err = flags.ParseFlag(cmd.Flags(), "targetresourcename", &targetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "targetresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RelationshipPost{

		Fields:             fields,
		Id:                 id,
		Kind:               kind,
		Module:             module,
		Name:               name,
		Sourceid:           sourceid,
		Sourceresourcename: sourceresourcename,
		Targetid:           targetid,
		Targetresourcename: targetresourcename,
		Version:            version,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.CreateRelationship(generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateRule Creates a new rule.
func CreateRule(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actions []model.ActionPost
	err = flags.ParseFlag(cmd.Flags(), "actions", &actions)
	if err != nil {
		return fmt.Errorf(`error parsing "actions": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var match string
	err = flags.ParseFlag(cmd.Flags(), "match", &match)
	if err != nil {
		return fmt.Errorf(`error parsing "match": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RulePost{

		Actions: actions,
		Id:      id,
		Match:   match,
		Module:  module,
		Name:    name,
		Version: version,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.CreateRule(generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// DeleteActionByIdForRule Deletes the action with the specified ID that is associated with the specified rule.
func DeleteActionByIdForRule(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var ruleresource string
	err = flags.ParseFlag(cmd.Flags(), "ruleresource", &ruleresource)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresource": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	err = client.CatalogService.DeleteActionByIdForRule(ruleresource, actionid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteAnnotationOfDashboard Deletes the annotation with the speciifed ID that is associted with the specified dashboard.
func DeleteAnnotationOfDashboard(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var annotationid string
	err = flags.ParseFlag(cmd.Flags(), "annotationid", &annotationid)
	if err != nil {
		return fmt.Errorf(`error parsing "annotationid": ` + err.Error())
	}
	var dashboardresource string
	err = flags.ParseFlag(cmd.Flags(), "dashboardresource", &dashboardresource)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardresource": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	err = client.CatalogService.DeleteAnnotationOfDashboard(dashboardresource, annotationid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteAnnotationOfDataset Deletes the annotation with the specified ID that is associated with the specified dataset.
func DeleteAnnotationOfDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var annotationid string
	err = flags.ParseFlag(cmd.Flags(), "annotationid", &annotationid)
	if err != nil {
		return fmt.Errorf(`error parsing "annotationid": ` + err.Error())
	}
	var datasetresource string
	err = flags.ParseFlag(cmd.Flags(), "datasetresource", &datasetresource)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresource": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	err = client.CatalogService.DeleteAnnotationOfDataset(datasetresource, annotationid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteDashboard Deletes the dashboard with the specified ID or resource name.
func DeleteDashboard(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var dashboardresource string
	err = flags.ParseFlag(cmd.Flags(), "dashboardresource", &dashboardresource)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardresource": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	err = client.CatalogService.DeleteDashboard(dashboardresource)
	if err != nil {
		return err
	}

	return nil
}

// DeleteDataset Deletes the dataset with the specified ID or resource name. Deleting a dataset also deletes its dependent objects, such as fields.
func DeleteDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresource string
	err = flags.ParseFlag(cmd.Flags(), "datasetresource", &datasetresource)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresource": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	err = client.CatalogService.DeleteDataset(datasetresource)
	if err != nil {
		return err
	}

	return nil
}

// DeleteFieldByIdForDataset Deletes the field with the specified ID that is part of the specified dataset.
func DeleteFieldByIdForDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresource string
	err = flags.ParseFlag(cmd.Flags(), "datasetresource", &datasetresource)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresource": ` + err.Error())
	}
	var fieldid string
	err = flags.ParseFlag(cmd.Flags(), "fieldid", &fieldid)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldid": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	err = client.CatalogService.DeleteFieldByIdForDataset(datasetresource, fieldid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteRelationshipById Deletes the relationship with the specified relationship ID. Deleting a relationship also deletes any objects that are dependents of that relationship, such as relationship fields.
func DeleteRelationshipById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var relationshipid string
	err = flags.ParseFlag(cmd.Flags(), "relationshipid", &relationshipid)
	if err != nil {
		return fmt.Errorf(`error parsing "relationshipid": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	err = client.CatalogService.DeleteRelationshipById(relationshipid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteRule Deletes the rule with the specfied ID or resource name. Deleting a rule also deleletes any objects that are dependents of that rule, such as rule actions.
func DeleteRule(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var ruleresource string
	err = flags.ParseFlag(cmd.Flags(), "ruleresource", &ruleresource)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresource": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	err = client.CatalogService.DeleteRule(ruleresource)
	if err != nil {
		return err
	}

	return nil
}

// GetActionByIdForRule Returns information about the action with the specified ID that is associated with the specified rule.
func GetActionByIdForRule(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var ruleresource string
	err = flags.ParseFlag(cmd.Flags(), "ruleresource", &ruleresource)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresource": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.GetActionByIdForRule(ruleresource, actionid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetDashboard Returns information about the dashboard with the specified ID or resource name.
func GetDashboard(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var dashboardresource string
	err = flags.ParseFlag(cmd.Flags(), "dashboardresource", &dashboardresource)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardresource": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.GetDashboard(dashboardresource)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetDataset Returns information about the dataset with the specified ID or resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
func GetDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresource string
	err = flags.ParseFlag(cmd.Flags(), "datasetresource", &datasetresource)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresource": ` + err.Error())
	}
	var maxstaleDefault int32
	maxstale := &maxstaleDefault
	err = flags.ParseFlag(cmd.Flags(), "maxstale", &maxstale)
	if err != nil {
		return fmt.Errorf(`error parsing "maxstale": ` + err.Error())
	}
	// Form query params
	generated_query := model.GetDatasetQueryParams{}
	generated_query.Maxstale = maxstale

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.GetDataset(datasetresource, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetFieldById Returns the field with the specified ID.
func GetFieldById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var fieldid string
	err = flags.ParseFlag(cmd.Flags(), "fieldid", &fieldid)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldid": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.GetFieldById(fieldid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetFieldByIdForDataset Returns the field with the specified ID that is part of the specified dataset.
func GetFieldByIdForDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresource string
	err = flags.ParseFlag(cmd.Flags(), "datasetresource", &datasetresource)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresource": ` + err.Error())
	}
	var fieldid string
	err = flags.ParseFlag(cmd.Flags(), "fieldid", &fieldid)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldid": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.GetFieldByIdForDataset(datasetresource, fieldid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetRelationshipById Returns the relationship with the specified relationship ID.
func GetRelationshipById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var relationshipid string
	err = flags.ParseFlag(cmd.Flags(), "relationshipid", &relationshipid)
	if err != nil {
		return fmt.Errorf(`error parsing "relationshipid": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.GetRelationshipById(relationshipid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetRule Returns information about rule with the specified rule ID or resource name.
func GetRule(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var ruleresource string
	err = flags.ParseFlag(cmd.Flags(), "ruleresource", &ruleresource)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresource": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.GetRule(ruleresource)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ImportDataset Creates a new dataset import using the ID or resource name of the imported dataset.
func ImportDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresource string
	err = flags.ParseFlag(cmd.Flags(), "datasetresource", &datasetresource)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresource": ` + err.Error())
	}
	var module string
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var owner string
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.DatasetImportedBy{

		Module: module,
		Name:   name,
		Owner:  owner,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.ImportDataset(datasetresource, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListActionsForRule Returns the set of actions that are part of the specified rule.
func ListActionsForRule(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	var ruleresource string
	err = flags.ParseFlag(cmd.Flags(), "ruleresource", &ruleresource)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresource": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListActionsForRuleQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.ListActionsForRule(ruleresource, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListAnnotations Returns the set of annotations across all objects.
func ListAnnotations(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListAnnotationsQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.ListAnnotations(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListAnnotationsForDashboard Returns the set of annotations that are associated with the specified dashboard.
func ListAnnotationsForDashboard(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var dashboardresource string
	err = flags.ParseFlag(cmd.Flags(), "dashboardresource", &dashboardresource)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardresource": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListAnnotationsForDashboardQueryParams{}
	generated_query.Filter = filter

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.ListAnnotationsForDashboard(dashboardresource, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListAnnotationsForDataset Returns the set of annotations that are associated with the specified dataset.
func ListAnnotationsForDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var datasetresource string
	err = flags.ParseFlag(cmd.Flags(), "datasetresource", &datasetresource)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresource": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListAnnotationsForDatasetQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.ListAnnotationsForDataset(datasetresource, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListDashboards Returns a list of dashboards.
func ListDashboards(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListDashboardsQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.ListDashboards(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListDatasets Returns a list of all datasets. Use a filter to return a specific list of datasets.
func ListDatasets(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var maxstaleDefault int32
	maxstale := &maxstaleDefault
	err = flags.ParseFlag(cmd.Flags(), "maxstale", &maxstale)
	if err != nil {
		return fmt.Errorf(`error parsing "maxstale": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListDatasetsQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Maxstale = maxstale
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.ListDatasets(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListFields Returns a list of all of the fields in the Metadata Catalog.
func ListFields(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListFieldsQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.ListFields(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListFieldsForDataset Returns the set of fields for the dataset with the specified ID or resource name.
func ListFieldsForDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var datasetresource string
	err = flags.ParseFlag(cmd.Flags(), "datasetresource", &datasetresource)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresource": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListFieldsForDatasetQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.ListFieldsForDataset(datasetresource, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListModules Returns a list of all modules. Use a filter to return a specific list of modules.
func ListModules(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListModulesQueryParams{}
	generated_query.Filter = filter

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.ListModules(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListRelationships Returns a list of all relationships. Use a filter to return a specific list of relationships.
func ListRelationships(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListRelationshipsQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.ListRelationships(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListRules Returns a list of rules that match a filter, if specified, otherwise returns all rules.
func ListRules(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListRulesQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.ListRules(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleAliasAction Modifies the action with the specified ID that is associated with the specified rule.
func UpdateActionByIdForRuleAliasAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var aliasDefault string
	alias := &aliasDefault
	err = flags.ParseFlag(cmd.Flags(), "alias", &alias)
	if err != nil {
		return fmt.Errorf(`error parsing "alias": ` + err.Error())
	}
	var fieldDefault string
	field := &fieldDefault
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var kindDefault model.AliasActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleresource string
	err = flags.ParseFlag(cmd.Flags(), "ruleresource", &ruleresource)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresource": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.AliasActionPatch{

		Alias:   alias,
		Field:   field,
		Kind:    kind,
		Owner:   owner,
		Version: version,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.UpdateActionByIdForRule(ruleresource, actionid, model.MakeActionPatchFromAliasActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleAutoKvAction Modifies the action with the specified ID that is associated with the specified rule.
func UpdateActionByIdForRuleAutoKvAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var kindDefault model.AutoKvActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var modeDefault string
	mode := &modeDefault
	err = flags.ParseFlag(cmd.Flags(), "mode", &mode)
	if err != nil {
		return fmt.Errorf(`error parsing "mode": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleresource string
	err = flags.ParseFlag(cmd.Flags(), "ruleresource", &ruleresource)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresource": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.AutoKvActionPatch{

		Kind:    kind,
		Mode:    mode,
		Owner:   owner,
		Version: version,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.UpdateActionByIdForRule(ruleresource, actionid, model.MakeActionPatchFromAutoKvActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleEvalAction Modifies the action with the specified ID that is associated with the specified rule.
func UpdateActionByIdForRuleEvalAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var expressionDefault string
	expression := &expressionDefault
	err = flags.ParseFlag(cmd.Flags(), "expression", &expression)
	if err != nil {
		return fmt.Errorf(`error parsing "expression": ` + err.Error())
	}
	var fieldDefault string
	field := &fieldDefault
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var kindDefault model.EvalActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleresource string
	err = flags.ParseFlag(cmd.Flags(), "ruleresource", &ruleresource)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresource": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.EvalActionPatch{

		Expression: expression,
		Field:      field,
		Kind:       kind,
		Owner:      owner,
		Version:    version,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.UpdateActionByIdForRule(ruleresource, actionid, model.MakeActionPatchFromEvalActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleLookupAction Modifies the action with the specified ID that is associated with the specified rule.
func UpdateActionByIdForRuleLookupAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var expressionDefault string
	expression := &expressionDefault
	err = flags.ParseFlag(cmd.Flags(), "expression", &expression)
	if err != nil {
		return fmt.Errorf(`error parsing "expression": ` + err.Error())
	}
	var kindDefault model.LookupActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleresource string
	err = flags.ParseFlag(cmd.Flags(), "ruleresource", &ruleresource)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresource": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.LookupActionPatch{

		Expression: expression,
		Kind:       kind,
		Owner:      owner,
		Version:    version,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.UpdateActionByIdForRule(ruleresource, actionid, model.MakeActionPatchFromLookupActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleRegexAction Modifies the action with the specified ID that is associated with the specified rule.
func UpdateActionByIdForRuleRegexAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var fieldDefault string
	field := &fieldDefault
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var kindDefault model.RegexActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var limitDefault int32
	limit := &limitDefault
	err = flags.ParseFlag(cmd.Flags(), "limit", &limit)
	if err != nil {
		return fmt.Errorf(`error parsing "limit": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var patternDefault string
	pattern := &patternDefault
	err = flags.ParseFlag(cmd.Flags(), "pattern", &pattern)
	if err != nil {
		return fmt.Errorf(`error parsing "pattern": ` + err.Error())
	}
	var ruleresource string
	err = flags.ParseFlag(cmd.Flags(), "ruleresource", &ruleresource)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresource": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RegexActionPatch{

		Field:   field,
		Kind:    kind,
		Limit:   limit,
		Owner:   owner,
		Pattern: pattern,
		Version: version,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.UpdateActionByIdForRule(ruleresource, actionid, model.MakeActionPatchFromRegexActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDashboard Modifies the dashboard with the specified ID or resource name.
func UpdateDashboard(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var dashboardresource string
	err = flags.ParseFlag(cmd.Flags(), "dashboardresource", &dashboardresource)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardresource": ` + err.Error())
	}
	var definitionDefault string
	definition := &definitionDefault
	err = flags.ParseFlag(cmd.Flags(), "definition", &definition)
	if err != nil {
		return fmt.Errorf(`error parsing "definition": ` + err.Error())
	}
	var isactiveDefault bool
	isactive := &isactiveDefault
	err = flags.ParseFlag(cmd.Flags(), "isactive", &isactive)
	if err != nil {
		return fmt.Errorf(`error parsing "isactive": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.DashboardPatch{

		Definition: definition,
		Isactive:   isactive,
		Module:     module,
		Name:       name,
		Version:    version,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.UpdateDashboard(dashboardresource, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetFederatedDataset Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.
func UpdateDatasetFederatedDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresource string
	err = flags.ParseFlag(cmd.Flags(), "datasetresource", &datasetresource)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresource": ` + err.Error())
	}
	var federatedConnectionDefault string
	federatedConnection := &federatedConnectionDefault
	err = flags.ParseFlag(cmd.Flags(), "federated-connection", &federatedConnection)
	if err != nil {
		return fmt.Errorf(`error parsing "federated-connection": ` + err.Error())
	}
	var federatedDatasetDefault string
	federatedDataset := &federatedDatasetDefault
	err = flags.ParseFlag(cmd.Flags(), "federated-dataset", &federatedDataset)
	if err != nil {
		return fmt.Errorf(`error parsing "federated-dataset": ` + err.Error())
	}
	var federatedDatasetKindDefault string
	federatedDatasetKind := &federatedDatasetKindDefault
	err = flags.ParseFlag(cmd.Flags(), "federated-dataset-kind", &federatedDatasetKind)
	if err != nil {
		return fmt.Errorf(`error parsing "federated-dataset-kind": ` + err.Error())
	}
	var kindDefault model.FederatedDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.FederatedDatasetPatch{

		FederatedConnection:  federatedConnection,
		FederatedDataset:     federatedDataset,
		FederatedDatasetKind: federatedDatasetKind,
		Kind:                 kind,
		Module:               module,
		Name:                 name,
		Owner:                owner,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.UpdateDataset(datasetresource, model.MakeDatasetPatchFromFederatedDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetImportDataset Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.
func UpdateDatasetImportDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresource string
	err = flags.ParseFlag(cmd.Flags(), "datasetresource", &datasetresource)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresource": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.ImportDatasetPatch{

		Module: module,
		Name:   name,
		Owner:  owner,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.UpdateDataset(datasetresource, model.MakeDatasetPatchFromImportDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetIndexDataset Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.
func UpdateDatasetIndexDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresource string
	err = flags.ParseFlag(cmd.Flags(), "datasetresource", &datasetresource)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresource": ` + err.Error())
	}
	var disabledDefault bool
	disabled := &disabledDefault
	err = flags.ParseFlag(cmd.Flags(), "disabled", &disabled)
	if err != nil {
		return fmt.Errorf(`error parsing "disabled": ` + err.Error())
	}
	var frozenTimePeriodInSecsDefault int32
	frozenTimePeriodInSecs := &frozenTimePeriodInSecsDefault
	err = flags.ParseFlag(cmd.Flags(), "frozen-time-period-in-secs", &frozenTimePeriodInSecs)
	if err != nil {
		return fmt.Errorf(`error parsing "frozen-time-period-in-secs": ` + err.Error())
	}
	var kindDefault model.IndexDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.IndexDatasetPatch{

		Disabled:               disabled,
		FrozenTimePeriodInSecs: frozenTimePeriodInSecs,
		Kind:                   kind,
		Module:                 module,
		Name:                   name,
		Owner:                  owner,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.UpdateDataset(datasetresource, model.MakeDatasetPatchFromIndexDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetKvCollectionDataset Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.
func UpdateDatasetKvCollectionDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresource string
	err = flags.ParseFlag(cmd.Flags(), "datasetresource", &datasetresource)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresource": ` + err.Error())
	}
	var kindDefault model.KvCollectionDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.KvCollectionDatasetPatch{

		Kind:   kind,
		Module: module,
		Name:   name,
		Owner:  owner,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.UpdateDataset(datasetresource, model.MakeDatasetPatchFromKvCollectionDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetLookupDataset Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.
func UpdateDatasetLookupDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var caseSensitiveMatchDefault bool
	caseSensitiveMatch := &caseSensitiveMatchDefault
	err = flags.ParseFlag(cmd.Flags(), "case-sensitive-match", &caseSensitiveMatch)
	if err != nil {
		return fmt.Errorf(`error parsing "case-sensitive-match": ` + err.Error())
	}
	var datasetresource string
	err = flags.ParseFlag(cmd.Flags(), "datasetresource", &datasetresource)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresource": ` + err.Error())
	}
	var externalKindDefault model.LookupDatasetExternalKind
	externalKind := &externalKindDefault
	err = flags.ParseFlag(cmd.Flags(), "external-kind", &externalKind)
	if err != nil {
		return fmt.Errorf(`error parsing "external-kind": ` + err.Error())
	}
	var externalNameDefault string
	externalName := &externalNameDefault
	err = flags.ParseFlag(cmd.Flags(), "external-name", &externalName)
	if err != nil {
		return fmt.Errorf(`error parsing "external-name": ` + err.Error())
	}
	var filterDefault string
	filter := &filterDefault
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var kindDefault model.LookupDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.LookupDatasetPatch{

		CaseSensitiveMatch: caseSensitiveMatch,
		ExternalKind:       externalKind,
		ExternalName:       externalName,
		Filter:             filter,
		Kind:               kind,
		Module:             module,
		Name:               name,
		Owner:              owner,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.UpdateDataset(datasetresource, model.MakeDatasetPatchFromLookupDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetMetricDataset Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.
func UpdateDatasetMetricDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresource string
	err = flags.ParseFlag(cmd.Flags(), "datasetresource", &datasetresource)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresource": ` + err.Error())
	}
	var disabledDefault bool
	disabled := &disabledDefault
	err = flags.ParseFlag(cmd.Flags(), "disabled", &disabled)
	if err != nil {
		return fmt.Errorf(`error parsing "disabled": ` + err.Error())
	}
	var frozenTimePeriodInSecsDefault int32
	frozenTimePeriodInSecs := &frozenTimePeriodInSecsDefault
	err = flags.ParseFlag(cmd.Flags(), "frozen-time-period-in-secs", &frozenTimePeriodInSecs)
	if err != nil {
		return fmt.Errorf(`error parsing "frozen-time-period-in-secs": ` + err.Error())
	}
	var kindDefault model.MetricDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.MetricDatasetPatch{

		Disabled:               disabled,
		FrozenTimePeriodInSecs: frozenTimePeriodInSecs,
		Kind:                   kind,
		Module:                 module,
		Name:                   name,
		Owner:                  owner,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.UpdateDataset(datasetresource, model.MakeDatasetPatchFromMetricDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetViewDataset Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.
func UpdateDatasetViewDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresource string
	err = flags.ParseFlag(cmd.Flags(), "datasetresource", &datasetresource)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresource": ` + err.Error())
	}
	var kindDefault model.ViewDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var searchDefault string
	search := &searchDefault
	err = flags.ParseFlag(cmd.Flags(), "search", &search)
	if err != nil {
		return fmt.Errorf(`error parsing "search": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.ViewDatasetPatch{

		Kind:   kind,
		Module: module,
		Name:   name,
		Owner:  owner,
		Search: search,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.UpdateDataset(datasetresource, model.MakeDatasetPatchFromViewDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateFieldByIdForDataset Modifies the field with the specified ID that is part of the specified dataset.
func UpdateFieldByIdForDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresource string
	err = flags.ParseFlag(cmd.Flags(), "datasetresource", &datasetresource)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresource": ` + err.Error())
	}
	var datatypeDefault model.FieldDataType
	datatype := &datatypeDefault
	err = flags.ParseFlag(cmd.Flags(), "datatype", &datatype)
	if err != nil {
		return fmt.Errorf(`error parsing "datatype": ` + err.Error())
	}
	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var fieldid string
	err = flags.ParseFlag(cmd.Flags(), "fieldid", &fieldid)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldid": ` + err.Error())
	}
	var fieldtypeDefault model.FieldType
	fieldtype := &fieldtypeDefault
	err = flags.ParseFlag(cmd.Flags(), "fieldtype", &fieldtype)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldtype": ` + err.Error())
	}
	var indexedDefault bool
	indexed := &indexedDefault
	err = flags.ParseFlag(cmd.Flags(), "indexed", &indexed)
	if err != nil {
		return fmt.Errorf(`error parsing "indexed": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var prevalenceDefault model.FieldPrevalence
	prevalence := &prevalenceDefault
	err = flags.ParseFlag(cmd.Flags(), "prevalence", &prevalence)
	if err != nil {
		return fmt.Errorf(`error parsing "prevalence": ` + err.Error())
	}
	var summaryDefault string
	summary := &summaryDefault
	err = flags.ParseFlag(cmd.Flags(), "summary", &summary)
	if err != nil {
		return fmt.Errorf(`error parsing "summary": ` + err.Error())
	}
	var titleDefault string
	title := &titleDefault
	err = flags.ParseFlag(cmd.Flags(), "title", &title)
	if err != nil {
		return fmt.Errorf(`error parsing "title": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.FieldPatch{

		Datatype:    datatype,
		Description: description,
		Fieldtype:   fieldtype,
		Indexed:     indexed,
		Name:        name,
		Prevalence:  prevalence,
		Summary:     summary,
		Title:       title,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.UpdateFieldByIdForDataset(datasetresource, fieldid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateRelationshipById Modifies the relationship with the specified relationship ID.
func UpdateRelationshipById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var relationshipid string
	err = flags.ParseFlag(cmd.Flags(), "relationshipid", &relationshipid)
	if err != nil {
		return fmt.Errorf(`error parsing "relationshipid": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RelationshipPatch{

		Name:  name,
		Owner: owner,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.UpdateRelationshipById(relationshipid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateRule Modifies the rule with the specified rule ID or resource name.
func UpdateRule(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var matchDefault string
	match := &matchDefault
	err = flags.ParseFlag(cmd.Flags(), "match", &match)
	if err != nil {
		return fmt.Errorf(`error parsing "match": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleresource string
	err = flags.ParseFlag(cmd.Flags(), "ruleresource", &ruleresource)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresource": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RulePatch{

		Match:   match,
		Module:  module,
		Name:    name,
		Owner:   owner,
		Version: version,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.CatalogService.UpdateRule(ruleresource, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}
