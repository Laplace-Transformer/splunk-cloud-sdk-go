// Package catalog -- generated by scloudgen
// !! DO NOT EDIT !!
//
package catalog

import (
	"fmt"

	"github.com/spf13/cobra"
	"github.com/splunk/splunk-cloud-sdk-go/cmd/scloud/auth"
	"github.com/splunk/splunk-cloud-sdk-go/cmd/scloud/flags"
	"github.com/splunk/splunk-cloud-sdk-go/cmd/scloud/jsonx"
	model "github.com/splunk/splunk-cloud-sdk-go/services/catalog"
)

// CreateActionForRuleAliasAction Creates a new action for a rule with the specified resource name.
func CreateActionForRuleAliasAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var alias string
	err = flags.ParseFlag(cmd.Flags(), "alias", &alias)
	if err != nil {
		return fmt.Errorf(`error parsing "alias": ` + err.Error())
	}
	var field string
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.AliasActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ruleidDefault string
	ruleid := &ruleidDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.AliasActionPost{

		Alias:   alias,
		Field:   field,
		Id:      id,
		Kind:    kind,
		Ruleid:  ruleid,
		Version: version,
	}

	resp, err := client.CatalogService.CreateActionForRule(ruleresourcename, model.MakeActionPostFromAliasActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleAutoKvAction Creates a new action for a rule with the specified resource name.
func CreateActionForRuleAutoKvAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.AutoKvActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var mode string
	err = flags.ParseFlag(cmd.Flags(), "mode", &mode)
	if err != nil {
		return fmt.Errorf(`error parsing "mode": ` + err.Error())
	}
	var ruleidDefault string
	ruleid := &ruleidDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.AutoKvActionPost{

		Id:      id,
		Kind:    kind,
		Mode:    mode,
		Ruleid:  ruleid,
		Version: version,
	}

	resp, err := client.CatalogService.CreateActionForRule(ruleresourcename, model.MakeActionPostFromAutoKvActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleByIdAliasAction Creates a new action for the specified rule.
func CreateActionForRuleByIdAliasAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var alias string
	err = flags.ParseFlag(cmd.Flags(), "alias", &alias)
	if err != nil {
		return fmt.Errorf(`error parsing "alias": ` + err.Error())
	}
	var field string
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.AliasActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleidBodyDefault string
	ruleidBody := &ruleidBodyDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid-body", &ruleidBody)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid-body": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.AliasActionPost{

		Alias:   alias,
		Field:   field,
		Id:      id,
		Kind:    kind,
		Ruleid:  ruleidBody,
		Version: version,
	}

	resp, err := client.CatalogService.CreateActionForRuleById(ruleid, model.MakeActionPostFromAliasActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleByIdAutoKvAction Creates a new action for the specified rule.
func CreateActionForRuleByIdAutoKvAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.AutoKvActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var mode string
	err = flags.ParseFlag(cmd.Flags(), "mode", &mode)
	if err != nil {
		return fmt.Errorf(`error parsing "mode": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleidBodyDefault string
	ruleidBody := &ruleidBodyDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid-body", &ruleidBody)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid-body": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.AutoKvActionPost{

		Id:      id,
		Kind:    kind,
		Mode:    mode,
		Ruleid:  ruleidBody,
		Version: version,
	}

	resp, err := client.CatalogService.CreateActionForRuleById(ruleid, model.MakeActionPostFromAutoKvActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleByIdEvalAction Creates a new action for the specified rule.
func CreateActionForRuleByIdEvalAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var expression string
	err = flags.ParseFlag(cmd.Flags(), "expression", &expression)
	if err != nil {
		return fmt.Errorf(`error parsing "expression": ` + err.Error())
	}
	var field string
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.EvalActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleidBodyDefault string
	ruleidBody := &ruleidBodyDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid-body", &ruleidBody)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid-body": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.EvalActionPost{

		Expression: expression,
		Field:      field,
		Id:         id,
		Kind:       kind,
		Ruleid:     ruleidBody,
		Version:    version,
	}

	resp, err := client.CatalogService.CreateActionForRuleById(ruleid, model.MakeActionPostFromEvalActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleByIdLookupAction Creates a new action for the specified rule.
func CreateActionForRuleByIdLookupAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var expression string
	err = flags.ParseFlag(cmd.Flags(), "expression", &expression)
	if err != nil {
		return fmt.Errorf(`error parsing "expression": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.LookupActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleidBodyDefault string
	ruleidBody := &ruleidBodyDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid-body", &ruleidBody)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid-body": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.LookupActionPost{

		Expression: expression,
		Id:         id,
		Kind:       kind,
		Ruleid:     ruleidBody,
		Version:    version,
	}

	resp, err := client.CatalogService.CreateActionForRuleById(ruleid, model.MakeActionPostFromLookupActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleByIdRegexAction Creates a new action for the specified rule.
func CreateActionForRuleByIdRegexAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var field string
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.RegexActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var limitDefault int32
	limit := &limitDefault
	err = flags.ParseFlag(cmd.Flags(), "limit", &limit)
	if err != nil {
		return fmt.Errorf(`error parsing "limit": ` + err.Error())
	}
	var pattern string
	err = flags.ParseFlag(cmd.Flags(), "pattern", &pattern)
	if err != nil {
		return fmt.Errorf(`error parsing "pattern": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleidBodyDefault string
	ruleidBody := &ruleidBodyDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid-body", &ruleidBody)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid-body": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RegexActionPost{

		Field:   field,
		Id:      id,
		Kind:    kind,
		Limit:   limit,
		Pattern: pattern,
		Ruleid:  ruleidBody,
		Version: version,
	}

	resp, err := client.CatalogService.CreateActionForRuleById(ruleid, model.MakeActionPostFromRegexActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleEvalAction Creates a new action for a rule with the specified resource name.
func CreateActionForRuleEvalAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var expression string
	err = flags.ParseFlag(cmd.Flags(), "expression", &expression)
	if err != nil {
		return fmt.Errorf(`error parsing "expression": ` + err.Error())
	}
	var field string
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.EvalActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ruleidDefault string
	ruleid := &ruleidDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.EvalActionPost{

		Expression: expression,
		Field:      field,
		Id:         id,
		Kind:       kind,
		Ruleid:     ruleid,
		Version:    version,
	}

	resp, err := client.CatalogService.CreateActionForRule(ruleresourcename, model.MakeActionPostFromEvalActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleLookupAction Creates a new action for a rule with the specified resource name.
func CreateActionForRuleLookupAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var expression string
	err = flags.ParseFlag(cmd.Flags(), "expression", &expression)
	if err != nil {
		return fmt.Errorf(`error parsing "expression": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.LookupActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ruleidDefault string
	ruleid := &ruleidDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.LookupActionPost{

		Expression: expression,
		Id:         id,
		Kind:       kind,
		Ruleid:     ruleid,
		Version:    version,
	}

	resp, err := client.CatalogService.CreateActionForRule(ruleresourcename, model.MakeActionPostFromLookupActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateActionForRuleRegexAction Creates a new action for a rule with the specified resource name.
func CreateActionForRuleRegexAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var field string
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.RegexActionKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var limitDefault int32
	limit := &limitDefault
	err = flags.ParseFlag(cmd.Flags(), "limit", &limit)
	if err != nil {
		return fmt.Errorf(`error parsing "limit": ` + err.Error())
	}
	var pattern string
	err = flags.ParseFlag(cmd.Flags(), "pattern", &pattern)
	if err != nil {
		return fmt.Errorf(`error parsing "pattern": ` + err.Error())
	}
	var ruleidDefault string
	ruleid := &ruleidDefault
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RegexActionPost{

		Field:   field,
		Id:      id,
		Kind:    kind,
		Limit:   limit,
		Pattern: pattern,
		Ruleid:  ruleid,
		Version: version,
	}

	resp, err := client.CatalogService.CreateActionForRule(ruleresourcename, model.MakeActionPostFromRegexActionPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateAnnotationForDashboardbyId Creates a new annotation for the specified dashboard.
func CreateAnnotationForDashboardbyId(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// CreateAnnotationForDashboardsByResourceName Creates a new annotation for the specified dataset resource name.
func CreateAnnotationForDashboardsByResourceName(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// CreateAnnotationForDatasetById Creates a new annotation for the specified dataset.
func CreateAnnotationForDatasetById(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// CreateAnnotationForDatasetByResourceName Creates a new annotation for the specified dataset.
func CreateAnnotationForDatasetByResourceName(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// CreateDashboard Creates a new dashboard.
func CreateDashboard(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var definition string
	err = flags.ParseFlag(cmd.Flags(), "definition", &definition)
	if err != nil {
		return fmt.Errorf(`error parsing "definition": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var isactiveDefault bool
	isactive := &isactiveDefault
	err = flags.ParseFlag(cmd.Flags(), "isactive", &isactive)
	if err != nil {
		return fmt.Errorf(`error parsing "isactive": ` + err.Error())
	}
	var module string
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.DashboardPost{

		Definition: definition,
		Id:         id,
		Isactive:   isactive,
		Module:     module,
		Name:       name,
		Version:    version,
	}

	resp, err := client.CatalogService.CreateDashboard(generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetImport Creates a new dataset import using the resource name of the imported dataset.
func CreateDatasetImport(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var module string
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.DatasetImportedBy{

		Module: module,
		Name:   name,
	}

	resp, err := client.CatalogService.CreateDatasetImport(datasetresourcename, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetImportById Creates a new dataset import using the ID of the imported dataset.
func CreateDatasetImportById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var module string
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.DatasetImportedBy{

		Module: module,
		Name:   name,
	}

	resp, err := client.CatalogService.CreateDatasetImportById(datasetid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetImportByIdv1 Creates a new dataset import using the ID of the imported dataset.
func CreateDatasetImportByIdv1(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var module string
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.DatasetImportedBy{

		Module: module,
		Name:   name,
	}

	resp, err := client.CatalogService.CreateDatasetImportByIdv1(datasetid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetImportDataset Creates a new dataset.
func CreateDatasetImportDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Form the request body
	generated_request_body := model.ImportDatasetPost{}

	resp, err := client.CatalogService.CreateDataset(model.MakeDatasetPostFromImportDatasetPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetImportv1 Creates a new dataset import using the resource name of the imported dataset.
func CreateDatasetImportv1(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var module string
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.DatasetImportedBy{

		Module: module,
		Name:   name,
	}

	resp, err := client.CatalogService.CreateDatasetImportv1(datasetresourcename, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetIndexDataset Creates a new dataset.
func CreateDatasetIndexDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var disabled bool
	err = flags.ParseFlag(cmd.Flags(), "disabled", &disabled)
	if err != nil {
		return fmt.Errorf(`error parsing "disabled": ` + err.Error())
	}
	var fields []model.FieldPost
	err = flags.ParseFlag(cmd.Flags(), "fields", &fields)
	if err != nil {
		return fmt.Errorf(`error parsing "fields": ` + err.Error())
	}
	var frozenTimePeriodInSecsDefault int32
	frozenTimePeriodInSecs := &frozenTimePeriodInSecsDefault
	err = flags.ParseFlag(cmd.Flags(), "frozen-time-period-in-secs", &frozenTimePeriodInSecs)
	if err != nil {
		return fmt.Errorf(`error parsing "frozen-time-period-in-secs": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.IndexDatasetKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.IndexDatasetPost{

		Disabled:               disabled,
		Fields:                 fields,
		FrozenTimePeriodInSecs: frozenTimePeriodInSecs,
		Id:                     id,
		Kind:                   kind,
		Module:                 module,
		Name:                   name,
	}

	resp, err := client.CatalogService.CreateDataset(model.MakeDatasetPostFromIndexDatasetPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetKvCollectionDataset Creates a new dataset.
func CreateDatasetKvCollectionDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var fields []model.FieldPost
	err = flags.ParseFlag(cmd.Flags(), "fields", &fields)
	if err != nil {
		return fmt.Errorf(`error parsing "fields": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.KvCollectionDatasetKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.KvCollectionDatasetPost{

		Fields: fields,
		Id:     id,
		Kind:   kind,
		Module: module,
		Name:   name,
	}

	resp, err := client.CatalogService.CreateDataset(model.MakeDatasetPostFromKvCollectionDatasetPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetLookupDataset Creates a new dataset.
func CreateDatasetLookupDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var caseSensitiveMatchDefault bool
	caseSensitiveMatch := &caseSensitiveMatchDefault
	err = flags.ParseFlag(cmd.Flags(), "case-sensitive-match", &caseSensitiveMatch)
	if err != nil {
		return fmt.Errorf(`error parsing "case-sensitive-match": ` + err.Error())
	}
	var externalKind model.LookupDatasetExternalKind
	err = flags.ParseFlag(cmd.Flags(), "external-kind", &externalKind)
	if err != nil {
		return fmt.Errorf(`error parsing "external-kind": ` + err.Error())
	}
	var externalName string
	err = flags.ParseFlag(cmd.Flags(), "external-name", &externalName)
	if err != nil {
		return fmt.Errorf(`error parsing "external-name": ` + err.Error())
	}
	var fields []model.FieldPost
	err = flags.ParseFlag(cmd.Flags(), "fields", &fields)
	if err != nil {
		return fmt.Errorf(`error parsing "fields": ` + err.Error())
	}
	var filterDefault string
	filter := &filterDefault
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.LookupDatasetKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.LookupDatasetPost{

		CaseSensitiveMatch: caseSensitiveMatch,
		ExternalKind:       externalKind,
		ExternalName:       externalName,
		Fields:             fields,
		Filter:             filter,
		Id:                 id,
		Kind:               kind,
		Module:             module,
		Name:               name,
	}

	resp, err := client.CatalogService.CreateDataset(model.MakeDatasetPostFromLookupDatasetPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetMetricDataset Creates a new dataset.
func CreateDatasetMetricDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var disabled bool
	err = flags.ParseFlag(cmd.Flags(), "disabled", &disabled)
	if err != nil {
		return fmt.Errorf(`error parsing "disabled": ` + err.Error())
	}
	var fields []model.FieldPost
	err = flags.ParseFlag(cmd.Flags(), "fields", &fields)
	if err != nil {
		return fmt.Errorf(`error parsing "fields": ` + err.Error())
	}
	var frozenTimePeriodInSecsDefault int32
	frozenTimePeriodInSecs := &frozenTimePeriodInSecsDefault
	err = flags.ParseFlag(cmd.Flags(), "frozen-time-period-in-secs", &frozenTimePeriodInSecs)
	if err != nil {
		return fmt.Errorf(`error parsing "frozen-time-period-in-secs": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.MetricDatasetKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.MetricDatasetPost{

		Disabled:               disabled,
		Fields:                 fields,
		FrozenTimePeriodInSecs: frozenTimePeriodInSecs,
		Id:                     id,
		Kind:                   kind,
		Module:                 module,
		Name:                   name,
	}

	resp, err := client.CatalogService.CreateDataset(model.MakeDatasetPostFromMetricDatasetPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateDatasetViewDataset Creates a new dataset.
func CreateDatasetViewDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var fields []model.FieldPost
	err = flags.ParseFlag(cmd.Flags(), "fields", &fields)
	if err != nil {
		return fmt.Errorf(`error parsing "fields": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.ViewDatasetKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var search string
	err = flags.ParseFlag(cmd.Flags(), "search", &search)
	if err != nil {
		return fmt.Errorf(`error parsing "search": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.ViewDatasetPost{

		Fields: fields,
		Id:     id,
		Kind:   kind,
		Module: module,
		Name:   name,
		Search: search,
	}

	resp, err := client.CatalogService.CreateDataset(model.MakeDatasetPostFromViewDatasetPost(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateFieldForDataset Creates a new field in the dataset with the specified resource name.
func CreateFieldForDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var datatypeDefault model.FieldDataType
	datatype := &datatypeDefault
	err = flags.ParseFlag(cmd.Flags(), "datatype", &datatype)
	if err != nil {
		return fmt.Errorf(`error parsing "datatype": ` + err.Error())
	}
	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var fieldtypeDefault model.FieldType
	fieldtype := &fieldtypeDefault
	err = flags.ParseFlag(cmd.Flags(), "fieldtype", &fieldtype)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldtype": ` + err.Error())
	}
	var indexedDefault bool
	indexed := &indexedDefault
	err = flags.ParseFlag(cmd.Flags(), "indexed", &indexed)
	if err != nil {
		return fmt.Errorf(`error parsing "indexed": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var prevalenceDefault model.FieldPrevalence
	prevalence := &prevalenceDefault
	err = flags.ParseFlag(cmd.Flags(), "prevalence", &prevalence)
	if err != nil {
		return fmt.Errorf(`error parsing "prevalence": ` + err.Error())
	}
	var summaryDefault string
	summary := &summaryDefault
	err = flags.ParseFlag(cmd.Flags(), "summary", &summary)
	if err != nil {
		return fmt.Errorf(`error parsing "summary": ` + err.Error())
	}
	var titleDefault string
	title := &titleDefault
	err = flags.ParseFlag(cmd.Flags(), "title", &title)
	if err != nil {
		return fmt.Errorf(`error parsing "title": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.FieldPost{

		Datatype:    datatype,
		Description: description,
		Fieldtype:   fieldtype,
		Indexed:     indexed,
		Name:        name,
		Prevalence:  prevalence,
		Summary:     summary,
		Title:       title,
	}

	resp, err := client.CatalogService.CreateFieldForDataset(datasetresourcename, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateFieldForDatasetById Adds a new field to the dataset with the specified ID.
func CreateFieldForDatasetById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var datatypeDefault model.FieldDataType
	datatype := &datatypeDefault
	err = flags.ParseFlag(cmd.Flags(), "datatype", &datatype)
	if err != nil {
		return fmt.Errorf(`error parsing "datatype": ` + err.Error())
	}
	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var fieldtypeDefault model.FieldType
	fieldtype := &fieldtypeDefault
	err = flags.ParseFlag(cmd.Flags(), "fieldtype", &fieldtype)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldtype": ` + err.Error())
	}
	var indexedDefault bool
	indexed := &indexedDefault
	err = flags.ParseFlag(cmd.Flags(), "indexed", &indexed)
	if err != nil {
		return fmt.Errorf(`error parsing "indexed": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var prevalenceDefault model.FieldPrevalence
	prevalence := &prevalenceDefault
	err = flags.ParseFlag(cmd.Flags(), "prevalence", &prevalence)
	if err != nil {
		return fmt.Errorf(`error parsing "prevalence": ` + err.Error())
	}
	var summaryDefault string
	summary := &summaryDefault
	err = flags.ParseFlag(cmd.Flags(), "summary", &summary)
	if err != nil {
		return fmt.Errorf(`error parsing "summary": ` + err.Error())
	}
	var titleDefault string
	title := &titleDefault
	err = flags.ParseFlag(cmd.Flags(), "title", &title)
	if err != nil {
		return fmt.Errorf(`error parsing "title": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.FieldPost{

		Datatype:    datatype,
		Description: description,
		Fieldtype:   fieldtype,
		Indexed:     indexed,
		Name:        name,
		Prevalence:  prevalence,
		Summary:     summary,
		Title:       title,
	}

	resp, err := client.CatalogService.CreateFieldForDatasetById(datasetid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateRelationship Creates a new relationship.
func CreateRelationship(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var fields []model.RelationshipFieldPost
	err = flags.ParseFlag(cmd.Flags(), "fields", &fields)
	if err != nil {
		return fmt.Errorf(`error parsing "fields": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var kind model.RelationshipKind
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var sourceidDefault string
	sourceid := &sourceidDefault
	err = flags.ParseFlag(cmd.Flags(), "sourceid", &sourceid)
	if err != nil {
		return fmt.Errorf(`error parsing "sourceid": ` + err.Error())
	}
	var sourceresourcenameDefault string
	sourceresourcename := &sourceresourcenameDefault
	err = flags.ParseFlag(cmd.Flags(), "sourceresourcename", &sourceresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "sourceresourcename": ` + err.Error())
	}
	var targetidDefault string
	targetid := &targetidDefault
	err = flags.ParseFlag(cmd.Flags(), "targetid", &targetid)
	if err != nil {
		return fmt.Errorf(`error parsing "targetid": ` + err.Error())
	}
	var targetresourcenameDefault string
	targetresourcename := &targetresourcenameDefault
	err = flags.ParseFlag(cmd.Flags(), "targetresourcename", &targetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "targetresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RelationshipPost{

		Fields:             fields,
		Id:                 id,
		Kind:               kind,
		Module:             module,
		Name:               name,
		Sourceid:           sourceid,
		Sourceresourcename: sourceresourcename,
		Targetid:           targetid,
		Targetresourcename: targetresourcename,
		Version:            version,
	}

	resp, err := client.CatalogService.CreateRelationship(generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateRule Creates a new rule.
func CreateRule(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actions []model.ActionPost
	err = flags.ParseFlag(cmd.Flags(), "actions", &actions)
	if err != nil {
		return fmt.Errorf(`error parsing "actions": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var match string
	err = flags.ParseFlag(cmd.Flags(), "match", &match)
	if err != nil {
		return fmt.Errorf(`error parsing "match": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RulePost{

		Actions: actions,
		Id:      id,
		Match:   match,
		Module:  module,
		Name:    name,
		Version: version,
	}

	resp, err := client.CatalogService.CreateRule(generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateWorkflow Creates a new workflow configuration.
func CreateWorkflow(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var experimentidDefault string
	experimentid := &experimentidDefault
	err = flags.ParseFlag(cmd.Flags(), "experimentid", &experimentid)
	if err != nil {
		return fmt.Errorf(`error parsing "experimentid": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var tasks []model.TaskPost
	err = flags.ParseFlag(cmd.Flags(), "tasks", &tasks)
	if err != nil {
		return fmt.Errorf(`error parsing "tasks": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.WorkflowPost{

		Description:  description,
		Experimentid: experimentid,
		Id:           id,
		Name:         name,
		Tasks:        tasks,
		Version:      version,
	}

	resp, err := client.CatalogService.CreateWorkflow(generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateWorkflowBuild Creates a new workflow build.
func CreateWorkflowBuild(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var endedDefault string
	ended := &endedDefault
	err = flags.ParseFlag(cmd.Flags(), "ended", &ended)
	if err != nil {
		return fmt.Errorf(`error parsing "ended": ` + err.Error())
	}
	var evaluationresults []string
	err = flags.ParseFlag(cmd.Flags(), "evaluationresults", &evaluationresults)
	if err != nil {
		return fmt.Errorf(`error parsing "evaluationresults": ` + err.Error())
	}
	var failuremessageDefault string
	failuremessage := &failuremessageDefault
	err = flags.ParseFlag(cmd.Flags(), "failuremessage", &failuremessage)
	if err != nil {
		return fmt.Errorf(`error parsing "failuremessage": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var inputdata []string
	err = flags.ParseFlag(cmd.Flags(), "inputdata", &inputdata)
	if err != nil {
		return fmt.Errorf(`error parsing "inputdata": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var outputdata []string
	err = flags.ParseFlag(cmd.Flags(), "outputdata", &outputdata)
	if err != nil {
		return fmt.Errorf(`error parsing "outputdata": ` + err.Error())
	}
	var randomstateDefault int32
	randomstate := &randomstateDefault
	err = flags.ParseFlag(cmd.Flags(), "randomstate", &randomstate)
	if err != nil {
		return fmt.Errorf(`error parsing "randomstate": ` + err.Error())
	}
	var startedDefault string
	started := &startedDefault
	err = flags.ParseFlag(cmd.Flags(), "started", &started)
	if err != nil {
		return fmt.Errorf(`error parsing "started": ` + err.Error())
	}
	var statusDefault string
	status := &statusDefault
	err = flags.ParseFlag(cmd.Flags(), "status", &status)
	if err != nil {
		return fmt.Errorf(`error parsing "status": ` + err.Error())
	}
	var timeoutsecs int32
	err = flags.ParseFlag(cmd.Flags(), "timeoutsecs", &timeoutsecs)
	if err != nil {
		return fmt.Errorf(`error parsing "timeoutsecs": ` + err.Error())
	}
	var traintestsplitDefault float32
	traintestsplit := &traintestsplitDefault
	err = flags.ParseFlag(cmd.Flags(), "traintestsplit", &traintestsplit)
	if err != nil {
		return fmt.Errorf(`error parsing "traintestsplit": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}
	var workflowidBodyDefault string
	workflowidBody := &workflowidBodyDefault
	err = flags.ParseFlag(cmd.Flags(), "workflowid-body", &workflowidBody)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid-body": ` + err.Error())
	}
	var workflowversionDefault int32
	workflowversion := &workflowversionDefault
	err = flags.ParseFlag(cmd.Flags(), "workflowversion", &workflowversion)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowversion": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.WorkflowBuildPost{

		Description:       description,
		Ended:             ended,
		Evaluationresults: evaluationresults,
		Failuremessage:    failuremessage,
		Id:                id,
		Inputdata:         inputdata,
		Name:              name,
		Outputdata:        outputdata,
		Randomstate:       randomstate,
		Started:           started,
		Status:            status,
		Timeoutsecs:       timeoutsecs,
		Traintestsplit:    traintestsplit,
		Version:           version,
		Workflowid:        workflowidBody,
		Workflowversion:   workflowversion,
	}

	resp, err := client.CatalogService.CreateWorkflowBuild(workflowid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateWorkflowRun Creates a new workflow run for the specified workflow build ID.
func CreateWorkflowRun(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var endedDefault string
	ended := &endedDefault
	err = flags.ParseFlag(cmd.Flags(), "ended", &ended)
	if err != nil {
		return fmt.Errorf(`error parsing "ended": ` + err.Error())
	}
	var failuremessageDefault string
	failuremessage := &failuremessageDefault
	err = flags.ParseFlag(cmd.Flags(), "failuremessage", &failuremessage)
	if err != nil {
		return fmt.Errorf(`error parsing "failuremessage": ` + err.Error())
	}
	var idDefault string
	id := &idDefault
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var inputdata []string
	err = flags.ParseFlag(cmd.Flags(), "inputdata", &inputdata)
	if err != nil {
		return fmt.Errorf(`error parsing "inputdata": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var outputdata []string
	err = flags.ParseFlag(cmd.Flags(), "outputdata", &outputdata)
	if err != nil {
		return fmt.Errorf(`error parsing "outputdata": ` + err.Error())
	}
	var startedDefault string
	started := &startedDefault
	err = flags.ParseFlag(cmd.Flags(), "started", &started)
	if err != nil {
		return fmt.Errorf(`error parsing "started": ` + err.Error())
	}
	var statusDefault string
	status := &statusDefault
	err = flags.ParseFlag(cmd.Flags(), "status", &status)
	if err != nil {
		return fmt.Errorf(`error parsing "status": ` + err.Error())
	}
	var timeoutsecs int32
	err = flags.ParseFlag(cmd.Flags(), "timeoutsecs", &timeoutsecs)
	if err != nil {
		return fmt.Errorf(`error parsing "timeoutsecs": ` + err.Error())
	}
	var workflowbuildid string
	err = flags.ParseFlag(cmd.Flags(), "workflowbuildid", &workflowbuildid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowbuildid": ` + err.Error())
	}
	var workflowbuildidBodyDefault string
	workflowbuildidBody := &workflowbuildidBodyDefault
	err = flags.ParseFlag(cmd.Flags(), "workflowbuildid-body", &workflowbuildidBody)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowbuildid-body": ` + err.Error())
	}
	var workflowbuildversionDefault int32
	workflowbuildversion := &workflowbuildversionDefault
	err = flags.ParseFlag(cmd.Flags(), "workflowbuildversion", &workflowbuildversion)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowbuildversion": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.WorkflowRunPost{

		Description:          description,
		Ended:                ended,
		Failuremessage:       failuremessage,
		Id:                   id,
		Inputdata:            inputdata,
		Name:                 name,
		Outputdata:           outputdata,
		Started:              started,
		Status:               status,
		Timeoutsecs:          timeoutsecs,
		Workflowbuildid:      workflowbuildidBody,
		Workflowbuildversion: workflowbuildversion,
	}

	resp, err := client.CatalogService.CreateWorkflowRun(workflowid, workflowbuildid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// DeleteActionByIdForRule Deletes the action with the specified ID that is associated with the specified rule resource name.
func DeleteActionByIdForRule(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}

	err = client.CatalogService.DeleteActionByIdForRule(ruleresourcename, actionid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteActionByIdForRuleById Deletes the action with the specified ID that is associated with the specified rule.
func DeleteActionByIdForRuleById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}

	err = client.CatalogService.DeleteActionByIdForRuleById(ruleid, actionid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteAnnotationOfDashboardById Deletes the annotation with the speciifed ID that is associted with the specified dashboard.
func DeleteAnnotationOfDashboardById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var annotationid string
	err = flags.ParseFlag(cmd.Flags(), "annotationid", &annotationid)
	if err != nil {
		return fmt.Errorf(`error parsing "annotationid": ` + err.Error())
	}
	var dashboardid string
	err = flags.ParseFlag(cmd.Flags(), "dashboardid", &dashboardid)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardid": ` + err.Error())
	}

	err = client.CatalogService.DeleteAnnotationOfDashboardById(dashboardid, annotationid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteAnnotationOfDashboardByResourceName Deletes the annotation with the specified ID that is associated with the specified dashboard resource name.
func DeleteAnnotationOfDashboardByResourceName(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var annotationid string
	err = flags.ParseFlag(cmd.Flags(), "annotationid", &annotationid)
	if err != nil {
		return fmt.Errorf(`error parsing "annotationid": ` + err.Error())
	}
	var dashboardresourcename string
	err = flags.ParseFlag(cmd.Flags(), "dashboardresourcename", &dashboardresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardresourcename": ` + err.Error())
	}

	err = client.CatalogService.DeleteAnnotationOfDashboardByResourceName(dashboardresourcename, annotationid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteAnnotationOfDatasetById Deletes the annotation with the specified ID that is associated with the specified dataset.
func DeleteAnnotationOfDatasetById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var annotationid string
	err = flags.ParseFlag(cmd.Flags(), "annotationid", &annotationid)
	if err != nil {
		return fmt.Errorf(`error parsing "annotationid": ` + err.Error())
	}
	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}

	err = client.CatalogService.DeleteAnnotationOfDatasetById(datasetid, annotationid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteAnnotationOfDatasetByResourceName Deletes the annotation with the specified iD that is associated with the specified dataset resource name.
func DeleteAnnotationOfDatasetByResourceName(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var annotationid string
	err = flags.ParseFlag(cmd.Flags(), "annotationid", &annotationid)
	if err != nil {
		return fmt.Errorf(`error parsing "annotationid": ` + err.Error())
	}
	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}

	err = client.CatalogService.DeleteAnnotationOfDatasetByResourceName(datasetresourcename, annotationid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteDashboardById Deletes the dashboard with the specified ID.
func DeleteDashboardById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var dashboardid string
	err = flags.ParseFlag(cmd.Flags(), "dashboardid", &dashboardid)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardid": ` + err.Error())
	}

	err = client.CatalogService.DeleteDashboardById(dashboardid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteDashboardByResourceName Deletes the dashboard with the specified resource name.
func DeleteDashboardByResourceName(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var dashboardresourcename string
	err = flags.ParseFlag(cmd.Flags(), "dashboardresourcename", &dashboardresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardresourcename": ` + err.Error())
	}

	err = client.CatalogService.DeleteDashboardByResourceName(dashboardresourcename)
	if err != nil {
		return err
	}

	return nil
}

// DeleteDataset Deletes the dataset with the specified resource name, along with its dependencies. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
func DeleteDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}

	err = client.CatalogService.DeleteDataset(datasetresourcename)
	if err != nil {
		return err
	}

	return nil
}

// DeleteDatasetById Deletes the dataset with the specified ID. Deleting a dataset also deletes its dependent objects, such as fields.
func DeleteDatasetById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}

	err = client.CatalogService.DeleteDatasetById(datasetid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteFieldByIdForDataset Deletes the field with the specified ID that is part of the specified dataset.
func DeleteFieldByIdForDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var fieldid string
	err = flags.ParseFlag(cmd.Flags(), "fieldid", &fieldid)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldid": ` + err.Error())
	}

	err = client.CatalogService.DeleteFieldByIdForDataset(datasetresourcename, fieldid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteFieldByIdForDatasetById Deletes the field with the specified ID that is part of the specified dataset.
func DeleteFieldByIdForDatasetById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var fieldid string
	err = flags.ParseFlag(cmd.Flags(), "fieldid", &fieldid)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldid": ` + err.Error())
	}

	err = client.CatalogService.DeleteFieldByIdForDatasetById(datasetid, fieldid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteRelationshipById Deletes the relationship with the specified relationship ID. Deleting a relationship also deletes any objects that are dependents of that relationship, such as relationship fields.
func DeleteRelationshipById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var relationshipid string
	err = flags.ParseFlag(cmd.Flags(), "relationshipid", &relationshipid)
	if err != nil {
		return fmt.Errorf(`error parsing "relationshipid": ` + err.Error())
	}

	err = client.CatalogService.DeleteRelationshipById(relationshipid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteRule Deletes the rule with the specified resource name and its dependencies.
func DeleteRule(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}

	err = client.CatalogService.DeleteRule(ruleresourcename)
	if err != nil {
		return err
	}

	return nil
}

// DeleteRuleById Deletes the rule with the specfied ID. Deleting a rule also deleletes any objects that are dependents of that rule, such as rule actions.
func DeleteRuleById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}

	err = client.CatalogService.DeleteRuleById(ruleid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteWorkflowBuildById Deletes the workflow build with the specified workflow build ID.
func DeleteWorkflowBuildById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var workflowbuildid string
	err = flags.ParseFlag(cmd.Flags(), "workflowbuildid", &workflowbuildid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowbuildid": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}

	err = client.CatalogService.DeleteWorkflowBuildById(workflowid, workflowbuildid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteWorkflowById Deletes the workflow with the specified workflow ID.
func DeleteWorkflowById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}

	err = client.CatalogService.DeleteWorkflowById(workflowid)
	if err != nil {
		return err
	}

	return nil
}

// DeleteWorkflowRunById Deletes the workflow run with the specified workflow run ID.
func DeleteWorkflowRunById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var workflowbuildid string
	err = flags.ParseFlag(cmd.Flags(), "workflowbuildid", &workflowbuildid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowbuildid": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}
	var workflowrunid string
	err = flags.ParseFlag(cmd.Flags(), "workflowrunid", &workflowrunid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowrunid": ` + err.Error())
	}

	err = client.CatalogService.DeleteWorkflowRunById(workflowid, workflowbuildid, workflowrunid)
	if err != nil {
		return err
	}

	return nil
}

// GetActionByIdForRule Returns the action with the specified ID that is associated with the specified rule resource name.
func GetActionByIdForRule(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}

	resp, err := client.CatalogService.GetActionByIdForRule(ruleresourcename, actionid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetActionByIdForRuleById Returns information about the action with the specified ID that is associated with the specified rule.
func GetActionByIdForRuleById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}

	resp, err := client.CatalogService.GetActionByIdForRuleById(ruleid, actionid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetDashboardById Returns information about the dashboard with the specified ID.
func GetDashboardById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var dashboardid string
	err = flags.ParseFlag(cmd.Flags(), "dashboardid", &dashboardid)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardid": ` + err.Error())
	}

	resp, err := client.CatalogService.GetDashboardById(dashboardid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetDashboardByResourceName Returns information about the dashboard with the specified resource name.
func GetDashboardByResourceName(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var dashboardresourcename string
	err = flags.ParseFlag(cmd.Flags(), "dashboardresourcename", &dashboardresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardresourcename": ` + err.Error())
	}

	resp, err := client.CatalogService.GetDashboardByResourceName(dashboardresourcename)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetDataset Returns the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
func GetDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var maxstaleDefault int32
	maxstale := &maxstaleDefault
	err = flags.ParseFlag(cmd.Flags(), "maxstale", &maxstale)
	if err != nil {
		return fmt.Errorf(`error parsing "maxstale": ` + err.Error())
	}
	// Form query params
	generated_query := model.GetDatasetQueryParams{}
	generated_query.Maxstale = maxstale

	resp, err := client.CatalogService.GetDataset(datasetresourcename, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetDatasetById Returns information about the dataset with the specified ID.
func GetDatasetById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var maxstaleDefault int32
	maxstale := &maxstaleDefault
	err = flags.ParseFlag(cmd.Flags(), "maxstale", &maxstale)
	if err != nil {
		return fmt.Errorf(`error parsing "maxstale": ` + err.Error())
	}
	// Form query params
	generated_query := model.GetDatasetByIdQueryParams{}
	generated_query.Maxstale = maxstale

	resp, err := client.CatalogService.GetDatasetById(datasetid, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetFieldById Returns the field with the specified field ID.
func GetFieldById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var fieldid string
	err = flags.ParseFlag(cmd.Flags(), "fieldid", &fieldid)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldid": ` + err.Error())
	}

	resp, err := client.CatalogService.GetFieldById(fieldid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetFieldByIdForDataset Returns the field with the specified ID that is part of the specified dataset.
func GetFieldByIdForDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var fieldid string
	err = flags.ParseFlag(cmd.Flags(), "fieldid", &fieldid)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldid": ` + err.Error())
	}

	resp, err := client.CatalogService.GetFieldByIdForDataset(datasetresourcename, fieldid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetFieldByIdForDatasetById Returns the field with the specified ID that is part of the specified dataset.
func GetFieldByIdForDatasetById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var fieldid string
	err = flags.ParseFlag(cmd.Flags(), "fieldid", &fieldid)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldid": ` + err.Error())
	}

	resp, err := client.CatalogService.GetFieldByIdForDatasetById(datasetid, fieldid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetRelationshipById Returns the relationship with the specified relationship ID.
func GetRelationshipById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var relationshipid string
	err = flags.ParseFlag(cmd.Flags(), "relationshipid", &relationshipid)
	if err != nil {
		return fmt.Errorf(`error parsing "relationshipid": ` + err.Error())
	}

	resp, err := client.CatalogService.GetRelationshipById(relationshipid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetRule Returrns the rule with the specified resource name.
func GetRule(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}

	resp, err := client.CatalogService.GetRule(ruleresourcename)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetRuleById Returns information about rule with the specified rule ID.
func GetRuleById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}

	resp, err := client.CatalogService.GetRuleById(ruleid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetWorkflowBuildById Returns information about the workflow build with the specified workflow build ID.
func GetWorkflowBuildById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var workflowbuildid string
	err = flags.ParseFlag(cmd.Flags(), "workflowbuildid", &workflowbuildid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowbuildid": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}

	resp, err := client.CatalogService.GetWorkflowBuildById(workflowid, workflowbuildid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetWorkflowById Returns information about the workflow with the specified workflow ID.
func GetWorkflowById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}

	resp, err := client.CatalogService.GetWorkflowById(workflowid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetWorkflowRunById Returns information about the workflow run with the specified workflow build ID.
func GetWorkflowRunById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var workflowbuildid string
	err = flags.ParseFlag(cmd.Flags(), "workflowbuildid", &workflowbuildid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowbuildid": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}
	var workflowrunid string
	err = flags.ParseFlag(cmd.Flags(), "workflowrunid", &workflowrunid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowrunid": ` + err.Error())
	}

	resp, err := client.CatalogService.GetWorkflowRunById(workflowid, workflowbuildid, workflowrunid)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListActionsForRule Returns the list of actions that are associated with the specified rule.
func ListActionsForRule(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListActionsForRuleQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListActionsForRule(ruleresourcename, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListActionsForRuleById Returns the set of actions that are part of the specified rule.
func ListActionsForRuleById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListActionsForRuleByIdQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListActionsForRuleById(ruleid, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListAnnotations Returns the set of annotations across all objects.
func ListAnnotations(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListAnnotationsQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListAnnotations(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListAnnotationsForDashboardById Returns the set of annotations that are associated with the specified dashboard.
func ListAnnotationsForDashboardById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var dashboardid string
	err = flags.ParseFlag(cmd.Flags(), "dashboardid", &dashboardid)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardid": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListAnnotationsForDashboardByIdQueryParams{}
	generated_query.Filter = filter

	resp, err := client.CatalogService.ListAnnotationsForDashboardById(dashboardid, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListAnnotationsForDashboardByResourceName Returns the set of annotations that are associated with the specified dashboard resource name.
func ListAnnotationsForDashboardByResourceName(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var dashboardresourcename string
	err = flags.ParseFlag(cmd.Flags(), "dashboardresourcename", &dashboardresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardresourcename": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListAnnotationsForDashboardByResourceNameQueryParams{}
	generated_query.Filter = filter

	resp, err := client.CatalogService.ListAnnotationsForDashboardByResourceName(dashboardresourcename, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListAnnotationsForDatasetById Returns the set of annotations that are associated with the specified dataset.
func ListAnnotationsForDatasetById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListAnnotationsForDatasetByIdQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListAnnotationsForDatasetById(datasetid, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListAnnotationsForDatasetByResourceName Returns the set of annotations that are associated with the specified dataset resource name.
func ListAnnotationsForDatasetByResourceName(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListAnnotationsForDatasetByResourceNameQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListAnnotationsForDatasetByResourceName(datasetresourcename, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListDashboards Returns a list of dashboards.
func ListDashboards(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListDashboardsQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListDashboards(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListDatasets Returns a list of all datasets. Use a filter to return a specific list of datasets.
func ListDatasets(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var maxstaleDefault int32
	maxstale := &maxstaleDefault
	err = flags.ParseFlag(cmd.Flags(), "maxstale", &maxstale)
	if err != nil {
		return fmt.Errorf(`error parsing "maxstale": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListDatasetsQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Maxstale = maxstale
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListDatasets(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListFields Returns a list of all fields in the Metadata Catalog.
func ListFields(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListFieldsQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListFields(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListFieldsForDataset Returns the list of fields in the specified dataset.
func ListFieldsForDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListFieldsForDatasetQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListFieldsForDataset(datasetresourcename, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListFieldsForDatasetById Returns the set of fields for the the dataset with the specified ID.
func ListFieldsForDatasetById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListFieldsForDatasetByIdQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListFieldsForDatasetById(datasetid, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListModules Returns a list of all modules. Use a filter to return a specific list of modules.
func ListModules(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListModulesQueryParams{}
	generated_query.Filter = filter

	resp, err := client.CatalogService.ListModules(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListRelationships Returns a list of all relationships. Use a filter to return a specific list of relationships.
func ListRelationships(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListRelationshipsQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListRelationships(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListRules Returns a list of rules that match a filter, if specified, otherwise returns all rules.
func ListRules(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListRulesQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListRules(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListWorkflowBuilds Returns a list of Machine Learning workflow builds.
func ListWorkflowBuilds(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListWorkflowBuildsQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListWorkflowBuilds(workflowid, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListWorkflowRuns Returns a list of Machine Learning workflow runs for specified workflow build ID.
func ListWorkflowRuns(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	var workflowbuildid string
	err = flags.ParseFlag(cmd.Flags(), "workflowbuildid", &workflowbuildid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowbuildid": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListWorkflowRunsQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListWorkflowRuns(workflowid, workflowbuildid, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListWorkflows Return a list of Machine Learning workflow configurations.
func ListWorkflows(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var countDefault int32
	count := &countDefault
	err = flags.ParseFlag(cmd.Flags(), "count", &count)
	if err != nil {
		return fmt.Errorf(`error parsing "count": ` + err.Error())
	}
	var filter string
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var orderby []string
	err = flags.ParseFlag(cmd.Flags(), "orderby", &orderby)
	if err != nil {
		return fmt.Errorf(`error parsing "orderby": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListWorkflowsQueryParams{}
	generated_query.Count = count
	generated_query.Filter = filter
	generated_query.Offset = offset
	generated_query.Orderby = orderby

	resp, err := client.CatalogService.ListWorkflows(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleAliasAction Modifies the action with the specified ID that is associated with the specified rule resource name.
func UpdateActionByIdForRuleAliasAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var aliasDefault string
	alias := &aliasDefault
	err = flags.ParseFlag(cmd.Flags(), "alias", &alias)
	if err != nil {
		return fmt.Errorf(`error parsing "alias": ` + err.Error())
	}
	var fieldDefault string
	field := &fieldDefault
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var kindDefault model.AliasActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.AliasActionPatch{

		Alias:   alias,
		Field:   field,
		Kind:    kind,
		Owner:   owner,
		Version: version,
	}

	resp, err := client.CatalogService.UpdateActionByIdForRule(ruleresourcename, actionid, model.MakeActionPatchFromAliasActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleAutoKvAction Modifies the action with the specified ID that is associated with the specified rule resource name.
func UpdateActionByIdForRuleAutoKvAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var kindDefault model.AutoKvActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var modeDefault string
	mode := &modeDefault
	err = flags.ParseFlag(cmd.Flags(), "mode", &mode)
	if err != nil {
		return fmt.Errorf(`error parsing "mode": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.AutoKvActionPatch{

		Kind:    kind,
		Mode:    mode,
		Owner:   owner,
		Version: version,
	}

	resp, err := client.CatalogService.UpdateActionByIdForRule(ruleresourcename, actionid, model.MakeActionPatchFromAutoKvActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleByIdAliasAction Modifies the action with the specified ID that is associated with the specified rule.
func UpdateActionByIdForRuleByIdAliasAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var aliasDefault string
	alias := &aliasDefault
	err = flags.ParseFlag(cmd.Flags(), "alias", &alias)
	if err != nil {
		return fmt.Errorf(`error parsing "alias": ` + err.Error())
	}
	var fieldDefault string
	field := &fieldDefault
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var kindDefault model.AliasActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.AliasActionPatch{

		Alias:   alias,
		Field:   field,
		Kind:    kind,
		Owner:   owner,
		Version: version,
	}

	resp, err := client.CatalogService.UpdateActionByIdForRuleById(ruleid, actionid, model.MakeActionPatchFromAliasActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleByIdAutoKvAction Modifies the action with the specified ID that is associated with the specified rule.
func UpdateActionByIdForRuleByIdAutoKvAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var kindDefault model.AutoKvActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var modeDefault string
	mode := &modeDefault
	err = flags.ParseFlag(cmd.Flags(), "mode", &mode)
	if err != nil {
		return fmt.Errorf(`error parsing "mode": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.AutoKvActionPatch{

		Kind:    kind,
		Mode:    mode,
		Owner:   owner,
		Version: version,
	}

	resp, err := client.CatalogService.UpdateActionByIdForRuleById(ruleid, actionid, model.MakeActionPatchFromAutoKvActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleByIdEvalAction Modifies the action with the specified ID that is associated with the specified rule.
func UpdateActionByIdForRuleByIdEvalAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var expressionDefault string
	expression := &expressionDefault
	err = flags.ParseFlag(cmd.Flags(), "expression", &expression)
	if err != nil {
		return fmt.Errorf(`error parsing "expression": ` + err.Error())
	}
	var fieldDefault string
	field := &fieldDefault
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var kindDefault model.EvalActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.EvalActionPatch{

		Expression: expression,
		Field:      field,
		Kind:       kind,
		Owner:      owner,
		Version:    version,
	}

	resp, err := client.CatalogService.UpdateActionByIdForRuleById(ruleid, actionid, model.MakeActionPatchFromEvalActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleByIdLookupAction Modifies the action with the specified ID that is associated with the specified rule.
func UpdateActionByIdForRuleByIdLookupAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var expressionDefault string
	expression := &expressionDefault
	err = flags.ParseFlag(cmd.Flags(), "expression", &expression)
	if err != nil {
		return fmt.Errorf(`error parsing "expression": ` + err.Error())
	}
	var kindDefault model.LookupActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.LookupActionPatch{

		Expression: expression,
		Kind:       kind,
		Owner:      owner,
		Version:    version,
	}

	resp, err := client.CatalogService.UpdateActionByIdForRuleById(ruleid, actionid, model.MakeActionPatchFromLookupActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleByIdRegexAction Modifies the action with the specified ID that is associated with the specified rule.
func UpdateActionByIdForRuleByIdRegexAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var fieldDefault string
	field := &fieldDefault
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var kindDefault model.RegexActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var limitDefault int32
	limit := &limitDefault
	err = flags.ParseFlag(cmd.Flags(), "limit", &limit)
	if err != nil {
		return fmt.Errorf(`error parsing "limit": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var patternDefault string
	pattern := &patternDefault
	err = flags.ParseFlag(cmd.Flags(), "pattern", &pattern)
	if err != nil {
		return fmt.Errorf(`error parsing "pattern": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RegexActionPatch{

		Field:   field,
		Kind:    kind,
		Limit:   limit,
		Owner:   owner,
		Pattern: pattern,
		Version: version,
	}

	resp, err := client.CatalogService.UpdateActionByIdForRuleById(ruleid, actionid, model.MakeActionPatchFromRegexActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleEvalAction Modifies the action with the specified ID that is associated with the specified rule resource name.
func UpdateActionByIdForRuleEvalAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var expressionDefault string
	expression := &expressionDefault
	err = flags.ParseFlag(cmd.Flags(), "expression", &expression)
	if err != nil {
		return fmt.Errorf(`error parsing "expression": ` + err.Error())
	}
	var fieldDefault string
	field := &fieldDefault
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var kindDefault model.EvalActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.EvalActionPatch{

		Expression: expression,
		Field:      field,
		Kind:       kind,
		Owner:      owner,
		Version:    version,
	}

	resp, err := client.CatalogService.UpdateActionByIdForRule(ruleresourcename, actionid, model.MakeActionPatchFromEvalActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleLookupAction Modifies the action with the specified ID that is associated with the specified rule resource name.
func UpdateActionByIdForRuleLookupAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var expressionDefault string
	expression := &expressionDefault
	err = flags.ParseFlag(cmd.Flags(), "expression", &expression)
	if err != nil {
		return fmt.Errorf(`error parsing "expression": ` + err.Error())
	}
	var kindDefault model.LookupActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.LookupActionPatch{

		Expression: expression,
		Kind:       kind,
		Owner:      owner,
		Version:    version,
	}

	resp, err := client.CatalogService.UpdateActionByIdForRule(ruleresourcename, actionid, model.MakeActionPatchFromLookupActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateActionByIdForRuleRegexAction Modifies the action with the specified ID that is associated with the specified rule resource name.
func UpdateActionByIdForRuleRegexAction(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var actionid string
	err = flags.ParseFlag(cmd.Flags(), "actionid", &actionid)
	if err != nil {
		return fmt.Errorf(`error parsing "actionid": ` + err.Error())
	}
	var fieldDefault string
	field := &fieldDefault
	err = flags.ParseFlag(cmd.Flags(), "field", &field)
	if err != nil {
		return fmt.Errorf(`error parsing "field": ` + err.Error())
	}
	var kindDefault model.RegexActionKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var limitDefault int32
	limit := &limitDefault
	err = flags.ParseFlag(cmd.Flags(), "limit", &limit)
	if err != nil {
		return fmt.Errorf(`error parsing "limit": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var patternDefault string
	pattern := &patternDefault
	err = flags.ParseFlag(cmd.Flags(), "pattern", &pattern)
	if err != nil {
		return fmt.Errorf(`error parsing "pattern": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RegexActionPatch{

		Field:   field,
		Kind:    kind,
		Limit:   limit,
		Owner:   owner,
		Pattern: pattern,
		Version: version,
	}

	resp, err := client.CatalogService.UpdateActionByIdForRule(ruleresourcename, actionid, model.MakeActionPatchFromRegexActionPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDashboardById Modifies the dashboard with the specified ID.
func UpdateDashboardById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var dashboardid string
	err = flags.ParseFlag(cmd.Flags(), "dashboardid", &dashboardid)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardid": ` + err.Error())
	}
	var definitionDefault string
	definition := &definitionDefault
	err = flags.ParseFlag(cmd.Flags(), "definition", &definition)
	if err != nil {
		return fmt.Errorf(`error parsing "definition": ` + err.Error())
	}
	var isactiveDefault bool
	isactive := &isactiveDefault
	err = flags.ParseFlag(cmd.Flags(), "isactive", &isactive)
	if err != nil {
		return fmt.Errorf(`error parsing "isactive": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.DashboardPatch{

		Definition: definition,
		Isactive:   isactive,
		Module:     module,
		Name:       name,
		Version:    version,
	}

	resp, err := client.CatalogService.UpdateDashboardById(dashboardid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDashboardByResourceName Modifies the dashboard with the specified resource name.
func UpdateDashboardByResourceName(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var dashboardresourcename string
	err = flags.ParseFlag(cmd.Flags(), "dashboardresourcename", &dashboardresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "dashboardresourcename": ` + err.Error())
	}
	var definitionDefault string
	definition := &definitionDefault
	err = flags.ParseFlag(cmd.Flags(), "definition", &definition)
	if err != nil {
		return fmt.Errorf(`error parsing "definition": ` + err.Error())
	}
	var isactiveDefault bool
	isactive := &isactiveDefault
	err = flags.ParseFlag(cmd.Flags(), "isactive", &isactive)
	if err != nil {
		return fmt.Errorf(`error parsing "isactive": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.DashboardPatch{

		Definition: definition,
		Isactive:   isactive,
		Module:     module,
		Name:       name,
		Version:    version,
	}

	err = client.CatalogService.UpdateDashboardByResourceName(dashboardresourcename, generated_request_body)
	if err != nil {
		return err
	}

	return nil
}

// UpdateDatasetByIdImportDataset Modifies the dataset with the specified ID.
func UpdateDatasetByIdImportDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.ImportDatasetPatch{

		Module: module,
		Name:   name,
		Owner:  owner,
	}

	resp, err := client.CatalogService.UpdateDatasetById(datasetid, model.MakeDatasetPatchFromImportDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetByIdIndexDataset Modifies the dataset with the specified ID.
func UpdateDatasetByIdIndexDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var disabledDefault bool
	disabled := &disabledDefault
	err = flags.ParseFlag(cmd.Flags(), "disabled", &disabled)
	if err != nil {
		return fmt.Errorf(`error parsing "disabled": ` + err.Error())
	}
	var frozenTimePeriodInSecsDefault int32
	frozenTimePeriodInSecs := &frozenTimePeriodInSecsDefault
	err = flags.ParseFlag(cmd.Flags(), "frozen-time-period-in-secs", &frozenTimePeriodInSecs)
	if err != nil {
		return fmt.Errorf(`error parsing "frozen-time-period-in-secs": ` + err.Error())
	}
	var kindDefault model.IndexDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.IndexDatasetPatch{

		Disabled:               disabled,
		FrozenTimePeriodInSecs: frozenTimePeriodInSecs,
		Kind:                   kind,
		Module:                 module,
		Name:                   name,
		Owner:                  owner,
	}

	resp, err := client.CatalogService.UpdateDatasetById(datasetid, model.MakeDatasetPatchFromIndexDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetByIdKvCollectionDataset Modifies the dataset with the specified ID.
func UpdateDatasetByIdKvCollectionDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var kindDefault model.KvCollectionDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.KvCollectionDatasetPatch{

		Kind:   kind,
		Module: module,
		Name:   name,
		Owner:  owner,
	}

	resp, err := client.CatalogService.UpdateDatasetById(datasetid, model.MakeDatasetPatchFromKvCollectionDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetByIdLookupDataset Modifies the dataset with the specified ID.
func UpdateDatasetByIdLookupDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var caseSensitiveMatchDefault bool
	caseSensitiveMatch := &caseSensitiveMatchDefault
	err = flags.ParseFlag(cmd.Flags(), "case-sensitive-match", &caseSensitiveMatch)
	if err != nil {
		return fmt.Errorf(`error parsing "case-sensitive-match": ` + err.Error())
	}
	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var externalKindDefault model.LookupDatasetExternalKind
	externalKind := &externalKindDefault
	err = flags.ParseFlag(cmd.Flags(), "external-kind", &externalKind)
	if err != nil {
		return fmt.Errorf(`error parsing "external-kind": ` + err.Error())
	}
	var externalNameDefault string
	externalName := &externalNameDefault
	err = flags.ParseFlag(cmd.Flags(), "external-name", &externalName)
	if err != nil {
		return fmt.Errorf(`error parsing "external-name": ` + err.Error())
	}
	var filterDefault string
	filter := &filterDefault
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var kindDefault model.LookupDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.LookupDatasetPatch{

		CaseSensitiveMatch: caseSensitiveMatch,
		ExternalKind:       externalKind,
		ExternalName:       externalName,
		Filter:             filter,
		Kind:               kind,
		Module:             module,
		Name:               name,
		Owner:              owner,
	}

	resp, err := client.CatalogService.UpdateDatasetById(datasetid, model.MakeDatasetPatchFromLookupDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetByIdMetricDataset Modifies the dataset with the specified ID.
func UpdateDatasetByIdMetricDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var disabledDefault bool
	disabled := &disabledDefault
	err = flags.ParseFlag(cmd.Flags(), "disabled", &disabled)
	if err != nil {
		return fmt.Errorf(`error parsing "disabled": ` + err.Error())
	}
	var frozenTimePeriodInSecsDefault int32
	frozenTimePeriodInSecs := &frozenTimePeriodInSecsDefault
	err = flags.ParseFlag(cmd.Flags(), "frozen-time-period-in-secs", &frozenTimePeriodInSecs)
	if err != nil {
		return fmt.Errorf(`error parsing "frozen-time-period-in-secs": ` + err.Error())
	}
	var kindDefault model.MetricDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.MetricDatasetPatch{

		Disabled:               disabled,
		FrozenTimePeriodInSecs: frozenTimePeriodInSecs,
		Kind:                   kind,
		Module:                 module,
		Name:                   name,
		Owner:                  owner,
	}

	resp, err := client.CatalogService.UpdateDatasetById(datasetid, model.MakeDatasetPatchFromMetricDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetByIdViewDataset Modifies the dataset with the specified ID.
func UpdateDatasetByIdViewDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var kindDefault model.ViewDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var searchDefault string
	search := &searchDefault
	err = flags.ParseFlag(cmd.Flags(), "search", &search)
	if err != nil {
		return fmt.Errorf(`error parsing "search": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.ViewDatasetPatch{

		Kind:   kind,
		Module: module,
		Name:   name,
		Owner:  owner,
		Search: search,
	}

	resp, err := client.CatalogService.UpdateDatasetById(datasetid, model.MakeDatasetPatchFromViewDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetImportDataset Modifies the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
func UpdateDatasetImportDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.ImportDatasetPatch{

		Module: module,
		Name:   name,
		Owner:  owner,
	}

	resp, err := client.CatalogService.UpdateDataset(datasetresourcename, model.MakeDatasetPatchFromImportDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetIndexDataset Modifies the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
func UpdateDatasetIndexDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var disabledDefault bool
	disabled := &disabledDefault
	err = flags.ParseFlag(cmd.Flags(), "disabled", &disabled)
	if err != nil {
		return fmt.Errorf(`error parsing "disabled": ` + err.Error())
	}
	var frozenTimePeriodInSecsDefault int32
	frozenTimePeriodInSecs := &frozenTimePeriodInSecsDefault
	err = flags.ParseFlag(cmd.Flags(), "frozen-time-period-in-secs", &frozenTimePeriodInSecs)
	if err != nil {
		return fmt.Errorf(`error parsing "frozen-time-period-in-secs": ` + err.Error())
	}
	var kindDefault model.IndexDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.IndexDatasetPatch{

		Disabled:               disabled,
		FrozenTimePeriodInSecs: frozenTimePeriodInSecs,
		Kind:                   kind,
		Module:                 module,
		Name:                   name,
		Owner:                  owner,
	}

	resp, err := client.CatalogService.UpdateDataset(datasetresourcename, model.MakeDatasetPatchFromIndexDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetKvCollectionDataset Modifies the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
func UpdateDatasetKvCollectionDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var kindDefault model.KvCollectionDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.KvCollectionDatasetPatch{

		Kind:   kind,
		Module: module,
		Name:   name,
		Owner:  owner,
	}

	resp, err := client.CatalogService.UpdateDataset(datasetresourcename, model.MakeDatasetPatchFromKvCollectionDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetLookupDataset Modifies the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
func UpdateDatasetLookupDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var caseSensitiveMatchDefault bool
	caseSensitiveMatch := &caseSensitiveMatchDefault
	err = flags.ParseFlag(cmd.Flags(), "case-sensitive-match", &caseSensitiveMatch)
	if err != nil {
		return fmt.Errorf(`error parsing "case-sensitive-match": ` + err.Error())
	}
	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var externalKindDefault model.LookupDatasetExternalKind
	externalKind := &externalKindDefault
	err = flags.ParseFlag(cmd.Flags(), "external-kind", &externalKind)
	if err != nil {
		return fmt.Errorf(`error parsing "external-kind": ` + err.Error())
	}
	var externalNameDefault string
	externalName := &externalNameDefault
	err = flags.ParseFlag(cmd.Flags(), "external-name", &externalName)
	if err != nil {
		return fmt.Errorf(`error parsing "external-name": ` + err.Error())
	}
	var filterDefault string
	filter := &filterDefault
	err = flags.ParseFlag(cmd.Flags(), "filter", &filter)
	if err != nil {
		return fmt.Errorf(`error parsing "filter": ` + err.Error())
	}
	var kindDefault model.LookupDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.LookupDatasetPatch{

		CaseSensitiveMatch: caseSensitiveMatch,
		ExternalKind:       externalKind,
		ExternalName:       externalName,
		Filter:             filter,
		Kind:               kind,
		Module:             module,
		Name:               name,
		Owner:              owner,
	}

	resp, err := client.CatalogService.UpdateDataset(datasetresourcename, model.MakeDatasetPatchFromLookupDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetMetricDataset Modifies the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
func UpdateDatasetMetricDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var disabledDefault bool
	disabled := &disabledDefault
	err = flags.ParseFlag(cmd.Flags(), "disabled", &disabled)
	if err != nil {
		return fmt.Errorf(`error parsing "disabled": ` + err.Error())
	}
	var frozenTimePeriodInSecsDefault int32
	frozenTimePeriodInSecs := &frozenTimePeriodInSecsDefault
	err = flags.ParseFlag(cmd.Flags(), "frozen-time-period-in-secs", &frozenTimePeriodInSecs)
	if err != nil {
		return fmt.Errorf(`error parsing "frozen-time-period-in-secs": ` + err.Error())
	}
	var kindDefault model.MetricDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.MetricDatasetPatch{

		Disabled:               disabled,
		FrozenTimePeriodInSecs: frozenTimePeriodInSecs,
		Kind:                   kind,
		Module:                 module,
		Name:                   name,
		Owner:                  owner,
	}

	resp, err := client.CatalogService.UpdateDataset(datasetresourcename, model.MakeDatasetPatchFromMetricDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateDatasetViewDataset Modifies the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
func UpdateDatasetViewDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var kindDefault model.ViewDatasetKind
	kind := &kindDefault
	err = flags.ParseFlag(cmd.Flags(), "kind", &kind)
	if err != nil {
		return fmt.Errorf(`error parsing "kind": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var searchDefault string
	search := &searchDefault
	err = flags.ParseFlag(cmd.Flags(), "search", &search)
	if err != nil {
		return fmt.Errorf(`error parsing "search": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.ViewDatasetPatch{

		Kind:   kind,
		Module: module,
		Name:   name,
		Owner:  owner,
		Search: search,
	}

	resp, err := client.CatalogService.UpdateDataset(datasetresourcename, model.MakeDatasetPatchFromViewDatasetPatch(generated_request_body))
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateFieldByIdForDataset Modifies the field with the specified ID that is part of the specified dataset.
func UpdateFieldByIdForDataset(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetresourcename string
	err = flags.ParseFlag(cmd.Flags(), "datasetresourcename", &datasetresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetresourcename": ` + err.Error())
	}
	var datatypeDefault model.FieldDataType
	datatype := &datatypeDefault
	err = flags.ParseFlag(cmd.Flags(), "datatype", &datatype)
	if err != nil {
		return fmt.Errorf(`error parsing "datatype": ` + err.Error())
	}
	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var fieldid string
	err = flags.ParseFlag(cmd.Flags(), "fieldid", &fieldid)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldid": ` + err.Error())
	}
	var fieldtypeDefault model.FieldType
	fieldtype := &fieldtypeDefault
	err = flags.ParseFlag(cmd.Flags(), "fieldtype", &fieldtype)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldtype": ` + err.Error())
	}
	var indexedDefault bool
	indexed := &indexedDefault
	err = flags.ParseFlag(cmd.Flags(), "indexed", &indexed)
	if err != nil {
		return fmt.Errorf(`error parsing "indexed": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var prevalenceDefault model.FieldPrevalence
	prevalence := &prevalenceDefault
	err = flags.ParseFlag(cmd.Flags(), "prevalence", &prevalence)
	if err != nil {
		return fmt.Errorf(`error parsing "prevalence": ` + err.Error())
	}
	var summaryDefault string
	summary := &summaryDefault
	err = flags.ParseFlag(cmd.Flags(), "summary", &summary)
	if err != nil {
		return fmt.Errorf(`error parsing "summary": ` + err.Error())
	}
	var titleDefault string
	title := &titleDefault
	err = flags.ParseFlag(cmd.Flags(), "title", &title)
	if err != nil {
		return fmt.Errorf(`error parsing "title": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.FieldPatch{

		Datatype:    datatype,
		Description: description,
		Fieldtype:   fieldtype,
		Indexed:     indexed,
		Name:        name,
		Prevalence:  prevalence,
		Summary:     summary,
		Title:       title,
	}

	resp, err := client.CatalogService.UpdateFieldByIdForDataset(datasetresourcename, fieldid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateFieldByIdForDatasetById Modifies the field with the specified ID that is part of the specified dataset.
func UpdateFieldByIdForDatasetById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var datasetid string
	err = flags.ParseFlag(cmd.Flags(), "datasetid", &datasetid)
	if err != nil {
		return fmt.Errorf(`error parsing "datasetid": ` + err.Error())
	}
	var datatypeDefault model.FieldDataType
	datatype := &datatypeDefault
	err = flags.ParseFlag(cmd.Flags(), "datatype", &datatype)
	if err != nil {
		return fmt.Errorf(`error parsing "datatype": ` + err.Error())
	}
	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var fieldid string
	err = flags.ParseFlag(cmd.Flags(), "fieldid", &fieldid)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldid": ` + err.Error())
	}
	var fieldtypeDefault model.FieldType
	fieldtype := &fieldtypeDefault
	err = flags.ParseFlag(cmd.Flags(), "fieldtype", &fieldtype)
	if err != nil {
		return fmt.Errorf(`error parsing "fieldtype": ` + err.Error())
	}
	var indexedDefault bool
	indexed := &indexedDefault
	err = flags.ParseFlag(cmd.Flags(), "indexed", &indexed)
	if err != nil {
		return fmt.Errorf(`error parsing "indexed": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var prevalenceDefault model.FieldPrevalence
	prevalence := &prevalenceDefault
	err = flags.ParseFlag(cmd.Flags(), "prevalence", &prevalence)
	if err != nil {
		return fmt.Errorf(`error parsing "prevalence": ` + err.Error())
	}
	var summaryDefault string
	summary := &summaryDefault
	err = flags.ParseFlag(cmd.Flags(), "summary", &summary)
	if err != nil {
		return fmt.Errorf(`error parsing "summary": ` + err.Error())
	}
	var titleDefault string
	title := &titleDefault
	err = flags.ParseFlag(cmd.Flags(), "title", &title)
	if err != nil {
		return fmt.Errorf(`error parsing "title": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.FieldPatch{

		Datatype:    datatype,
		Description: description,
		Fieldtype:   fieldtype,
		Indexed:     indexed,
		Name:        name,
		Prevalence:  prevalence,
		Summary:     summary,
		Title:       title,
	}

	resp, err := client.CatalogService.UpdateFieldByIdForDatasetById(datasetid, fieldid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateRelationshipById Modifies the relationship with the specified relationship ID.
func UpdateRelationshipById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var relationshipid string
	err = flags.ParseFlag(cmd.Flags(), "relationshipid", &relationshipid)
	if err != nil {
		return fmt.Errorf(`error parsing "relationshipid": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RelationshipPatch{

		Name:  name,
		Owner: owner,
	}

	resp, err := client.CatalogService.UpdateRelationshipById(relationshipid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateRule Modifies the rule with the specified resource name.
func UpdateRule(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var matchDefault string
	match := &matchDefault
	err = flags.ParseFlag(cmd.Flags(), "match", &match)
	if err != nil {
		return fmt.Errorf(`error parsing "match": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleresourcename string
	err = flags.ParseFlag(cmd.Flags(), "ruleresourcename", &ruleresourcename)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleresourcename": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RulePatch{

		Match:   match,
		Module:  module,
		Name:    name,
		Owner:   owner,
		Version: version,
	}

	resp, err := client.CatalogService.UpdateRule(ruleresourcename, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateRuleById Modifies the rule with the specified rule ID.
func UpdateRuleById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var matchDefault string
	match := &matchDefault
	err = flags.ParseFlag(cmd.Flags(), "match", &match)
	if err != nil {
		return fmt.Errorf(`error parsing "match": ` + err.Error())
	}
	var moduleDefault string
	module := &moduleDefault
	err = flags.ParseFlag(cmd.Flags(), "module", &module)
	if err != nil {
		return fmt.Errorf(`error parsing "module": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var ownerDefault string
	owner := &ownerDefault
	err = flags.ParseFlag(cmd.Flags(), "owner", &owner)
	if err != nil {
		return fmt.Errorf(`error parsing "owner": ` + err.Error())
	}
	var ruleid string
	err = flags.ParseFlag(cmd.Flags(), "ruleid", &ruleid)
	if err != nil {
		return fmt.Errorf(`error parsing "ruleid": ` + err.Error())
	}
	var versionDefault int32
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.RulePatch{

		Match:   match,
		Module:  module,
		Name:    name,
		Owner:   owner,
		Version: version,
	}

	resp, err := client.CatalogService.UpdateRuleById(ruleid, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateWorkflowBuildById Modifies the workflow build with the specified workflow build ID.
func UpdateWorkflowBuildById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var statusDefault string
	status := &statusDefault
	err = flags.ParseFlag(cmd.Flags(), "status", &status)
	if err != nil {
		return fmt.Errorf(`error parsing "status": ` + err.Error())
	}
	var workflowbuildid string
	err = flags.ParseFlag(cmd.Flags(), "workflowbuildid", &workflowbuildid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowbuildid": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.WorkflowBuildPatch{

		Description: description,
		Name:        name,
		Status:      status,
	}

	err = client.CatalogService.UpdateWorkflowBuildById(workflowid, workflowbuildid, generated_request_body)
	if err != nil {
		return err
	}

	return nil
}

// UpdateWorkflowById Modifies the workflow with the specified workflow ID.
func UpdateWorkflowById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.WorkflowPatch{

		Description: description,
		Name:        name,
	}

	err = client.CatalogService.UpdateWorkflowById(workflowid, generated_request_body)
	if err != nil {
		return err
	}

	return nil
}

// UpdateWorkflowRunById Modifies the workflow run with the specified workflow run ID.
func UpdateWorkflowRunById(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var statusDefault string
	status := &statusDefault
	err = flags.ParseFlag(cmd.Flags(), "status", &status)
	if err != nil {
		return fmt.Errorf(`error parsing "status": ` + err.Error())
	}
	var workflowbuildid string
	err = flags.ParseFlag(cmd.Flags(), "workflowbuildid", &workflowbuildid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowbuildid": ` + err.Error())
	}
	var workflowid string
	err = flags.ParseFlag(cmd.Flags(), "workflowid", &workflowid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowid": ` + err.Error())
	}
	var workflowrunid string
	err = flags.ParseFlag(cmd.Flags(), "workflowrunid", &workflowrunid)
	if err != nil {
		return fmt.Errorf(`error parsing "workflowrunid": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.WorkflowRunPatch{

		Description: description,
		Name:        name,
		Status:      status,
	}

	err = client.CatalogService.UpdateWorkflowRunById(workflowid, workflowbuildid, workflowrunid, generated_request_body)
	if err != nil {
		return err
	}

	return nil
}
