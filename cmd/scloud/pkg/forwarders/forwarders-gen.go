// Package forwarders -- generated by scloudgen
// !! DO NOT EDIT !!
//
package forwarders

import (
	"encoding/json"
	"fmt"
	"io/ioutil"

	"github.com/spf13/cobra"
	"github.com/splunk/splunk-cloud-sdk-go/cmd/scloud/auth"
	"github.com/splunk/splunk-cloud-sdk-go/cmd/scloud/flags"
	"github.com/splunk/splunk-cloud-sdk-go/cmd/scloud/jsonx"
	model "github.com/splunk/splunk-cloud-sdk-go/services/forwarders"
)

// AddCertificate Adds a certificate to a vacant slot on a tenant.
func AddCertificate(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var inputDatafile string
	err = flags.ParseFlag(cmd.Flags(), "input-datafile", &inputDatafile)
	if err != nil {
		return fmt.Errorf(`error parsing "input-datafile": ` + err.Error())
	}
	var pem string
	//porcess customized FileInput
	bytes, err := ioutil.ReadFile(inputDatafile)
	if err != nil {
		return err
	}
	err = json.Unmarshal(bytes, &pem)
	if err != nil {
		// TODO: Manual fix (do not delete) - to be added to scloud codegen
		// If failed to parse as JSON, try reading as simple string
		pem = string(bytes)
	}
	// Form the request body
	generated_request_body := model.Certificate{

		Pem: pem,
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.ForwardersService.AddCertificate(generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// DeleteCertificate Removes a certificate on a particular slot on a tenant.
func DeleteCertificate(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var slot string
	err = flags.ParseFlag(cmd.Flags(), "slot", &slot)
	if err != nil {
		return fmt.Errorf(`error parsing "slot": ` + err.Error())
	}

	// Silence Usage
	cmd.SilenceUsage = true

	err = client.ForwardersService.DeleteCertificate(slot)
	if err != nil {
		return err
	}

	return nil
}

// DeleteCertificates Removes all certificates on a tenant.
func DeleteCertificates(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Silence Usage
	cmd.SilenceUsage = true

	err = client.ForwardersService.DeleteCertificates()
	if err != nil {
		return err
	}

	return nil
}

// ListCertificates Returns a list of all certificates for a tenant.
func ListCertificates(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	// Silence Usage
	cmd.SilenceUsage = true

	resp, err := client.ForwardersService.ListCertificates()
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}
