// Package streams -- generated by scloudgen
// !! DO NOT EDIT !!
//
package streams

import (
	"fmt"

	"github.com/spf13/cobra"
	"github.com/splunk/splunk-cloud-sdk-go/cmd/scloud/auth"
	"github.com/splunk/splunk-cloud-sdk-go/cmd/scloud/flags"
	"github.com/splunk/splunk-cloud-sdk-go/cmd/scloud/jsonx"
	model "github.com/splunk/splunk-cloud-sdk-go/services/streams"
)

// ActivatePipeline Activates an existing pipeline.
func ActivatePipeline(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var activateLatestVersionDefault bool
	activateLatestVersion := &activateLatestVersionDefault
	err = flags.ParseFlag(cmd.Flags(), "activate-latest-version", &activateLatestVersion)
	if err != nil {
		return fmt.Errorf(`error parsing "activate-latest-version": ` + err.Error())
	}
	var allowNonRestoredStateDefault bool
	allowNonRestoredState := &allowNonRestoredStateDefault
	err = flags.ParseFlag(cmd.Flags(), "allow-non-restored-state", &allowNonRestoredState)
	if err != nil {
		return fmt.Errorf(`error parsing "allow-non-restored-state": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var skipRestoreStateDefault bool
	skipRestoreState := &skipRestoreStateDefault
	err = flags.ParseFlag(cmd.Flags(), "skip-restore-state", &skipRestoreState)
	if err != nil {
		return fmt.Errorf(`error parsing "skip-restore-state": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.ActivatePipelineRequest{

		ActivateLatestVersion: activateLatestVersion,
		AllowNonRestoredState: allowNonRestoredState,
		SkipRestoreState:      skipRestoreState,
	}

	resp, err := client.StreamsService.ActivatePipeline(id, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// Compile Compiles SPL2 and returns streams JSON.
func Compile(cmd *cobra.Command, args []string) error {

	var err error

	// Parse all flags

	var inputDatafile string
	err = flags.ParseFlag(cmd.Flags(), "input-datafile", &inputDatafile)
	if err != nil {
		return fmt.Errorf(`error parsing "input-datafile": ` + err.Error())
	}
	var validateDefault bool
	validate := &validateDefault
	err = flags.ParseFlag(cmd.Flags(), "validate", &validate)
	if err != nil {
		return fmt.Errorf(`error parsing "validate": ` + err.Error())
	}

	resp, err := CompileOverride(validate, inputDatafile)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateConnection Create a new DSP connection.
func CreateConnection(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var connectorId string
	err = flags.ParseFlag(cmd.Flags(), "connector-id", &connectorId)
	if err != nil {
		return fmt.Errorf(`error parsing "connector-id": ` + err.Error())
	}
	var data map[string]interface{}
	err = flags.ParseFlag(cmd.Flags(), "data", &data)
	if err != nil {
		return fmt.Errorf(`error parsing "data": ` + err.Error())
	}
	var description string
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.ConnectionRequest{

		ConnectorId: connectorId,
		Data:        data,
		Description: description,
		Name:        name,
	}

	resp, err := client.StreamsService.CreateConnection(generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreatePipeline Creates a pipeline.
func CreatePipeline(cmd *cobra.Command, args []string) error {

	var err error

	// Parse all flags

	var bypassValidationDefault bool
	bypassValidation := &bypassValidationDefault
	err = flags.ParseFlag(cmd.Flags(), "bypass-validation", &bypassValidation)
	if err != nil {
		return fmt.Errorf(`error parsing "bypass-validation": ` + err.Error())
	}
	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var inputDatafile string
	err = flags.ParseFlag(cmd.Flags(), "input-datafile", &inputDatafile)
	if err != nil {
		return fmt.Errorf(`error parsing "input-datafile": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}

	resp, err := CreatePipelineOverride(bypassValidation, description, name, inputDatafile)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// CreateTemplate Creates a template for a tenant.
func CreateTemplate(cmd *cobra.Command, args []string) error {

	var err error

	// Parse all flags

	var description string
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var inputDatafile string
	err = flags.ParseFlag(cmd.Flags(), "input-datafile", &inputDatafile)
	if err != nil {
		return fmt.Errorf(`error parsing "input-datafile": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}

	resp, err := CreateTemplateOverride(description, name, inputDatafile)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// DeactivatePipeline Deactivates an existing pipeline.
func DeactivatePipeline(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var skipSavepointDefault bool
	skipSavepoint := &skipSavepointDefault
	err = flags.ParseFlag(cmd.Flags(), "skip-savepoint", &skipSavepoint)
	if err != nil {
		return fmt.Errorf(`error parsing "skip-savepoint": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.DeactivatePipelineRequest{

		SkipSavepoint: skipSavepoint,
	}

	resp, err := client.StreamsService.DeactivatePipeline(id, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// Decompile Decompiles UPL and returns SPL.
func Decompile(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var upl model.Pipeline
	err = flags.ParseFlag(cmd.Flags(), "upl", &upl)
	if err != nil {
		return fmt.Errorf(`error parsing "upl": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.DecompileRequest{

		Upl: upl,
	}

	resp, err := client.StreamsService.Decompile(generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// DeleteConnection Delete all versions of a connection by its id.
func DeleteConnection(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var connectionId string
	err = flags.ParseFlag(cmd.Flags(), "connection-id", &connectionId)
	if err != nil {
		return fmt.Errorf(`error parsing "connection-id": ` + err.Error())
	}

	err = client.StreamsService.DeleteConnection(connectionId)
	if err != nil {
		return err
	}

	return nil
}

// DeleteFile Delete file.
func DeleteFile(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var fileId string
	err = flags.ParseFlag(cmd.Flags(), "file-id", &fileId)
	if err != nil {
		return fmt.Errorf(`error parsing "file-id": ` + err.Error())
	}

	err = client.StreamsService.DeleteFile(fileId)
	if err != nil {
		return err
	}

	return nil
}

// DeletePipeline Removes a pipeline.
func DeletePipeline(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}

	err = client.StreamsService.DeletePipeline(id)
	if err != nil {
		return err
	}

	return nil
}

// DeleteTemplate Removes a template with a specific ID.
func DeleteTemplate(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var templateId string
	err = flags.ParseFlag(cmd.Flags(), "template-id", &templateId)
	if err != nil {
		return fmt.Errorf(`error parsing "template-id": ` + err.Error())
	}

	err = client.StreamsService.DeleteTemplate(templateId)
	if err != nil {
		return err
	}

	return nil
}

// GetFilesMetadata Returns files metadata.
func GetFilesMetadata(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	resp, err := client.StreamsService.GetFilesMetadata()
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetInputSchema Returns the input schema for a function in a pipeline.
func GetInputSchema(cmd *cobra.Command, args []string) error {

	var err error

	// Parse all flags

	var inputDatafile string
	err = flags.ParseFlag(cmd.Flags(), "input-datafile", &inputDatafile)
	if err != nil {
		return fmt.Errorf(`error parsing "input-datafile": ` + err.Error())
	}
	var nodeUuid string
	err = flags.ParseFlag(cmd.Flags(), "node-uuid", &nodeUuid)
	if err != nil {
		return fmt.Errorf(`error parsing "node-uuid": ` + err.Error())
	}
	var targetPortName string
	err = flags.ParseFlag(cmd.Flags(), "target-port-name", &targetPortName)
	if err != nil {
		return fmt.Errorf(`error parsing "target-port-name": ` + err.Error())
	}

	resp, err := GetInputSchemaOverride(nodeUuid, targetPortName, inputDatafile)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetLookupTable Returns lookup table results.
func GetLookupTable(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var connectionId string
	err = flags.ParseFlag(cmd.Flags(), "connection-id", &connectionId)
	if err != nil {
		return fmt.Errorf(`error parsing "connection-id": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var sizeDefault int32
	size := &sizeDefault
	err = flags.ParseFlag(cmd.Flags(), "size", &size)
	if err != nil {
		return fmt.Errorf(`error parsing "size": ` + err.Error())
	}
	// Form query params
	generated_query := model.GetLookupTableQueryParams{}
	generated_query.Offset = offset
	generated_query.Size = size

	resp, err := client.StreamsService.GetLookupTable(connectionId, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetOutputSchema Returns the output schema for a specified function in a pipeline.
func GetOutputSchema(cmd *cobra.Command, args []string) error {

	var err error

	// Parse all flags

	var inputDatafile string
	err = flags.ParseFlag(cmd.Flags(), "input-datafile", &inputDatafile)
	if err != nil {
		return fmt.Errorf(`error parsing "input-datafile": ` + err.Error())
	}
	var nodeUuidDefault string
	nodeUuid := &nodeUuidDefault
	err = flags.ParseFlag(cmd.Flags(), "node-uuid", &nodeUuid)
	if err != nil {
		return fmt.Errorf(`error parsing "node-uuid": ` + err.Error())
	}
	var sourcePortNameDefault string
	sourcePortName := &sourcePortNameDefault
	err = flags.ParseFlag(cmd.Flags(), "source-port-name", &sourcePortName)
	if err != nil {
		return fmt.Errorf(`error parsing "source-port-name": ` + err.Error())
	}

	resp, err := GetOutputSchemaOverride(nodeUuid, sourcePortName, inputDatafile)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetPipeline Returns an individual pipeline by version.
func GetPipeline(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var version string
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form query params
	generated_query := model.GetPipelineQueryParams{}
	generated_query.Version = version

	resp, err := client.StreamsService.GetPipeline(id, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetPipelineLatestMetrics Returns the latest metrics for a single pipeline.
func GetPipelineLatestMetrics(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}

	resp, err := client.StreamsService.GetPipelineLatestMetrics(id)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetPipelinesStatus Returns the status of pipelines from the underlying streaming system.
func GetPipelinesStatus(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var activatedDefault bool
	activated := &activatedDefault
	err = flags.ParseFlag(cmd.Flags(), "activated", &activated)
	if err != nil {
		return fmt.Errorf(`error parsing "activated": ` + err.Error())
	}
	var createUserId string
	err = flags.ParseFlag(cmd.Flags(), "create-user-id", &createUserId)
	if err != nil {
		return fmt.Errorf(`error parsing "create-user-id": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var pageSizeDefault int32
	pageSize := &pageSizeDefault
	err = flags.ParseFlag(cmd.Flags(), "page-size", &pageSize)
	if err != nil {
		return fmt.Errorf(`error parsing "page-size": ` + err.Error())
	}
	var sortDir string
	err = flags.ParseFlag(cmd.Flags(), "sort-dir", &sortDir)
	if err != nil {
		return fmt.Errorf(`error parsing "sort-dir": ` + err.Error())
	}
	var sortField string
	err = flags.ParseFlag(cmd.Flags(), "sort-field", &sortField)
	if err != nil {
		return fmt.Errorf(`error parsing "sort-field": ` + err.Error())
	}
	// Form query params
	generated_query := model.GetPipelinesStatusQueryParams{}
	generated_query.Activated = activated
	generated_query.CreateUserId = createUserId
	generated_query.Name = name
	generated_query.Offset = offset
	generated_query.PageSize = pageSize
	generated_query.SortDir = sortDir
	generated_query.SortField = sortField

	resp, err := client.StreamsService.GetPipelinesStatus(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetPreviewData Returns the preview data for a session.
func GetPreviewData(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var previewSessionId int64
	err = flags.ParseFlag(cmd.Flags(), "preview-session-id", &previewSessionId)
	if err != nil {
		return fmt.Errorf(`error parsing "preview-session-id": ` + err.Error())
	}

	resp, err := client.StreamsService.GetPreviewData(previewSessionId)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetPreviewSession Returns information from a preview session.
func GetPreviewSession(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var previewSessionId int64
	err = flags.ParseFlag(cmd.Flags(), "preview-session-id", &previewSessionId)
	if err != nil {
		return fmt.Errorf(`error parsing "preview-session-id": ` + err.Error())
	}

	resp, err := client.StreamsService.GetPreviewSession(previewSessionId)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetPreviewSessionLatestMetrics Returns the latest metrics for a preview session.
func GetPreviewSessionLatestMetrics(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var previewSessionId int64
	err = flags.ParseFlag(cmd.Flags(), "preview-session-id", &previewSessionId)
	if err != nil {
		return fmt.Errorf(`error parsing "preview-session-id": ` + err.Error())
	}

	resp, err := client.StreamsService.GetPreviewSessionLatestMetrics(previewSessionId)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetRegistry Returns all functions in JSON format.
func GetRegistry(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var localDefault bool
	local := &localDefault
	err = flags.ParseFlag(cmd.Flags(), "local", &local)
	if err != nil {
		return fmt.Errorf(`error parsing "local": ` + err.Error())
	}
	// Form query params
	generated_query := model.GetRegistryQueryParams{}
	generated_query.Local = local

	resp, err := client.StreamsService.GetRegistry(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// GetTemplate Returns an individual template by version.
func GetTemplate(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var templateId string
	err = flags.ParseFlag(cmd.Flags(), "template-id", &templateId)
	if err != nil {
		return fmt.Errorf(`error parsing "template-id": ` + err.Error())
	}
	var versionDefault int64
	version := &versionDefault
	err = flags.ParseFlag(cmd.Flags(), "version", &version)
	if err != nil {
		return fmt.Errorf(`error parsing "version": ` + err.Error())
	}
	// Form query params
	generated_query := model.GetTemplateQueryParams{}
	generated_query.Version = version

	resp, err := client.StreamsService.GetTemplate(templateId, &generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListConnections Returns a list of connections (latest versions only) by tenant ID.
func ListConnections(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var connectorId string
	err = flags.ParseFlag(cmd.Flags(), "connector-id", &connectorId)
	if err != nil {
		return fmt.Errorf(`error parsing "connector-id": ` + err.Error())
	}
	var createUserId string
	err = flags.ParseFlag(cmd.Flags(), "create-user-id", &createUserId)
	if err != nil {
		return fmt.Errorf(`error parsing "create-user-id": ` + err.Error())
	}
	var functionId string
	err = flags.ParseFlag(cmd.Flags(), "function-id", &functionId)
	if err != nil {
		return fmt.Errorf(`error parsing "function-id": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var pageSizeDefault int32
	pageSize := &pageSizeDefault
	err = flags.ParseFlag(cmd.Flags(), "page-size", &pageSize)
	if err != nil {
		return fmt.Errorf(`error parsing "page-size": ` + err.Error())
	}
	var showSecretNames string
	err = flags.ParseFlag(cmd.Flags(), "show-secret-names", &showSecretNames)
	if err != nil {
		return fmt.Errorf(`error parsing "show-secret-names": ` + err.Error())
	}
	var sortDir string
	err = flags.ParseFlag(cmd.Flags(), "sort-dir", &sortDir)
	if err != nil {
		return fmt.Errorf(`error parsing "sort-dir": ` + err.Error())
	}
	var sortField string
	err = flags.ParseFlag(cmd.Flags(), "sort-field", &sortField)
	if err != nil {
		return fmt.Errorf(`error parsing "sort-field": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListConnectionsQueryParams{}
	generated_query.ConnectorId = connectorId
	generated_query.CreateUserId = createUserId
	generated_query.FunctionId = functionId
	generated_query.Name = name
	generated_query.Offset = offset
	generated_query.PageSize = pageSize
	generated_query.ShowSecretNames = showSecretNames
	generated_query.SortDir = sortDir
	generated_query.SortField = sortField

	resp, err := client.StreamsService.ListConnections(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListConnectors Returns a list of the available connectors.
func ListConnectors(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}

	resp, err := client.StreamsService.ListConnectors()
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListPipelines Returns all pipelines.
func ListPipelines(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var activatedDefault bool
	activated := &activatedDefault
	err = flags.ParseFlag(cmd.Flags(), "activated", &activated)
	if err != nil {
		return fmt.Errorf(`error parsing "activated": ` + err.Error())
	}
	var createUserId string
	err = flags.ParseFlag(cmd.Flags(), "create-user-id", &createUserId)
	if err != nil {
		return fmt.Errorf(`error parsing "create-user-id": ` + err.Error())
	}
	var includeDataDefault bool
	includeData := &includeDataDefault
	err = flags.ParseFlag(cmd.Flags(), "include-data", &includeData)
	if err != nil {
		return fmt.Errorf(`error parsing "include-data": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var pageSizeDefault int32
	pageSize := &pageSizeDefault
	err = flags.ParseFlag(cmd.Flags(), "page-size", &pageSize)
	if err != nil {
		return fmt.Errorf(`error parsing "page-size": ` + err.Error())
	}
	var sortDir string
	err = flags.ParseFlag(cmd.Flags(), "sort-dir", &sortDir)
	if err != nil {
		return fmt.Errorf(`error parsing "sort-dir": ` + err.Error())
	}
	var sortField string
	err = flags.ParseFlag(cmd.Flags(), "sort-field", &sortField)
	if err != nil {
		return fmt.Errorf(`error parsing "sort-field": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListPipelinesQueryParams{}
	generated_query.Activated = activated
	generated_query.CreateUserId = createUserId
	generated_query.IncludeData = includeData
	generated_query.Name = name
	generated_query.Offset = offset
	generated_query.PageSize = pageSize
	generated_query.SortDir = sortDir
	generated_query.SortField = sortField

	resp, err := client.StreamsService.ListPipelines(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ListTemplates Returns a list of all templates.
func ListTemplates(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var offsetDefault int32
	offset := &offsetDefault
	err = flags.ParseFlag(cmd.Flags(), "offset", &offset)
	if err != nil {
		return fmt.Errorf(`error parsing "offset": ` + err.Error())
	}
	var pageSizeDefault int32
	pageSize := &pageSizeDefault
	err = flags.ParseFlag(cmd.Flags(), "page-size", &pageSize)
	if err != nil {
		return fmt.Errorf(`error parsing "page-size": ` + err.Error())
	}
	var sortDir string
	err = flags.ParseFlag(cmd.Flags(), "sort-dir", &sortDir)
	if err != nil {
		return fmt.Errorf(`error parsing "sort-dir": ` + err.Error())
	}
	var sortField string
	err = flags.ParseFlag(cmd.Flags(), "sort-field", &sortField)
	if err != nil {
		return fmt.Errorf(`error parsing "sort-field": ` + err.Error())
	}
	// Form query params
	generated_query := model.ListTemplatesQueryParams{}
	generated_query.Offset = offset
	generated_query.PageSize = pageSize
	generated_query.SortDir = sortDir
	generated_query.SortField = sortField

	resp, err := client.StreamsService.ListTemplates(&generated_query)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// PatchPipeline Patches an existing pipeline.
func PatchPipeline(cmd *cobra.Command, args []string) error {

	var err error

	// Parse all flags

	var bypassValidationDefault bool
	bypassValidation := &bypassValidationDefault
	err = flags.ParseFlag(cmd.Flags(), "bypass-validation", &bypassValidation)
	if err != nil {
		return fmt.Errorf(`error parsing "bypass-validation": ` + err.Error())
	}
	var createUserIdDefault string
	createUserId := &createUserIdDefault
	err = flags.ParseFlag(cmd.Flags(), "create-user-id", &createUserId)
	if err != nil {
		return fmt.Errorf(`error parsing "create-user-id": ` + err.Error())
	}
	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var inputDatafile string
	err = flags.ParseFlag(cmd.Flags(), "input-datafile", &inputDatafile)
	if err != nil {
		return fmt.Errorf(`error parsing "input-datafile": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}

	resp, err := PatchPipelineOverride(id, bypassValidation, createUserId, description, name, inputDatafile)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// PutConnection Updates an existing DSP connection.
func PutConnection(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var connectionId string
	err = flags.ParseFlag(cmd.Flags(), "connection-id", &connectionId)
	if err != nil {
		return fmt.Errorf(`error parsing "connection-id": ` + err.Error())
	}
	var data map[string]interface{}
	err = flags.ParseFlag(cmd.Flags(), "data", &data)
	if err != nil {
		return fmt.Errorf(`error parsing "data": ` + err.Error())
	}
	var description string
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.ConnectionPutRequest{

		Data:        data,
		Description: description,
		Name:        name,
	}

	resp, err := client.StreamsService.PutConnection(connectionId, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// PutTemplate Updates an existing template.
func PutTemplate(cmd *cobra.Command, args []string) error {
	return fmt.Errorf("this command has not yet been implemented")
}

// ReactivatePipeline Reactivate a pipeline
func ReactivatePipeline(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}

	resp, err := client.StreamsService.ReactivatePipeline(id)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// StartPreview Creates a preview session for a pipeline.
func StartPreview(cmd *cobra.Command, args []string) error {

	var err error

	// Parse all flags

	var inputDatafile string
	err = flags.ParseFlag(cmd.Flags(), "input-datafile", &inputDatafile)
	if err != nil {
		return fmt.Errorf(`error parsing "input-datafile": ` + err.Error())
	}
	var recordsLimitDefault int32
	recordsLimit := &recordsLimitDefault
	err = flags.ParseFlag(cmd.Flags(), "records-limit", &recordsLimit)
	if err != nil {
		return fmt.Errorf(`error parsing "records-limit": ` + err.Error())
	}
	var recordsPerPipelineDefault int32
	recordsPerPipeline := &recordsPerPipelineDefault
	err = flags.ParseFlag(cmd.Flags(), "records-per-pipeline", &recordsPerPipeline)
	if err != nil {
		return fmt.Errorf(`error parsing "records-per-pipeline": ` + err.Error())
	}
	var sessionLifetimeMsDefault int64
	sessionLifetimeMs := &sessionLifetimeMsDefault
	err = flags.ParseFlag(cmd.Flags(), "session-lifetime-ms", &sessionLifetimeMs)
	if err != nil {
		return fmt.Errorf(`error parsing "session-lifetime-ms": ` + err.Error())
	}

	resp, err := StartPreviewOverride(recordsLimit, recordsPerPipeline, sessionLifetimeMs, inputDatafile)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// StopPreview Stops a preview session.
func StopPreview(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var previewSessionId int64
	err = flags.ParseFlag(cmd.Flags(), "preview-session-id", &previewSessionId)
	if err != nil {
		return fmt.Errorf(`error parsing "preview-session-id": ` + err.Error())
	}

	err = client.StreamsService.StopPreview(previewSessionId)
	if err != nil {
		return err
	}

	return nil
}

// UpdateConnection Patches an existing DSP connection.
func UpdateConnection(cmd *cobra.Command, args []string) error {

	client, err := auth.GetClient()
	if err != nil {
		return err
	}
	// Parse all flags

	var connectionId string
	err = flags.ParseFlag(cmd.Flags(), "connection-id", &connectionId)
	if err != nil {
		return fmt.Errorf(`error parsing "connection-id": ` + err.Error())
	}
	var data map[string]interface{}
	err = flags.ParseFlag(cmd.Flags(), "data", &data)
	if err != nil {
		return fmt.Errorf(`error parsing "data": ` + err.Error())
	}
	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	// Form the request body
	generated_request_body := model.ConnectionPatchRequest{

		Data:        data,
		Description: description,
		Name:        name,
	}

	resp, err := client.StreamsService.UpdateConnection(connectionId, generated_request_body)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdatePipeline Updates an existing pipeline.
func UpdatePipeline(cmd *cobra.Command, args []string) error {

	var err error

	// Parse all flags

	var bypassValidationDefault bool
	bypassValidation := &bypassValidationDefault
	err = flags.ParseFlag(cmd.Flags(), "bypass-validation", &bypassValidation)
	if err != nil {
		return fmt.Errorf(`error parsing "bypass-validation": ` + err.Error())
	}
	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var id string
	err = flags.ParseFlag(cmd.Flags(), "id", &id)
	if err != nil {
		return fmt.Errorf(`error parsing "id": ` + err.Error())
	}
	var inputDatafile string
	err = flags.ParseFlag(cmd.Flags(), "input-datafile", &inputDatafile)
	if err != nil {
		return fmt.Errorf(`error parsing "input-datafile": ` + err.Error())
	}
	var name string
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}

	resp, err := UpdatePipelineOverride(id, bypassValidation, description, name, inputDatafile)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UpdateTemplate Patches an existing template.
func UpdateTemplate(cmd *cobra.Command, args []string) error {

	var err error

	// Parse all flags

	var descriptionDefault string
	description := &descriptionDefault
	err = flags.ParseFlag(cmd.Flags(), "description", &description)
	if err != nil {
		return fmt.Errorf(`error parsing "description": ` + err.Error())
	}
	var inputDatafile string
	err = flags.ParseFlag(cmd.Flags(), "input-datafile", &inputDatafile)
	if err != nil {
		return fmt.Errorf(`error parsing "input-datafile": ` + err.Error())
	}
	var nameDefault string
	name := &nameDefault
	err = flags.ParseFlag(cmd.Flags(), "name", &name)
	if err != nil {
		return fmt.Errorf(`error parsing "name": ` + err.Error())
	}
	var templateId string
	err = flags.ParseFlag(cmd.Flags(), "template-id", &templateId)
	if err != nil {
		return fmt.Errorf(`error parsing "template-id": ` + err.Error())
	}

	resp, err := UpdateTemplateOverride(templateId, description, name, inputDatafile)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// UploadFile Upload new file.
func UploadFile(cmd *cobra.Command, args []string) error {

	var err error

	// Parse all flags

	var fileName string
	err = flags.ParseFlag(cmd.Flags(), "file-name", &fileName)
	if err != nil {
		return fmt.Errorf(`error parsing "file-name": ` + err.Error())
	}

	resp, err := UploadFileOverride(fileName)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}

// ValidatePipeline Verifies whether the Streams JSON is valid.
func ValidatePipeline(cmd *cobra.Command, args []string) error {

	var err error

	// Parse all flags

	var inputDatafile string
	err = flags.ParseFlag(cmd.Flags(), "input-datafile", &inputDatafile)
	if err != nil {
		return fmt.Errorf(`error parsing "input-datafile": ` + err.Error())
	}

	resp, err := ValidatePipelineOverride(inputDatafile)
	if err != nil {
		return err
	}
	jsonx.Pprint(cmd, resp)
	return nil
}
