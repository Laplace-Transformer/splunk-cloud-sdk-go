// Package catalog -- generated by scloudgen
// !! DO NOT EDIT !!
//
package catalog

import (
	"github.com/spf13/cobra"
	impl "github.com/splunk/splunk-cloud-sdk-go/cmd/scloud/pkg/catalog"
)

// createActionForRuleAliasAction -- Creates a new action for the specified rule by rule id or resource name.
var createActionForRuleAliasActionCmd = &cobra.Command{
	Use:   "create-action-for-rule-alias",
	Short: "Creates a new action for the specified rule by rule id or resource name.",
	RunE:  impl.CreateActionForRuleAliasAction,
}

// createActionForRuleAutoKvAction -- Creates a new action for the specified rule by rule id or resource name.
var createActionForRuleAutoKvActionCmd = &cobra.Command{
	Use:   "create-action-for-rule-auto-kv",
	Short: "Creates a new action for the specified rule by rule id or resource name.",
	RunE:  impl.CreateActionForRuleAutoKvAction,
}

// createActionForRuleEvalAction -- Creates a new action for the specified rule by rule id or resource name.
var createActionForRuleEvalActionCmd = &cobra.Command{
	Use:   "create-action-for-rule-eval",
	Short: "Creates a new action for the specified rule by rule id or resource name.",
	RunE:  impl.CreateActionForRuleEvalAction,
}

// createActionForRuleLookupAction -- Creates a new action for the specified rule by rule id or resource name.
var createActionForRuleLookupActionCmd = &cobra.Command{
	Use:   "create-action-for-rule-lookup",
	Short: "Creates a new action for the specified rule by rule id or resource name.",
	RunE:  impl.CreateActionForRuleLookupAction,
}

// createActionForRuleRegexAction -- Creates a new action for the specified rule by rule id or resource name.
var createActionForRuleRegexActionCmd = &cobra.Command{
	Use:   "create-action-for-rule-regex",
	Short: "Creates a new action for the specified rule by rule id or resource name.",
	RunE:  impl.CreateActionForRuleRegexAction,
}

// createAnnotationForDashboard -- Creates a new annotation for the specified dashboard.
var createAnnotationForDashboardCmd = &cobra.Command{
	Use:   "create-annotation-for-dashboard",
	Short: "[not implemented] Creates a new annotation for the specified dashboard.",
	RunE:  impl.CreateAnnotationForDashboard,
}

// createAnnotationForDataset -- Creates a new annotation for the specified dataset.
var createAnnotationForDatasetCmd = &cobra.Command{
	Use:   "create-annotation-for-dataset",
	Short: "[not implemented] Creates a new annotation for the specified dataset.",
	RunE:  impl.CreateAnnotationForDataset,
}

// createDashboard -- Creates a new dashboard.
var createDashboardCmd = &cobra.Command{
	Use:   "create-dashboard",
	Short: "Creates a new dashboard.",
	RunE:  impl.CreateDashboard,
}

// createDatasetFederatedDataset -- Creates a new dataset.
var createDatasetFederatedDatasetCmd = &cobra.Command{
	Use:   "create-dataset-federated",
	Short: "Creates a new dataset.",
	RunE:  impl.CreateDatasetFederatedDataset,
}

// createDatasetImport -- Creates a new dataset import using the ID or resource name of the imported dataset.
var createDatasetImportCmd = &cobra.Command{
	Use:   "create-dataset-import",
	Short: "Creates a new dataset import using the ID or resource name of the imported dataset.",
	RunE:  impl.CreateDatasetImport,
}

// createDatasetImportDataset -- Creates a new dataset.
var createDatasetImportDatasetCmd = &cobra.Command{
	Use:   "create-dataset-import",
	Short: "Creates a new dataset.",
	RunE:  impl.CreateDatasetImportDataset,
}

// createDatasetIndexDataset -- Creates a new dataset.
var createDatasetIndexDatasetCmd = &cobra.Command{
	Use:   "create-dataset-index",
	Short: "Creates a new dataset.",
	RunE:  impl.CreateDatasetIndexDataset,
}

// createDatasetKvCollectionDataset -- Creates a new dataset.
var createDatasetKvCollectionDatasetCmd = &cobra.Command{
	Use:   "create-dataset-kv-collection",
	Short: "Creates a new dataset.",
	RunE:  impl.CreateDatasetKvCollectionDataset,
}

// createDatasetLookupDataset -- Creates a new dataset.
var createDatasetLookupDatasetCmd = &cobra.Command{
	Use:   "create-dataset-lookup",
	Short: "Creates a new dataset.",
	RunE:  impl.CreateDatasetLookupDataset,
}

// createDatasetMetricDataset -- Creates a new dataset.
var createDatasetMetricDatasetCmd = &cobra.Command{
	Use:   "create-dataset-metric",
	Short: "Creates a new dataset.",
	RunE:  impl.CreateDatasetMetricDataset,
}

// createDatasetViewDataset -- Creates a new dataset.
var createDatasetViewDatasetCmd = &cobra.Command{
	Use:   "create-dataset-view",
	Short: "Creates a new dataset.",
	RunE:  impl.CreateDatasetViewDataset,
}

// createFieldForDataset -- Adds a new field to the dataset with the specified ID or resource name.
var createFieldForDatasetCmd = &cobra.Command{
	Use:   "create-field-for-dataset",
	Short: "Adds a new field to the dataset with the specified ID or resource name.",
	RunE:  impl.CreateFieldForDataset,
}

// createRelationship -- Creates a new relationship.
var createRelationshipCmd = &cobra.Command{
	Use:   "create-relationship",
	Short: "Creates a new relationship.",
	RunE:  impl.CreateRelationship,
}

// createRule -- Creates a new rule.
var createRuleCmd = &cobra.Command{
	Use:   "create-rule",
	Short: "Creates a new rule.",
	RunE:  impl.CreateRule,
}

// deleteActionByIdForRule -- Deletes the action with the specified ID that is associated with the specified rule.
var deleteActionByIdForRuleCmd = &cobra.Command{
	Use:   "delete-action-by-id-for-rule",
	Short: "Deletes the action with the specified ID that is associated with the specified rule.",
	RunE:  impl.DeleteActionByIdForRule,
}

// deleteAnnotationOfDashboard -- Deletes the annotation with the speciifed ID that is associted with the specified dashboard.
var deleteAnnotationOfDashboardCmd = &cobra.Command{
	Use:   "delete-annotation-of-dashboard",
	Short: "Deletes the annotation with the speciifed ID that is associted with the specified dashboard.",
	RunE:  impl.DeleteAnnotationOfDashboard,
}

// deleteAnnotationOfDataset -- Deletes the annotation with the specified ID that is associated with the specified dataset.
var deleteAnnotationOfDatasetCmd = &cobra.Command{
	Use:   "delete-annotation-of-dataset",
	Short: "Deletes the annotation with the specified ID that is associated with the specified dataset.",
	RunE:  impl.DeleteAnnotationOfDataset,
}

// deleteDashboard -- Deletes the dashboard with the specified ID or resource name.
var deleteDashboardCmd = &cobra.Command{
	Use:   "delete-dashboard",
	Short: "Deletes the dashboard with the specified ID or resource name.",
	RunE:  impl.DeleteDashboard,
}

// deleteDataset -- Deletes the dataset with the specified ID or resource name. Deleting a dataset also deletes its dependent objects, such as fields.
var deleteDatasetCmd = &cobra.Command{
	Use:   "delete-dataset",
	Short: "Deletes the dataset with the specified ID or resource name. Deleting a dataset also deletes its dependent objects, such as fields.",
	RunE:  impl.DeleteDataset,
}

// deleteFieldByIdForDataset -- Deletes the field with the specified ID that is part of the specified dataset.
var deleteFieldByIdForDatasetCmd = &cobra.Command{
	Use:   "delete-field-by-id-for-dataset",
	Short: "Deletes the field with the specified ID that is part of the specified dataset.",
	RunE:  impl.DeleteFieldByIdForDataset,
}

// deleteRelationshipById -- Deletes the relationship with the specified relationship ID. Deleting a relationship also deletes any objects that are dependents of that relationship, such as relationship fields.
var deleteRelationshipByIdCmd = &cobra.Command{
	Use:   "delete-relationship-by-id",
	Short: "Deletes the relationship with the specified relationship ID. Deleting a relationship also deletes any objects that are dependents of that relationship, such as relationship fields.",
	RunE:  impl.DeleteRelationshipById,
}

// deleteRule -- Deletes the rule with the specfied ID or resource name. Deleting a rule also deleletes any objects that are dependents of that rule, such as rule actions.
var deleteRuleCmd = &cobra.Command{
	Use:   "delete-rule",
	Short: "Deletes the rule with the specfied ID or resource name. Deleting a rule also deleletes any objects that are dependents of that rule, such as rule actions.",
	RunE:  impl.DeleteRule,
}

// getActionByIdForRule -- Returns information about the action with the specified ID that is associated with the specified rule.
var getActionByIdForRuleCmd = &cobra.Command{
	Use:   "get-action-by-id-for-rule",
	Short: "Returns information about the action with the specified ID that is associated with the specified rule.",
	RunE:  impl.GetActionByIdForRule,
}

// getDashboard -- Returns information about the dashboard with the specified ID or resource name.
var getDashboardCmd = &cobra.Command{
	Use:   "get-dashboard",
	Short: "Returns information about the dashboard with the specified ID or resource name.",
	RunE:  impl.GetDashboard,
}

// getDataset -- Returns information about the dataset with the specified ID or resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
var getDatasetCmd = &cobra.Command{
	Use:   "get-dataset",
	Short: "Returns information about the dataset with the specified ID or resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.",
	RunE:  impl.GetDataset,
}

// getFieldById -- Returns the field with the specified ID.
var getFieldByIdCmd = &cobra.Command{
	Use:   "get-field-by-id",
	Short: "Returns the field with the specified ID.",
	RunE:  impl.GetFieldById,
}

// getFieldByIdForDataset -- Returns the field with the specified ID that is part of the specified dataset.
var getFieldByIdForDatasetCmd = &cobra.Command{
	Use:   "get-field-by-id-for-dataset",
	Short: "Returns the field with the specified ID that is part of the specified dataset.",
	RunE:  impl.GetFieldByIdForDataset,
}

// getRelationshipById -- Returns the relationship with the specified relationship ID.
var getRelationshipByIdCmd = &cobra.Command{
	Use:   "get-relationship-by-id",
	Short: "Returns the relationship with the specified relationship ID.",
	RunE:  impl.GetRelationshipById,
}

// getRule -- Returns information about rule with the specified rule ID or resource name.
var getRuleCmd = &cobra.Command{
	Use:   "get-rule",
	Short: "Returns information about rule with the specified rule ID or resource name.",
	RunE:  impl.GetRule,
}

// importDataset -- Creates a new dataset import using the ID or resource name of the imported dataset.
var importDatasetCmd = &cobra.Command{
	Use:   "import-dataset",
	Short: "Creates a new dataset import using the ID or resource name of the imported dataset.",
	RunE:  impl.ImportDataset,
}

// listActionsForRule -- Returns the set of actions that are part of the specified rule.
var listActionsForRuleCmd = &cobra.Command{
	Use:   "list-actions-for-rule",
	Short: "Returns the set of actions that are part of the specified rule.",
	RunE:  impl.ListActionsForRule,
}

// listAnnotations -- Returns the set of annotations across all objects.
var listAnnotationsCmd = &cobra.Command{
	Use:   "list-annotations",
	Short: "Returns the set of annotations across all objects.",
	RunE:  impl.ListAnnotations,
}

// listAnnotationsForDashboard -- Returns the set of annotations that are associated with the specified dashboard.
var listAnnotationsForDashboardCmd = &cobra.Command{
	Use:   "list-annotations-for-dashboard",
	Short: "Returns the set of annotations that are associated with the specified dashboard.",
	RunE:  impl.ListAnnotationsForDashboard,
}

// listAnnotationsForDataset -- Returns the set of annotations that are associated with the specified dataset.
var listAnnotationsForDatasetCmd = &cobra.Command{
	Use:   "list-annotations-for-dataset",
	Short: "Returns the set of annotations that are associated with the specified dataset.",
	RunE:  impl.ListAnnotationsForDataset,
}

// listDashboards -- Returns a list of dashboards.
var listDashboardsCmd = &cobra.Command{
	Use:   "list-dashboards",
	Short: "Returns a list of dashboards.",
	RunE:  impl.ListDashboards,
}

// listDatasets -- Returns a list of all datasets. Use a filter to return a specific list of datasets.
var listDatasetsCmd = &cobra.Command{
	Use:   "list-datasets",
	Short: "Returns a list of all datasets. Use a filter to return a specific list of datasets.",
	RunE:  impl.ListDatasets,
}

// listFields -- Returns a list of all of the fields in the Metadata Catalog.
var listFieldsCmd = &cobra.Command{
	Use:   "list-fields",
	Short: "Returns a list of all of the fields in the Metadata Catalog.",
	RunE:  impl.ListFields,
}

// listFieldsForDataset -- Returns the set of fields for the dataset with the specified ID or resource name.
var listFieldsForDatasetCmd = &cobra.Command{
	Use:   "list-fields-for-dataset",
	Short: "Returns the set of fields for the dataset with the specified ID or resource name.",
	RunE:  impl.ListFieldsForDataset,
}

// listModules -- Returns a list of all modules. Use a filter to return a specific list of modules.
var listModulesCmd = &cobra.Command{
	Use:   "list-modules",
	Short: "Returns a list of all modules. Use a filter to return a specific list of modules.",
	RunE:  impl.ListModules,
}

// listRelationships -- Returns a list of all relationships. Use a filter to return a specific list of relationships.
var listRelationshipsCmd = &cobra.Command{
	Use:   "list-relationships",
	Short: "Returns a list of all relationships. Use a filter to return a specific list of relationships.",
	RunE:  impl.ListRelationships,
}

// listRules -- Returns a list of rules that match a filter, if specified, otherwise returns all rules.
var listRulesCmd = &cobra.Command{
	Use:   "list-rules",
	Short: "Returns a list of rules that match a filter, if specified, otherwise returns all rules.",
	RunE:  impl.ListRules,
}

// updateActionByIdForRuleAliasAction -- Modifies the action with the specified ID that is associated with the specified rule.
var updateActionByIdForRuleAliasActionCmd = &cobra.Command{
	Use:   "update-action-by-id-for-rule-alias",
	Short: "Modifies the action with the specified ID that is associated with the specified rule.",
	RunE:  impl.UpdateActionByIdForRuleAliasAction,
}

// updateActionByIdForRuleAutoKvAction -- Modifies the action with the specified ID that is associated with the specified rule.
var updateActionByIdForRuleAutoKvActionCmd = &cobra.Command{
	Use:   "update-action-by-id-for-rule-auto-kv",
	Short: "Modifies the action with the specified ID that is associated with the specified rule.",
	RunE:  impl.UpdateActionByIdForRuleAutoKvAction,
}

// updateActionByIdForRuleEvalAction -- Modifies the action with the specified ID that is associated with the specified rule.
var updateActionByIdForRuleEvalActionCmd = &cobra.Command{
	Use:   "update-action-by-id-for-rule-eval",
	Short: "Modifies the action with the specified ID that is associated with the specified rule.",
	RunE:  impl.UpdateActionByIdForRuleEvalAction,
}

// updateActionByIdForRuleLookupAction -- Modifies the action with the specified ID that is associated with the specified rule.
var updateActionByIdForRuleLookupActionCmd = &cobra.Command{
	Use:   "update-action-by-id-for-rule-lookup",
	Short: "Modifies the action with the specified ID that is associated with the specified rule.",
	RunE:  impl.UpdateActionByIdForRuleLookupAction,
}

// updateActionByIdForRuleRegexAction -- Modifies the action with the specified ID that is associated with the specified rule.
var updateActionByIdForRuleRegexActionCmd = &cobra.Command{
	Use:   "update-action-by-id-for-rule-regex",
	Short: "Modifies the action with the specified ID that is associated with the specified rule.",
	RunE:  impl.UpdateActionByIdForRuleRegexAction,
}

// updateDashboard -- Modifies the dashboard with the specified ID or resource name.
var updateDashboardCmd = &cobra.Command{
	Use:   "update-dashboard",
	Short: "Modifies the dashboard with the specified ID or resource name.",
	RunE:  impl.UpdateDashboard,
}

// updateDatasetFederatedDataset -- Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.
var updateDatasetFederatedDatasetCmd = &cobra.Command{
	Use:   "update-dataset-federated",
	Short: "Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.",
	RunE:  impl.UpdateDatasetFederatedDataset,
}

// updateDatasetImportDataset -- Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.
var updateDatasetImportDatasetCmd = &cobra.Command{
	Use:   "update-dataset-import",
	Short: "Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.",
	RunE:  impl.UpdateDatasetImportDataset,
}

// updateDatasetIndexDataset -- Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.
var updateDatasetIndexDatasetCmd = &cobra.Command{
	Use:   "update-dataset-index",
	Short: "Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.",
	RunE:  impl.UpdateDatasetIndexDataset,
}

// updateDatasetKvCollectionDataset -- Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.
var updateDatasetKvCollectionDatasetCmd = &cobra.Command{
	Use:   "update-dataset-kv-collection",
	Short: "Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.",
	RunE:  impl.UpdateDatasetKvCollectionDataset,
}

// updateDatasetLookupDataset -- Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.
var updateDatasetLookupDatasetCmd = &cobra.Command{
	Use:   "update-dataset-lookup",
	Short: "Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.",
	RunE:  impl.UpdateDatasetLookupDataset,
}

// updateDatasetMetricDataset -- Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.
var updateDatasetMetricDatasetCmd = &cobra.Command{
	Use:   "update-dataset-metric",
	Short: "Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.",
	RunE:  impl.UpdateDatasetMetricDataset,
}

// updateDatasetViewDataset -- Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.
var updateDatasetViewDatasetCmd = &cobra.Command{
	Use:   "update-dataset-view",
	Short: "Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.",
	RunE:  impl.UpdateDatasetViewDataset,
}

// updateFieldByIdForDataset -- Modifies the field with the specified ID that is part of the specified dataset.
var updateFieldByIdForDatasetCmd = &cobra.Command{
	Use:   "update-field-by-id-for-dataset",
	Short: "Modifies the field with the specified ID that is part of the specified dataset.",
	RunE:  impl.UpdateFieldByIdForDataset,
}

// updateRelationshipById -- Modifies the relationship with the specified relationship ID.
var updateRelationshipByIdCmd = &cobra.Command{
	Use:   "update-relationship-by-id",
	Short: "Modifies the relationship with the specified relationship ID.",
	RunE:  impl.UpdateRelationshipById,
}

// updateRule -- Modifies the rule with the specified rule ID or resource name.
var updateRuleCmd = &cobra.Command{
	Use:   "update-rule",
	Short: "Modifies the rule with the specified rule ID or resource name.",
	RunE:  impl.UpdateRule,
}

func init() {

	catalogCmd.AddCommand(createActionForRuleAliasActionCmd)
	var createActionForRuleAliasActionAlias string
	createActionForRuleAliasActionCmd.Flags().StringVar(&createActionForRuleAliasActionAlias, "alias", "", "This is a required parameter. The alias name.")
	createActionForRuleAliasActionCmd.MarkFlagRequired("alias")

	var createActionForRuleAliasActionField string
	createActionForRuleAliasActionCmd.Flags().StringVar(&createActionForRuleAliasActionField, "field", "", "This is a required parameter. The name of the field to be aliased.")
	createActionForRuleAliasActionCmd.MarkFlagRequired("field")

	var createActionForRuleAliasActionId string
	createActionForRuleAliasActionCmd.Flags().StringVar(&createActionForRuleAliasActionId, "id", "", "A unique action ID.")

	var createActionForRuleAliasActionKind string
	createActionForRuleAliasActionCmd.Flags().StringVar(&createActionForRuleAliasActionKind, "kind", "ALIAS", "The alias action kind. can accept values ALIAS")

	var createActionForRuleAliasActionRuleid string
	createActionForRuleAliasActionCmd.Flags().StringVar(&createActionForRuleAliasActionRuleid, "ruleid", "", "The rule that this action is part of.")

	var createActionForRuleAliasActionVersion int32
	createActionForRuleAliasActionCmd.Flags().Int32Var(&createActionForRuleAliasActionVersion, "version", 0, "The catalog version.")

	catalogCmd.AddCommand(createActionForRuleAutoKvActionCmd)
	var createActionForRuleAutoKvActionId string
	createActionForRuleAutoKvActionCmd.Flags().StringVar(&createActionForRuleAutoKvActionId, "id", "", "A unique action ID.")

	var createActionForRuleAutoKvActionKind string
	createActionForRuleAutoKvActionCmd.Flags().StringVar(&createActionForRuleAutoKvActionKind, "kind", "AUTOKV", "The autokv action kind. can accept values AUTOKV")

	var createActionForRuleAutoKvActionMode string
	createActionForRuleAutoKvActionCmd.Flags().StringVar(&createActionForRuleAutoKvActionMode, "mode", "", "This is a required parameter. The autokv action mode.")
	createActionForRuleAutoKvActionCmd.MarkFlagRequired("mode")

	var createActionForRuleAutoKvActionRuleid string
	createActionForRuleAutoKvActionCmd.Flags().StringVar(&createActionForRuleAutoKvActionRuleid, "ruleid", "", "The rule that this action is part of.")

	var createActionForRuleAutoKvActionVersion int32
	createActionForRuleAutoKvActionCmd.Flags().Int32Var(&createActionForRuleAutoKvActionVersion, "version", 0, "The catalog version.")

	catalogCmd.AddCommand(createActionForRuleEvalActionCmd)
	var createActionForRuleEvalActionExpression string
	createActionForRuleEvalActionCmd.Flags().StringVar(&createActionForRuleEvalActionExpression, "expression", "", "This is a required parameter. The EVAL expression that calculates the field.")
	createActionForRuleEvalActionCmd.MarkFlagRequired("expression")

	var createActionForRuleEvalActionField string
	createActionForRuleEvalActionCmd.Flags().StringVar(&createActionForRuleEvalActionField, "field", "", "This is a required parameter. The name of the field that is added or modified by the EVAL expression.")
	createActionForRuleEvalActionCmd.MarkFlagRequired("field")

	var createActionForRuleEvalActionId string
	createActionForRuleEvalActionCmd.Flags().StringVar(&createActionForRuleEvalActionId, "id", "", "A unique action ID.")

	var createActionForRuleEvalActionKind string
	createActionForRuleEvalActionCmd.Flags().StringVar(&createActionForRuleEvalActionKind, "kind", "EVAL", "The eval action kind. can accept values EVAL")

	var createActionForRuleEvalActionRuleid string
	createActionForRuleEvalActionCmd.Flags().StringVar(&createActionForRuleEvalActionRuleid, "ruleid", "", "The rule that this action is part of.")

	var createActionForRuleEvalActionVersion int32
	createActionForRuleEvalActionCmd.Flags().Int32Var(&createActionForRuleEvalActionVersion, "version", 0, "The catalog version.")

	catalogCmd.AddCommand(createActionForRuleLookupActionCmd)
	var createActionForRuleLookupActionExpression string
	createActionForRuleLookupActionCmd.Flags().StringVar(&createActionForRuleLookupActionExpression, "expression", "", "This is a required parameter. The lookup body.")
	createActionForRuleLookupActionCmd.MarkFlagRequired("expression")

	var createActionForRuleLookupActionId string
	createActionForRuleLookupActionCmd.Flags().StringVar(&createActionForRuleLookupActionId, "id", "", "A unique action ID.")

	var createActionForRuleLookupActionKind string
	createActionForRuleLookupActionCmd.Flags().StringVar(&createActionForRuleLookupActionKind, "kind", "LOOKUP", "The lookup action kind. can accept values LOOKUP")

	var createActionForRuleLookupActionRuleid string
	createActionForRuleLookupActionCmd.Flags().StringVar(&createActionForRuleLookupActionRuleid, "ruleid", "", "The rule that this action is part of.")

	var createActionForRuleLookupActionVersion int32
	createActionForRuleLookupActionCmd.Flags().Int32Var(&createActionForRuleLookupActionVersion, "version", 0, "The catalog version.")

	catalogCmd.AddCommand(createActionForRuleRegexActionCmd)
	var createActionForRuleRegexActionField string
	createActionForRuleRegexActionCmd.Flags().StringVar(&createActionForRuleRegexActionField, "field", "", "This is a required parameter. Name of the field that is matched against the regular expression.")
	createActionForRuleRegexActionCmd.MarkFlagRequired("field")

	var createActionForRuleRegexActionId string
	createActionForRuleRegexActionCmd.Flags().StringVar(&createActionForRuleRegexActionId, "id", "", "A unique action ID.")

	var createActionForRuleRegexActionKind string
	createActionForRuleRegexActionCmd.Flags().StringVar(&createActionForRuleRegexActionKind, "kind", "REGEX", "The regex action kind. can accept values REGEX")

	var createActionForRuleRegexActionLimit int32
	createActionForRuleRegexActionCmd.Flags().Int32Var(&createActionForRuleRegexActionLimit, "limit", 0, "The maximum number of times per event to attempt to match fields with the regular expression.")

	var createActionForRuleRegexActionPattern string
	createActionForRuleRegexActionCmd.Flags().StringVar(&createActionForRuleRegexActionPattern, "pattern", "", "This is a required parameter. A regular expression that includes named capture groups for the purpose of field extraction.")
	createActionForRuleRegexActionCmd.MarkFlagRequired("pattern")

	var createActionForRuleRegexActionRuleid string
	createActionForRuleRegexActionCmd.Flags().StringVar(&createActionForRuleRegexActionRuleid, "ruleid", "", "The rule that this action is part of.")

	var createActionForRuleRegexActionVersion int32
	createActionForRuleRegexActionCmd.Flags().Int32Var(&createActionForRuleRegexActionVersion, "version", 0, "The catalog version.")

	var createActionForRuleAliasActionRuleresource string
	createActionForRuleAliasActionCmd.Flags().StringVar(&createActionForRuleAliasActionRuleresource, "ruleresource", "", "This is a required parameter. The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.")
	createActionForRuleAliasActionCmd.MarkFlagRequired("ruleresource")

	var createActionForRuleAutoKvActionRuleresource string
	createActionForRuleAutoKvActionCmd.Flags().StringVar(&createActionForRuleAutoKvActionRuleresource, "ruleresource", "", "This is a required parameter. The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.")
	createActionForRuleAutoKvActionCmd.MarkFlagRequired("ruleresource")

	var createActionForRuleEvalActionRuleresource string
	createActionForRuleEvalActionCmd.Flags().StringVar(&createActionForRuleEvalActionRuleresource, "ruleresource", "", "This is a required parameter. The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.")
	createActionForRuleEvalActionCmd.MarkFlagRequired("ruleresource")

	var createActionForRuleLookupActionRuleresource string
	createActionForRuleLookupActionCmd.Flags().StringVar(&createActionForRuleLookupActionRuleresource, "ruleresource", "", "This is a required parameter. The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.")
	createActionForRuleLookupActionCmd.MarkFlagRequired("ruleresource")

	var createActionForRuleRegexActionRuleresource string
	createActionForRuleRegexActionCmd.Flags().StringVar(&createActionForRuleRegexActionRuleresource, "ruleresource", "", "This is a required parameter. The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.")
	createActionForRuleRegexActionCmd.MarkFlagRequired("ruleresource")

	catalogCmd.AddCommand(createAnnotationForDashboardCmd)

	var createAnnotationForDashboardAnnotationtypeid string
	createAnnotationForDashboardCmd.Flags().StringVar(&createAnnotationForDashboardAnnotationtypeid, "annotationtypeid", "", "The annotation type ID.")
	createAnnotationForDashboardCmd.MarkFlagRequired("annotationtypeid")

	var createAnnotationForDashboardDashboardresource string
	createAnnotationForDashboardCmd.Flags().StringVar(&createAnnotationForDashboardDashboardresource, "dashboardresource", "", "This is a required parameter. ID or the resource name of a dashvboard. The resource name format is module.dashboardname.")
	createAnnotationForDashboardCmd.MarkFlagRequired("dashboardresource")

	var createAnnotationForDashboardAnnotationtyperesourcename string
	createAnnotationForDashboardCmd.Flags().StringVar(&createAnnotationForDashboardAnnotationtyperesourcename, "annotationtyperesourcename", "", "Resource name of the annotation type")

	var createAnnotationForDashboardDashboardid string
	createAnnotationForDashboardCmd.Flags().StringVar(&createAnnotationForDashboardDashboardid, "dashboardid", "", "The dashboard ID.")

	var createAnnotationForDashboardDatasetid string
	createAnnotationForDashboardCmd.Flags().StringVar(&createAnnotationForDashboardDatasetid, "datasetid", "", "The dataset ID. Null if not annotating a dataset.")

	var createAnnotationForDashboardFieldid string
	createAnnotationForDashboardCmd.Flags().StringVar(&createAnnotationForDashboardFieldid, "fieldid", "", "The field ID. Null if not annotating a field.")

	var createAnnotationForDashboardId string
	createAnnotationForDashboardCmd.Flags().StringVar(&createAnnotationForDashboardId, "id", "", "A unique annotation ID. If not specified, an auto generated ID is created.")

	var createAnnotationForDashboardRelationshipid string
	createAnnotationForDashboardCmd.Flags().StringVar(&createAnnotationForDashboardRelationshipid, "relationshipid", "", "The relationship ID. Null if not annotating a relationship.")

	catalogCmd.AddCommand(createAnnotationForDatasetCmd)

	var createAnnotationForDatasetAnnotationtypeid string
	createAnnotationForDatasetCmd.Flags().StringVar(&createAnnotationForDatasetAnnotationtypeid, "annotationtypeid", "", "The annotation type ID.")
	createAnnotationForDatasetCmd.MarkFlagRequired("annotationtypeid")

	var createAnnotationForDatasetDatasetresource string
	createAnnotationForDatasetCmd.Flags().StringVar(&createAnnotationForDatasetDatasetresource, "datasetresource", "", "This is a required parameter. ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.")
	createAnnotationForDatasetCmd.MarkFlagRequired("datasetresource")

	var createAnnotationForDatasetAnnotationtyperesourcename string
	createAnnotationForDatasetCmd.Flags().StringVar(&createAnnotationForDatasetAnnotationtyperesourcename, "annotationtyperesourcename", "", "Resource name of the annotation type")

	var createAnnotationForDatasetDashboardid string
	createAnnotationForDatasetCmd.Flags().StringVar(&createAnnotationForDatasetDashboardid, "dashboardid", "", "The dashboard ID.")

	var createAnnotationForDatasetDatasetid string
	createAnnotationForDatasetCmd.Flags().StringVar(&createAnnotationForDatasetDatasetid, "datasetid", "", "The dataset ID. Null if not annotating a dataset.")

	var createAnnotationForDatasetFieldid string
	createAnnotationForDatasetCmd.Flags().StringVar(&createAnnotationForDatasetFieldid, "fieldid", "", "The field ID. Null if not annotating a field.")

	var createAnnotationForDatasetId string
	createAnnotationForDatasetCmd.Flags().StringVar(&createAnnotationForDatasetId, "id", "", "A unique annotation ID. If not specified, an auto generated ID is created.")

	var createAnnotationForDatasetRelationshipid string
	createAnnotationForDatasetCmd.Flags().StringVar(&createAnnotationForDatasetRelationshipid, "relationshipid", "", "The relationship ID. Null if not annotating a relationship.")

	catalogCmd.AddCommand(createDashboardCmd)

	var createDashboardDefinition string
	createDashboardCmd.Flags().StringVar(&createDashboardDefinition, "definition", "", "The JSON dashboard definition.")
	createDashboardCmd.MarkFlagRequired("definition")

	var createDashboardModule string
	createDashboardCmd.Flags().StringVar(&createDashboardModule, "module", "", "The module that contains the dashboard.")
	createDashboardCmd.MarkFlagRequired("module")

	var createDashboardName string
	createDashboardCmd.Flags().StringVar(&createDashboardName, "name", "", "The dashboard name. Dashboard names must be unique within each tenant.")
	createDashboardCmd.MarkFlagRequired("name")

	var createDashboardId string
	createDashboardCmd.Flags().StringVar(&createDashboardId, "id", "", "A unique dashboard ID. Random ID used if not provided.")

	var createDashboardIsactive string
	createDashboardCmd.Flags().StringVar(&createDashboardIsactive, "isactive", "false", "Whether the dashboard is active or not.")

	var createDashboardVersion int32
	createDashboardCmd.Flags().Int32Var(&createDashboardVersion, "version", 0, "The version of the dashboard.")

	catalogCmd.AddCommand(createDatasetFederatedDatasetCmd)
	var createDatasetFederatedDatasetFederatedConnection string
	createDatasetFederatedDatasetCmd.Flags().StringVar(&createDatasetFederatedDatasetFederatedConnection, "federated-connection", "", "This is a required parameter. Connection information to connect to remote federated connection.")
	createDatasetFederatedDatasetCmd.MarkFlagRequired("federatedConnection")

	var createDatasetFederatedDatasetFederatedDataset string
	createDatasetFederatedDatasetCmd.Flags().StringVar(&createDatasetFederatedDatasetFederatedDataset, "federated-dataset", "", "This is a required parameter. Dataset information in the remote instance.")
	createDatasetFederatedDatasetCmd.MarkFlagRequired("federatedDataset")

	var createDatasetFederatedDatasetFederatedDatasetKind string
	createDatasetFederatedDatasetCmd.Flags().StringVar(&createDatasetFederatedDatasetFederatedDatasetKind, "federated-dataset-kind", "", "This is a required parameter. Dataset kind information in the remote instance.")
	createDatasetFederatedDatasetCmd.MarkFlagRequired("federatedDatasetKind")

	var createDatasetFederatedDatasetFields string
	createDatasetFederatedDatasetCmd.Flags().StringVar(&createDatasetFederatedDatasetFields, "fields", "", "The fields to be associated with this dataset.")

	var createDatasetFederatedDatasetId string
	createDatasetFederatedDatasetCmd.Flags().StringVar(&createDatasetFederatedDatasetId, "id", "", "A unique dataset ID. Random ID used if not provided.")

	var createDatasetFederatedDatasetKind string
	createDatasetFederatedDatasetCmd.Flags().StringVar(&createDatasetFederatedDatasetKind, "kind", "federated", "The dataset kind. can accept values federated")

	var createDatasetFederatedDatasetModule string
	createDatasetFederatedDatasetCmd.Flags().StringVar(&createDatasetFederatedDatasetModule, "module", "", "The name of the module to create the new dataset in.")

	var createDatasetFederatedDatasetName string
	createDatasetFederatedDatasetCmd.Flags().StringVar(&createDatasetFederatedDatasetName, "name", "", "This is a required parameter. The dataset name. Dataset names must be unique within each module.")
	createDatasetFederatedDatasetCmd.MarkFlagRequired("name")

	catalogCmd.AddCommand(createDatasetImportDatasetCmd)

	catalogCmd.AddCommand(createDatasetIndexDatasetCmd)
	var createDatasetIndexDatasetDisabled string
	createDatasetIndexDatasetCmd.Flags().StringVar(&createDatasetIndexDatasetDisabled, "disabled", "false", "Specifies whether or not the Splunk index is disabled.")

	var createDatasetIndexDatasetFields string
	createDatasetIndexDatasetCmd.Flags().StringVar(&createDatasetIndexDatasetFields, "fields", "", "The fields to be associated with this dataset.")

	var createDatasetIndexDatasetFrozenTimePeriodInSecs int32
	createDatasetIndexDatasetCmd.Flags().Int32Var(&createDatasetIndexDatasetFrozenTimePeriodInSecs, "frozen-time-period-in-secs", 0, "The frozenTimePeriodInSecs to use for the index")

	var createDatasetIndexDatasetId string
	createDatasetIndexDatasetCmd.Flags().StringVar(&createDatasetIndexDatasetId, "id", "", "A unique dataset ID. Random ID used if not provided.")

	var createDatasetIndexDatasetKind string
	createDatasetIndexDatasetCmd.Flags().StringVar(&createDatasetIndexDatasetKind, "kind", "index", "The dataset kind. can accept values index")

	var createDatasetIndexDatasetModule string
	createDatasetIndexDatasetCmd.Flags().StringVar(&createDatasetIndexDatasetModule, "module", "", "The name of the module to create the new dataset in.")

	var createDatasetIndexDatasetName string
	createDatasetIndexDatasetCmd.Flags().StringVar(&createDatasetIndexDatasetName, "name", "", "This is a required parameter. The dataset name. Dataset names must be unique within each module.")
	createDatasetIndexDatasetCmd.MarkFlagRequired("name")

	catalogCmd.AddCommand(createDatasetKvCollectionDatasetCmd)
	var createDatasetKvCollectionDatasetFields string
	createDatasetKvCollectionDatasetCmd.Flags().StringVar(&createDatasetKvCollectionDatasetFields, "fields", "", "The fields to be associated with this dataset.")

	var createDatasetKvCollectionDatasetId string
	createDatasetKvCollectionDatasetCmd.Flags().StringVar(&createDatasetKvCollectionDatasetId, "id", "", "A unique dataset ID. Random ID used if not provided.")

	var createDatasetKvCollectionDatasetKind string
	createDatasetKvCollectionDatasetCmd.Flags().StringVar(&createDatasetKvCollectionDatasetKind, "kind", "kvcollection", "The dataset kind. can accept values kvcollection")

	var createDatasetKvCollectionDatasetModule string
	createDatasetKvCollectionDatasetCmd.Flags().StringVar(&createDatasetKvCollectionDatasetModule, "module", "", "The name of the module to create the new dataset in.")

	var createDatasetKvCollectionDatasetName string
	createDatasetKvCollectionDatasetCmd.Flags().StringVar(&createDatasetKvCollectionDatasetName, "name", "", "This is a required parameter. The dataset name. Dataset names must be unique within each module.")
	createDatasetKvCollectionDatasetCmd.MarkFlagRequired("name")

	catalogCmd.AddCommand(createDatasetLookupDatasetCmd)
	var createDatasetLookupDatasetCaseSensitiveMatch string
	createDatasetLookupDatasetCmd.Flags().StringVar(&createDatasetLookupDatasetCaseSensitiveMatch, "case-sensitive-match", "true", "Match case-sensitively against the lookup.")

	var createDatasetLookupDatasetExternalKind string
	createDatasetLookupDatasetCmd.Flags().StringVar(&createDatasetLookupDatasetExternalKind, "external-kind", "", "This is a required parameter. The type of the external lookup. can accept values kvcollection")
	createDatasetLookupDatasetCmd.MarkFlagRequired("externalKind")

	var createDatasetLookupDatasetExternalName string
	createDatasetLookupDatasetCmd.Flags().StringVar(&createDatasetLookupDatasetExternalName, "external-name", "", "This is a required parameter. The name of the external lookup.")
	createDatasetLookupDatasetCmd.MarkFlagRequired("externalName")

	var createDatasetLookupDatasetFields string
	createDatasetLookupDatasetCmd.Flags().StringVar(&createDatasetLookupDatasetFields, "fields", "", "The fields to be associated with this dataset.")

	var createDatasetLookupDatasetFilter string
	createDatasetLookupDatasetCmd.Flags().StringVar(&createDatasetLookupDatasetFilter, "filter", "", "A query that filters results out of the lookup before those results are returned.")

	var createDatasetLookupDatasetId string
	createDatasetLookupDatasetCmd.Flags().StringVar(&createDatasetLookupDatasetId, "id", "", "A unique dataset ID. Random ID used if not provided.")

	var createDatasetLookupDatasetKind string
	createDatasetLookupDatasetCmd.Flags().StringVar(&createDatasetLookupDatasetKind, "kind", "lookup", "The dataset kind. can accept values lookup")

	var createDatasetLookupDatasetModule string
	createDatasetLookupDatasetCmd.Flags().StringVar(&createDatasetLookupDatasetModule, "module", "", "The name of the module to create the new dataset in.")

	var createDatasetLookupDatasetName string
	createDatasetLookupDatasetCmd.Flags().StringVar(&createDatasetLookupDatasetName, "name", "", "This is a required parameter. The dataset name. Dataset names must be unique within each module.")
	createDatasetLookupDatasetCmd.MarkFlagRequired("name")

	catalogCmd.AddCommand(createDatasetMetricDatasetCmd)
	var createDatasetMetricDatasetDisabled string
	createDatasetMetricDatasetCmd.Flags().StringVar(&createDatasetMetricDatasetDisabled, "disabled", "false", "Specifies whether or not the Splunk index is disabled.")

	var createDatasetMetricDatasetFields string
	createDatasetMetricDatasetCmd.Flags().StringVar(&createDatasetMetricDatasetFields, "fields", "", "The fields to be associated with this dataset.")

	var createDatasetMetricDatasetFrozenTimePeriodInSecs int32
	createDatasetMetricDatasetCmd.Flags().Int32Var(&createDatasetMetricDatasetFrozenTimePeriodInSecs, "frozen-time-period-in-secs", 0, "The frozenTimePeriodInSecs to use for the index")

	var createDatasetMetricDatasetId string
	createDatasetMetricDatasetCmd.Flags().StringVar(&createDatasetMetricDatasetId, "id", "", "A unique dataset ID. Random ID used if not provided.")

	var createDatasetMetricDatasetKind string
	createDatasetMetricDatasetCmd.Flags().StringVar(&createDatasetMetricDatasetKind, "kind", "metric", "The dataset kind. can accept values metric")

	var createDatasetMetricDatasetModule string
	createDatasetMetricDatasetCmd.Flags().StringVar(&createDatasetMetricDatasetModule, "module", "", "The name of the module to create the new dataset in.")

	var createDatasetMetricDatasetName string
	createDatasetMetricDatasetCmd.Flags().StringVar(&createDatasetMetricDatasetName, "name", "", "This is a required parameter. The dataset name. Dataset names must be unique within each module.")
	createDatasetMetricDatasetCmd.MarkFlagRequired("name")

	catalogCmd.AddCommand(createDatasetViewDatasetCmd)
	var createDatasetViewDatasetFields string
	createDatasetViewDatasetCmd.Flags().StringVar(&createDatasetViewDatasetFields, "fields", "", "The fields to be associated with this dataset.")

	var createDatasetViewDatasetId string
	createDatasetViewDatasetCmd.Flags().StringVar(&createDatasetViewDatasetId, "id", "", "A unique dataset ID. Random ID used if not provided.")

	var createDatasetViewDatasetKind string
	createDatasetViewDatasetCmd.Flags().StringVar(&createDatasetViewDatasetKind, "kind", "view", "The dataset kind. can accept values view")

	var createDatasetViewDatasetModule string
	createDatasetViewDatasetCmd.Flags().StringVar(&createDatasetViewDatasetModule, "module", "", "The name of the module to create the new dataset in.")

	var createDatasetViewDatasetName string
	createDatasetViewDatasetCmd.Flags().StringVar(&createDatasetViewDatasetName, "name", "", "This is a required parameter. The dataset name. Dataset names must be unique within each module.")
	createDatasetViewDatasetCmd.MarkFlagRequired("name")

	var createDatasetViewDatasetSearch string
	createDatasetViewDatasetCmd.Flags().StringVar(&createDatasetViewDatasetSearch, "search", "", "This is a required parameter. A valid SPL-defined search.")
	createDatasetViewDatasetCmd.MarkFlagRequired("search")

	catalogCmd.AddCommand(createDatasetImportCmd)

	var createDatasetImportDatasetresource string
	createDatasetImportCmd.Flags().StringVar(&createDatasetImportDatasetresource, "datasetresource", "", "This is a required parameter. ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.")
	createDatasetImportCmd.MarkFlagRequired("datasetresource")

	var createDatasetImportModule string
	createDatasetImportCmd.Flags().StringVar(&createDatasetImportModule, "module", "", "This is a required parameter. The module that is importing the dataset.")
	createDatasetImportCmd.MarkFlagRequired("module")

	var createDatasetImportOwner string
	createDatasetImportCmd.Flags().StringVar(&createDatasetImportOwner, "owner", "", "This is a required parameter. The dataset owner.")
	createDatasetImportCmd.MarkFlagRequired("owner")

	var createDatasetImportName string
	createDatasetImportCmd.Flags().StringVar(&createDatasetImportName, "name", "", "The dataset name.")

	catalogCmd.AddCommand(createFieldForDatasetCmd)

	var createFieldForDatasetDatasetresource string
	createFieldForDatasetCmd.Flags().StringVar(&createFieldForDatasetDatasetresource, "datasetresource", "", "This is a required parameter. ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.")
	createFieldForDatasetCmd.MarkFlagRequired("datasetresource")

	var createFieldForDatasetName string
	createFieldForDatasetCmd.Flags().StringVar(&createFieldForDatasetName, "name", "", "The field name.")
	createFieldForDatasetCmd.MarkFlagRequired("name")

	var createFieldForDatasetDatatype string
	createFieldForDatasetCmd.Flags().StringVar(&createFieldForDatasetDatatype, "datatype", "", "The type of data in the field. Must be one of the valid values. can accept values DATE, NUMBER, OBJECT_ID, STRING, UNKNOWN")

	var createFieldForDatasetDescription string
	createFieldForDatasetCmd.Flags().StringVar(&createFieldForDatasetDescription, "description", "", "The field description.")

	var createFieldForDatasetFieldtype string
	createFieldForDatasetCmd.Flags().StringVar(&createFieldForDatasetFieldtype, "fieldtype", "", "The type of field. Must be one of the valid values. can accept values DIMENSION, MEASURE, UNKNOWN")

	var createFieldForDatasetIndexed string
	createFieldForDatasetCmd.Flags().StringVar(&createFieldForDatasetIndexed, "indexed", "false", "Whether or not the field has been indexed.")

	var createFieldForDatasetPrevalence string
	createFieldForDatasetCmd.Flags().StringVar(&createFieldForDatasetPrevalence, "prevalence", "", "How frequent the field appears in the dataset. Must be one of the valid values. can accept values ALL, SOME, UNKNOWN")

	var createFieldForDatasetSummary string
	createFieldForDatasetCmd.Flags().StringVar(&createFieldForDatasetSummary, "summary", "", "The field summary.")

	var createFieldForDatasetTitle string
	createFieldForDatasetCmd.Flags().StringVar(&createFieldForDatasetTitle, "title", "", "The field title.")

	catalogCmd.AddCommand(createRelationshipCmd)

	var createRelationshipKind string
	createRelationshipCmd.Flags().StringVar(&createRelationshipKind, "kind", "", "The relationship type. Must be one of the valid values. can accept values ONE, MANY, DEPENDENCY")
	createRelationshipCmd.MarkFlagRequired("kind")

	var createRelationshipName string
	createRelationshipCmd.Flags().StringVar(&createRelationshipName, "name", "", "The relationship name.")
	createRelationshipCmd.MarkFlagRequired("name")

	var createRelationshipFields string
	createRelationshipCmd.Flags().StringVar(&createRelationshipFields, "fields", "", "The fields associated with this relationship.")

	var createRelationshipId string
	createRelationshipCmd.Flags().StringVar(&createRelationshipId, "id", "", "A unique relationship ID. If not specified, an auto generated ID is created.")

	var createRelationshipModule string
	createRelationshipCmd.Flags().StringVar(&createRelationshipModule, "module", "", "The module that contains the relationship.")

	var createRelationshipSourceid string
	createRelationshipCmd.Flags().StringVar(&createRelationshipSourceid, "sourceid", "", "A unique source dataset ID. Either the sourceid or sourceresourcename property must be specified.")

	var createRelationshipSourceresourcename string
	createRelationshipCmd.Flags().StringVar(&createRelationshipSourceresourcename, "sourceresourcename", "", "The source dataset name qualified by module name. Either the sourceid or sourceresourcename property must be specified.")

	var createRelationshipTargetid string
	createRelationshipCmd.Flags().StringVar(&createRelationshipTargetid, "targetid", "", "A unique target dataset ID. Either the targetid or targetresourcename property must be specified.")

	var createRelationshipTargetresourcename string
	createRelationshipCmd.Flags().StringVar(&createRelationshipTargetresourcename, "targetresourcename", "", "The target dataset name qualified by module name. Either the targetid or targetresourcename property must be specified.")

	var createRelationshipVersion int32
	createRelationshipCmd.Flags().Int32Var(&createRelationshipVersion, "version", 0, "The Catalog version.")

	catalogCmd.AddCommand(createRuleCmd)

	var createRuleMatch string
	createRuleCmd.Flags().StringVar(&createRuleMatch, "match", "", "The rule match type.")
	createRuleCmd.MarkFlagRequired("match")

	var createRuleName string
	createRuleCmd.Flags().StringVar(&createRuleName, "name", "", "The rule name.")
	createRuleCmd.MarkFlagRequired("name")

	var createRuleActions string
	createRuleCmd.Flags().StringVar(&createRuleActions, "actions", "", "The actions to be associated with this rule.")

	var createRuleId string
	createRuleCmd.Flags().StringVar(&createRuleId, "id", "", "A unique rule ID. The newly created rule object will use this ID value if provided.")

	var createRuleModule string
	createRuleCmd.Flags().StringVar(&createRuleModule, "module", "", "The module containing the rule.")

	var createRuleVersion int32
	createRuleCmd.Flags().Int32Var(&createRuleVersion, "version", 0, "The catalog version.")

	catalogCmd.AddCommand(deleteActionByIdForRuleCmd)

	var deleteActionByIdForRuleActionid string
	deleteActionByIdForRuleCmd.Flags().StringVar(&deleteActionByIdForRuleActionid, "actionid", "", "This is a required parameter. ID of an Action.")
	deleteActionByIdForRuleCmd.MarkFlagRequired("actionid")

	var deleteActionByIdForRuleRuleresource string
	deleteActionByIdForRuleCmd.Flags().StringVar(&deleteActionByIdForRuleRuleresource, "ruleresource", "", "This is a required parameter. The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.")
	deleteActionByIdForRuleCmd.MarkFlagRequired("ruleresource")

	catalogCmd.AddCommand(deleteAnnotationOfDashboardCmd)

	var deleteAnnotationOfDashboardAnnotationid string
	deleteAnnotationOfDashboardCmd.Flags().StringVar(&deleteAnnotationOfDashboardAnnotationid, "annotationid", "", "This is a required parameter. ID of a annotation.")
	deleteAnnotationOfDashboardCmd.MarkFlagRequired("annotationid")

	var deleteAnnotationOfDashboardDashboardresource string
	deleteAnnotationOfDashboardCmd.Flags().StringVar(&deleteAnnotationOfDashboardDashboardresource, "dashboardresource", "", "This is a required parameter. ID or the resource name of a dashvboard. The resource name format is module.dashboardname.")
	deleteAnnotationOfDashboardCmd.MarkFlagRequired("dashboardresource")

	catalogCmd.AddCommand(deleteAnnotationOfDatasetCmd)

	var deleteAnnotationOfDatasetAnnotationid string
	deleteAnnotationOfDatasetCmd.Flags().StringVar(&deleteAnnotationOfDatasetAnnotationid, "annotationid", "", "This is a required parameter. ID of a annotation.")
	deleteAnnotationOfDatasetCmd.MarkFlagRequired("annotationid")

	var deleteAnnotationOfDatasetDatasetresource string
	deleteAnnotationOfDatasetCmd.Flags().StringVar(&deleteAnnotationOfDatasetDatasetresource, "datasetresource", "", "This is a required parameter. ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.")
	deleteAnnotationOfDatasetCmd.MarkFlagRequired("datasetresource")

	catalogCmd.AddCommand(deleteDashboardCmd)

	var deleteDashboardDashboardresource string
	deleteDashboardCmd.Flags().StringVar(&deleteDashboardDashboardresource, "dashboardresource", "", "This is a required parameter. ID or the resource name of a dashvboard. The resource name format is module.dashboardname.")
	deleteDashboardCmd.MarkFlagRequired("dashboardresource")

	catalogCmd.AddCommand(deleteDatasetCmd)

	var deleteDatasetDatasetresource string
	deleteDatasetCmd.Flags().StringVar(&deleteDatasetDatasetresource, "datasetresource", "", "This is a required parameter. ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.")
	deleteDatasetCmd.MarkFlagRequired("datasetresource")

	catalogCmd.AddCommand(deleteFieldByIdForDatasetCmd)

	var deleteFieldByIdForDatasetDatasetresource string
	deleteFieldByIdForDatasetCmd.Flags().StringVar(&deleteFieldByIdForDatasetDatasetresource, "datasetresource", "", "This is a required parameter. ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.")
	deleteFieldByIdForDatasetCmd.MarkFlagRequired("datasetresource")

	var deleteFieldByIdForDatasetFieldid string
	deleteFieldByIdForDatasetCmd.Flags().StringVar(&deleteFieldByIdForDatasetFieldid, "fieldid", "", "This is a required parameter. ID of a Field.")
	deleteFieldByIdForDatasetCmd.MarkFlagRequired("fieldid")

	catalogCmd.AddCommand(deleteRelationshipByIdCmd)

	var deleteRelationshipByIdRelationshipid string
	deleteRelationshipByIdCmd.Flags().StringVar(&deleteRelationshipByIdRelationshipid, "relationshipid", "", "This is a required parameter. ID of a relationship.")
	deleteRelationshipByIdCmd.MarkFlagRequired("relationshipid")

	catalogCmd.AddCommand(deleteRuleCmd)

	var deleteRuleRuleresource string
	deleteRuleCmd.Flags().StringVar(&deleteRuleRuleresource, "ruleresource", "", "This is a required parameter. The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.")
	deleteRuleCmd.MarkFlagRequired("ruleresource")

	catalogCmd.AddCommand(getActionByIdForRuleCmd)

	var getActionByIdForRuleActionid string
	getActionByIdForRuleCmd.Flags().StringVar(&getActionByIdForRuleActionid, "actionid", "", "This is a required parameter. ID of an Action.")
	getActionByIdForRuleCmd.MarkFlagRequired("actionid")

	var getActionByIdForRuleRuleresource string
	getActionByIdForRuleCmd.Flags().StringVar(&getActionByIdForRuleRuleresource, "ruleresource", "", "This is a required parameter. The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.")
	getActionByIdForRuleCmd.MarkFlagRequired("ruleresource")

	catalogCmd.AddCommand(getDashboardCmd)

	var getDashboardDashboardresource string
	getDashboardCmd.Flags().StringVar(&getDashboardDashboardresource, "dashboardresource", "", "This is a required parameter. ID or the resource name of a dashvboard. The resource name format is module.dashboardname.")
	getDashboardCmd.MarkFlagRequired("dashboardresource")

	catalogCmd.AddCommand(getDatasetCmd)

	var getDatasetDatasetresource string
	getDatasetCmd.Flags().StringVar(&getDatasetDatasetresource, "datasetresource", "", "This is a required parameter. ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.")
	getDatasetCmd.MarkFlagRequired("datasetresource")

	var getDatasetMaxstale int32
	getDatasetCmd.Flags().Int32Var(&getDatasetMaxstale, "maxstale", 0, "The number of seconds beyond which we will refresh index metadata.")

	catalogCmd.AddCommand(getFieldByIdCmd)

	var getFieldByIdFieldid string
	getFieldByIdCmd.Flags().StringVar(&getFieldByIdFieldid, "fieldid", "", "This is a required parameter. ID of a Field.")
	getFieldByIdCmd.MarkFlagRequired("fieldid")

	catalogCmd.AddCommand(getFieldByIdForDatasetCmd)

	var getFieldByIdForDatasetDatasetresource string
	getFieldByIdForDatasetCmd.Flags().StringVar(&getFieldByIdForDatasetDatasetresource, "datasetresource", "", "This is a required parameter. ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.")
	getFieldByIdForDatasetCmd.MarkFlagRequired("datasetresource")

	var getFieldByIdForDatasetFieldid string
	getFieldByIdForDatasetCmd.Flags().StringVar(&getFieldByIdForDatasetFieldid, "fieldid", "", "This is a required parameter. ID of a Field.")
	getFieldByIdForDatasetCmd.MarkFlagRequired("fieldid")

	catalogCmd.AddCommand(getRelationshipByIdCmd)

	var getRelationshipByIdRelationshipid string
	getRelationshipByIdCmd.Flags().StringVar(&getRelationshipByIdRelationshipid, "relationshipid", "", "This is a required parameter. ID of a relationship.")
	getRelationshipByIdCmd.MarkFlagRequired("relationshipid")

	catalogCmd.AddCommand(getRuleCmd)

	var getRuleRuleresource string
	getRuleCmd.Flags().StringVar(&getRuleRuleresource, "ruleresource", "", "This is a required parameter. The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.")
	getRuleCmd.MarkFlagRequired("ruleresource")

	catalogCmd.AddCommand(importDatasetCmd)

	var importDatasetDatasetresource string
	importDatasetCmd.Flags().StringVar(&importDatasetDatasetresource, "datasetresource", "", "This is a required parameter. ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.")
	importDatasetCmd.MarkFlagRequired("datasetresource")

	var importDatasetModule string
	importDatasetCmd.Flags().StringVar(&importDatasetModule, "module", "", "This is a required parameter. The module that is importing the dataset.")
	importDatasetCmd.MarkFlagRequired("module")

	var importDatasetOwner string
	importDatasetCmd.Flags().StringVar(&importDatasetOwner, "owner", "", "This is a required parameter. The dataset owner.")
	importDatasetCmd.MarkFlagRequired("owner")

	var importDatasetName string
	importDatasetCmd.Flags().StringVar(&importDatasetName, "name", "", "The dataset name.")

	catalogCmd.AddCommand(listActionsForRuleCmd)

	var listActionsForRuleRuleresource string
	listActionsForRuleCmd.Flags().StringVar(&listActionsForRuleRuleresource, "ruleresource", "", "This is a required parameter. The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.")
	listActionsForRuleCmd.MarkFlagRequired("ruleresource")

	var listActionsForRuleCount int32
	listActionsForRuleCmd.Flags().Int32Var(&listActionsForRuleCount, "count", 0, "The maximum number of results to return.")

	var listActionsForRuleFilter string
	listActionsForRuleCmd.Flags().StringVar(&listActionsForRuleFilter, "filter", "", "A filter to apply to the results list. The filter must be a SPL predicate expression.")

	var listActionsForRuleOffset int32
	listActionsForRuleCmd.Flags().Int32Var(&listActionsForRuleOffset, "offset", 0, "The number of results to skip before the first one returned.")

	var listActionsForRuleOrderby []string
	listActionsForRuleCmd.Flags().StringSliceVar(&listActionsForRuleOrderby, "orderby", nil, "A list of fields to order the results by.  You can specify either ascending or descending order using <field> asc or <field> desc.  Ascending order is the default.")

	catalogCmd.AddCommand(listAnnotationsCmd)

	var listAnnotationsCount int32
	listAnnotationsCmd.Flags().Int32Var(&listAnnotationsCount, "count", 0, "The maximum number of results to return.")

	var listAnnotationsFilter string
	listAnnotationsCmd.Flags().StringVar(&listAnnotationsFilter, "filter", "", "A filter to apply to the results list. The filter must be a SPL predicate expression.")

	var listAnnotationsOffset int32
	listAnnotationsCmd.Flags().Int32Var(&listAnnotationsOffset, "offset", 0, "The number of results to skip before the first one returned.")

	var listAnnotationsOrderby []string
	listAnnotationsCmd.Flags().StringSliceVar(&listAnnotationsOrderby, "orderby", nil, "A list of fields to order the results by.  You can specify either ascending or descending order using <field> asc or <field> desc.  Ascending order is the default.")

	catalogCmd.AddCommand(listAnnotationsForDashboardCmd)

	var listAnnotationsForDashboardDashboardresource string
	listAnnotationsForDashboardCmd.Flags().StringVar(&listAnnotationsForDashboardDashboardresource, "dashboardresource", "", "This is a required parameter. ID or the resource name of a dashvboard. The resource name format is module.dashboardname.")
	listAnnotationsForDashboardCmd.MarkFlagRequired("dashboardresource")

	var listAnnotationsForDashboardFilter string
	listAnnotationsForDashboardCmd.Flags().StringVar(&listAnnotationsForDashboardFilter, "filter", "", "A filter query to apply to the annotations.")

	catalogCmd.AddCommand(listAnnotationsForDatasetCmd)

	var listAnnotationsForDatasetDatasetresource string
	listAnnotationsForDatasetCmd.Flags().StringVar(&listAnnotationsForDatasetDatasetresource, "datasetresource", "", "This is a required parameter. ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.")
	listAnnotationsForDatasetCmd.MarkFlagRequired("datasetresource")

	var listAnnotationsForDatasetCount int32
	listAnnotationsForDatasetCmd.Flags().Int32Var(&listAnnotationsForDatasetCount, "count", 0, "The maximum number of results to return.")

	var listAnnotationsForDatasetFilter string
	listAnnotationsForDatasetCmd.Flags().StringVar(&listAnnotationsForDatasetFilter, "filter", "", "A filter to apply to the results list. The filter must be a SPL predicate expression.")

	var listAnnotationsForDatasetOffset int32
	listAnnotationsForDatasetCmd.Flags().Int32Var(&listAnnotationsForDatasetOffset, "offset", 0, "The number of results to skip before the first one returned.")

	var listAnnotationsForDatasetOrderby []string
	listAnnotationsForDatasetCmd.Flags().StringSliceVar(&listAnnotationsForDatasetOrderby, "orderby", nil, "A list of fields to order the results by.  You can specify either ascending or descending order using <field> asc or <field> desc.  Ascending order is the default.")

	catalogCmd.AddCommand(listDashboardsCmd)

	var listDashboardsCount int32
	listDashboardsCmd.Flags().Int32Var(&listDashboardsCount, "count", 0, "The maximum number of results to return.")

	var listDashboardsFilter string
	listDashboardsCmd.Flags().StringVar(&listDashboardsFilter, "filter", "", "A filter to apply to the results list. The filter must be a SPL predicate expression.")

	var listDashboardsOffset int32
	listDashboardsCmd.Flags().Int32Var(&listDashboardsOffset, "offset", 0, "The number of results to skip before the first one returned.")

	var listDashboardsOrderby []string
	listDashboardsCmd.Flags().StringSliceVar(&listDashboardsOrderby, "orderby", nil, "A list of fields to order the results by.  You can specify either ascending or descending order using <field> asc or <field> desc.  Ascending order is the default.")

	catalogCmd.AddCommand(listDatasetsCmd)

	var listDatasetsCount int32
	listDatasetsCmd.Flags().Int32Var(&listDatasetsCount, "count", 0, "The maximum number of results to return.")

	var listDatasetsFilter string
	listDatasetsCmd.Flags().StringVar(&listDatasetsFilter, "filter", "", "A filter to apply to the dataset list. The filter must be a SPL predicate expression.")

	var listDatasetsMaxstale int32
	listDatasetsCmd.Flags().Int32Var(&listDatasetsMaxstale, "maxstale", 0, "The number of seconds beyond which we will refresh index metadata.")

	var listDatasetsOffset int32
	listDatasetsCmd.Flags().Int32Var(&listDatasetsOffset, "offset", 0, "The number of results to skip before the first result is returned.")

	var listDatasetsOrderby []string
	listDatasetsCmd.Flags().StringSliceVar(&listDatasetsOrderby, "orderby", nil, "A list of fields to order the results by.  You can specify either ascending or descending order using <field> asc or <field> desc.  Ascending order is the default.")

	catalogCmd.AddCommand(listFieldsCmd)

	var listFieldsCount int32
	listFieldsCmd.Flags().Int32Var(&listFieldsCount, "count", 0, "The maximum number of results to return.")

	var listFieldsFilter string
	listFieldsCmd.Flags().StringVar(&listFieldsFilter, "filter", "", "A filter to apply to the dataset list. The filter must be a SPL predicate expression.")

	var listFieldsOffset int32
	listFieldsCmd.Flags().Int32Var(&listFieldsOffset, "offset", 0, "The number of results to skip before the first one returned.")

	var listFieldsOrderby []string
	listFieldsCmd.Flags().StringSliceVar(&listFieldsOrderby, "orderby", nil, "A list of fields to order the results by.  You can specify either ascending or descending order using <field> asc or <field> desc.  Ascending order is the default.")

	catalogCmd.AddCommand(listFieldsForDatasetCmd)

	var listFieldsForDatasetDatasetresource string
	listFieldsForDatasetCmd.Flags().StringVar(&listFieldsForDatasetDatasetresource, "datasetresource", "", "This is a required parameter. ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.")
	listFieldsForDatasetCmd.MarkFlagRequired("datasetresource")

	var listFieldsForDatasetCount int32
	listFieldsForDatasetCmd.Flags().Int32Var(&listFieldsForDatasetCount, "count", 0, "The maximum number of results to return.")

	var listFieldsForDatasetFilter string
	listFieldsForDatasetCmd.Flags().StringVar(&listFieldsForDatasetFilter, "filter", "", "A filter to apply to the dataset list. The filter must be a SPL predicate expression.")

	var listFieldsForDatasetOffset int32
	listFieldsForDatasetCmd.Flags().Int32Var(&listFieldsForDatasetOffset, "offset", 0, "The number of results to skip before the first one returned.")

	var listFieldsForDatasetOrderby []string
	listFieldsForDatasetCmd.Flags().StringSliceVar(&listFieldsForDatasetOrderby, "orderby", nil, "A list of fields to order the results by. You can specify either ascending or descending order using <field> asc or <field> desc.  Ascending order is the default.")

	catalogCmd.AddCommand(listModulesCmd)

	var listModulesFilter string
	listModulesCmd.Flags().StringVar(&listModulesFilter, "filter", "", "A filter to apply to the modules.")

	catalogCmd.AddCommand(listRelationshipsCmd)

	var listRelationshipsCount int32
	listRelationshipsCmd.Flags().Int32Var(&listRelationshipsCount, "count", 0, "The maximum number of results to return.")

	var listRelationshipsFilter string
	listRelationshipsCmd.Flags().StringVar(&listRelationshipsFilter, "filter", "", "A filter to apply to the results list. The filter must be a SPL predicate expression.")

	var listRelationshipsOffset int32
	listRelationshipsCmd.Flags().Int32Var(&listRelationshipsOffset, "offset", 0, "The number of results to skip before the first one returned.")

	var listRelationshipsOrderby []string
	listRelationshipsCmd.Flags().StringSliceVar(&listRelationshipsOrderby, "orderby", nil, "A list of fields to order the results by.  You can specify either ascending or descending order using <field> asc or <field> desc.  Ascending order is the default.")

	catalogCmd.AddCommand(listRulesCmd)

	var listRulesCount int32
	listRulesCmd.Flags().Int32Var(&listRulesCount, "count", 0, "The maximum number of results to return.")

	var listRulesFilter string
	listRulesCmd.Flags().StringVar(&listRulesFilter, "filter", "", "A filter to apply to the results list. The filter must be a SPL predicate expression.")

	var listRulesOffset int32
	listRulesCmd.Flags().Int32Var(&listRulesOffset, "offset", 0, "The number of results to skip before the first one returned.")

	var listRulesOrderby []string
	listRulesCmd.Flags().StringSliceVar(&listRulesOrderby, "orderby", nil, "A list of fields to order the results by.  You can specify either ascending or descending order using <field> asc or <field> desc.  Ascending order is the default.")

	catalogCmd.AddCommand(updateActionByIdForRuleAliasActionCmd)
	var updateActionByIdForRuleAliasActionAlias string
	updateActionByIdForRuleAliasActionCmd.Flags().StringVar(&updateActionByIdForRuleAliasActionAlias, "alias", "", "The alias name.")

	var updateActionByIdForRuleAliasActionField string
	updateActionByIdForRuleAliasActionCmd.Flags().StringVar(&updateActionByIdForRuleAliasActionField, "field", "", "The name of the field to be aliased.")

	var updateActionByIdForRuleAliasActionKind string
	updateActionByIdForRuleAliasActionCmd.Flags().StringVar(&updateActionByIdForRuleAliasActionKind, "kind", "", "The alias action kind. can accept values ALIAS")

	var updateActionByIdForRuleAliasActionOwner string
	updateActionByIdForRuleAliasActionCmd.Flags().StringVar(&updateActionByIdForRuleAliasActionOwner, "owner", "", "The name of the user who owns this action. This value is obtained from the bearer token if not present.")

	var updateActionByIdForRuleAliasActionVersion int32
	updateActionByIdForRuleAliasActionCmd.Flags().Int32Var(&updateActionByIdForRuleAliasActionVersion, "version", 0, "The catalog version.")

	catalogCmd.AddCommand(updateActionByIdForRuleAutoKvActionCmd)
	var updateActionByIdForRuleAutoKvActionKind string
	updateActionByIdForRuleAutoKvActionCmd.Flags().StringVar(&updateActionByIdForRuleAutoKvActionKind, "kind", "", "The autokv action kind. can accept values AUTOKV")

	var updateActionByIdForRuleAutoKvActionMode string
	updateActionByIdForRuleAutoKvActionCmd.Flags().StringVar(&updateActionByIdForRuleAutoKvActionMode, "mode", "", "The autokv action mode.")

	var updateActionByIdForRuleAutoKvActionOwner string
	updateActionByIdForRuleAutoKvActionCmd.Flags().StringVar(&updateActionByIdForRuleAutoKvActionOwner, "owner", "", "The name of the user who owns this action. This value is obtained from the bearer token if not present.")

	var updateActionByIdForRuleAutoKvActionVersion int32
	updateActionByIdForRuleAutoKvActionCmd.Flags().Int32Var(&updateActionByIdForRuleAutoKvActionVersion, "version", 0, "The catalog version.")

	catalogCmd.AddCommand(updateActionByIdForRuleEvalActionCmd)
	var updateActionByIdForRuleEvalActionExpression string
	updateActionByIdForRuleEvalActionCmd.Flags().StringVar(&updateActionByIdForRuleEvalActionExpression, "expression", "", "The EVAL expression that calculates the field.")

	var updateActionByIdForRuleEvalActionField string
	updateActionByIdForRuleEvalActionCmd.Flags().StringVar(&updateActionByIdForRuleEvalActionField, "field", "", "The name of the field that is added or modified by the EVAL expression.")

	var updateActionByIdForRuleEvalActionKind string
	updateActionByIdForRuleEvalActionCmd.Flags().StringVar(&updateActionByIdForRuleEvalActionKind, "kind", "", "The eval action kind. can accept values EVAL")

	var updateActionByIdForRuleEvalActionOwner string
	updateActionByIdForRuleEvalActionCmd.Flags().StringVar(&updateActionByIdForRuleEvalActionOwner, "owner", "", "The name of the user who owns this action. This value is obtained from the bearer token if not present.")

	var updateActionByIdForRuleEvalActionVersion int32
	updateActionByIdForRuleEvalActionCmd.Flags().Int32Var(&updateActionByIdForRuleEvalActionVersion, "version", 0, "The catalog version.")

	catalogCmd.AddCommand(updateActionByIdForRuleLookupActionCmd)
	var updateActionByIdForRuleLookupActionExpression string
	updateActionByIdForRuleLookupActionCmd.Flags().StringVar(&updateActionByIdForRuleLookupActionExpression, "expression", "", "The lookup body.")

	var updateActionByIdForRuleLookupActionKind string
	updateActionByIdForRuleLookupActionCmd.Flags().StringVar(&updateActionByIdForRuleLookupActionKind, "kind", "", "The lookup action kind. can accept values LOOKUP")

	var updateActionByIdForRuleLookupActionOwner string
	updateActionByIdForRuleLookupActionCmd.Flags().StringVar(&updateActionByIdForRuleLookupActionOwner, "owner", "", "The name of the user who owns this action. This value is obtained from the bearer token if not present.")

	var updateActionByIdForRuleLookupActionVersion int32
	updateActionByIdForRuleLookupActionCmd.Flags().Int32Var(&updateActionByIdForRuleLookupActionVersion, "version", 0, "The catalog version.")

	catalogCmd.AddCommand(updateActionByIdForRuleRegexActionCmd)
	var updateActionByIdForRuleRegexActionField string
	updateActionByIdForRuleRegexActionCmd.Flags().StringVar(&updateActionByIdForRuleRegexActionField, "field", "", "Name of the field that is matched against the regular expression.")

	var updateActionByIdForRuleRegexActionKind string
	updateActionByIdForRuleRegexActionCmd.Flags().StringVar(&updateActionByIdForRuleRegexActionKind, "kind", "", "The regex action kind. can accept values REGEX")

	var updateActionByIdForRuleRegexActionLimit int32
	updateActionByIdForRuleRegexActionCmd.Flags().Int32Var(&updateActionByIdForRuleRegexActionLimit, "limit", 0, "The maximum number of times per event to attempt to match fields with the regular expression.")

	var updateActionByIdForRuleRegexActionOwner string
	updateActionByIdForRuleRegexActionCmd.Flags().StringVar(&updateActionByIdForRuleRegexActionOwner, "owner", "", "The name of the user who owns this action. This value is obtained from the bearer token if not present.")

	var updateActionByIdForRuleRegexActionPattern string
	updateActionByIdForRuleRegexActionCmd.Flags().StringVar(&updateActionByIdForRuleRegexActionPattern, "pattern", "", "A regular expression that includes named capture groups for the purpose of field extraction.")

	var updateActionByIdForRuleRegexActionVersion int32
	updateActionByIdForRuleRegexActionCmd.Flags().Int32Var(&updateActionByIdForRuleRegexActionVersion, "version", 0, "The catalog version.")

	var updateActionByIdForRuleAliasActionActionid string
	updateActionByIdForRuleAliasActionCmd.Flags().StringVar(&updateActionByIdForRuleAliasActionActionid, "actionid", "", "This is a required parameter. ID of an Action.")
	updateActionByIdForRuleAliasActionCmd.MarkFlagRequired("actionid")

	var updateActionByIdForRuleAliasActionRuleresource string
	updateActionByIdForRuleAliasActionCmd.Flags().StringVar(&updateActionByIdForRuleAliasActionRuleresource, "ruleresource", "", "This is a required parameter. The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.")
	updateActionByIdForRuleAliasActionCmd.MarkFlagRequired("ruleresource")

	var updateActionByIdForRuleAutoKvActionActionid string
	updateActionByIdForRuleAutoKvActionCmd.Flags().StringVar(&updateActionByIdForRuleAutoKvActionActionid, "actionid", "", "This is a required parameter. ID of an Action.")
	updateActionByIdForRuleAutoKvActionCmd.MarkFlagRequired("actionid")

	var updateActionByIdForRuleAutoKvActionRuleresource string
	updateActionByIdForRuleAutoKvActionCmd.Flags().StringVar(&updateActionByIdForRuleAutoKvActionRuleresource, "ruleresource", "", "This is a required parameter. The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.")
	updateActionByIdForRuleAutoKvActionCmd.MarkFlagRequired("ruleresource")

	var updateActionByIdForRuleEvalActionActionid string
	updateActionByIdForRuleEvalActionCmd.Flags().StringVar(&updateActionByIdForRuleEvalActionActionid, "actionid", "", "This is a required parameter. ID of an Action.")
	updateActionByIdForRuleEvalActionCmd.MarkFlagRequired("actionid")

	var updateActionByIdForRuleEvalActionRuleresource string
	updateActionByIdForRuleEvalActionCmd.Flags().StringVar(&updateActionByIdForRuleEvalActionRuleresource, "ruleresource", "", "This is a required parameter. The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.")
	updateActionByIdForRuleEvalActionCmd.MarkFlagRequired("ruleresource")

	var updateActionByIdForRuleLookupActionActionid string
	updateActionByIdForRuleLookupActionCmd.Flags().StringVar(&updateActionByIdForRuleLookupActionActionid, "actionid", "", "This is a required parameter. ID of an Action.")
	updateActionByIdForRuleLookupActionCmd.MarkFlagRequired("actionid")

	var updateActionByIdForRuleLookupActionRuleresource string
	updateActionByIdForRuleLookupActionCmd.Flags().StringVar(&updateActionByIdForRuleLookupActionRuleresource, "ruleresource", "", "This is a required parameter. The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.")
	updateActionByIdForRuleLookupActionCmd.MarkFlagRequired("ruleresource")

	var updateActionByIdForRuleRegexActionActionid string
	updateActionByIdForRuleRegexActionCmd.Flags().StringVar(&updateActionByIdForRuleRegexActionActionid, "actionid", "", "This is a required parameter. ID of an Action.")
	updateActionByIdForRuleRegexActionCmd.MarkFlagRequired("actionid")

	var updateActionByIdForRuleRegexActionRuleresource string
	updateActionByIdForRuleRegexActionCmd.Flags().StringVar(&updateActionByIdForRuleRegexActionRuleresource, "ruleresource", "", "This is a required parameter. The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.")
	updateActionByIdForRuleRegexActionCmd.MarkFlagRequired("ruleresource")

	catalogCmd.AddCommand(updateDashboardCmd)

	var updateDashboardDashboardresource string
	updateDashboardCmd.Flags().StringVar(&updateDashboardDashboardresource, "dashboardresource", "", "This is a required parameter. ID or the resource name of a dashvboard. The resource name format is module.dashboardname.")
	updateDashboardCmd.MarkFlagRequired("dashboardresource")

	var updateDashboardDefinition string
	updateDashboardCmd.Flags().StringVar(&updateDashboardDefinition, "definition", "", "The JSON dashboard definition.")

	var updateDashboardIsactive string
	updateDashboardCmd.Flags().StringVar(&updateDashboardIsactive, "isactive", "false", "Whether the dashboard is active or not.")

	var updateDashboardModule string
	updateDashboardCmd.Flags().StringVar(&updateDashboardModule, "module", "", "The module that contains the dashboard.")

	var updateDashboardName string
	updateDashboardCmd.Flags().StringVar(&updateDashboardName, "name", "", "The dashboard name. Dashboard names must be unique within each tenant.")

	var updateDashboardVersion int32
	updateDashboardCmd.Flags().Int32Var(&updateDashboardVersion, "version", 0, "The version of the dashboard.")

	catalogCmd.AddCommand(updateDatasetFederatedDatasetCmd)
	var updateDatasetFederatedDatasetFederatedConnection string
	updateDatasetFederatedDatasetCmd.Flags().StringVar(&updateDatasetFederatedDatasetFederatedConnection, "federated-connection", "", "Connection information to connect to remote federated connection.")

	var updateDatasetFederatedDatasetFederatedDataset string
	updateDatasetFederatedDatasetCmd.Flags().StringVar(&updateDatasetFederatedDatasetFederatedDataset, "federated-dataset", "", "Dataset information in the remote instance.")

	var updateDatasetFederatedDatasetFederatedDatasetKind string
	updateDatasetFederatedDatasetCmd.Flags().StringVar(&updateDatasetFederatedDatasetFederatedDatasetKind, "federated-dataset-kind", "", "Dataset kind information in the remote instance.")

	var updateDatasetFederatedDatasetKind string
	updateDatasetFederatedDatasetCmd.Flags().StringVar(&updateDatasetFederatedDatasetKind, "kind", "", "The dataset kind. can accept values federated")

	var updateDatasetFederatedDatasetModule string
	updateDatasetFederatedDatasetCmd.Flags().StringVar(&updateDatasetFederatedDatasetModule, "module", "", "The name of module to reassign dataset into.")

	var updateDatasetFederatedDatasetName string
	updateDatasetFederatedDatasetCmd.Flags().StringVar(&updateDatasetFederatedDatasetName, "name", "", "The dataset name. Dataset names must be unique within each module.")

	var updateDatasetFederatedDatasetOwner string
	updateDatasetFederatedDatasetCmd.Flags().StringVar(&updateDatasetFederatedDatasetOwner, "owner", "", "The name of the dataset owner. This value is obtained from the bearer token.")

	catalogCmd.AddCommand(updateDatasetImportDatasetCmd)
	var updateDatasetImportDatasetModule string
	updateDatasetImportDatasetCmd.Flags().StringVar(&updateDatasetImportDatasetModule, "module", "", "The name of module to reassign dataset into.")

	var updateDatasetImportDatasetName string
	updateDatasetImportDatasetCmd.Flags().StringVar(&updateDatasetImportDatasetName, "name", "", "The dataset name. Dataset names must be unique within each module.")

	var updateDatasetImportDatasetOwner string
	updateDatasetImportDatasetCmd.Flags().StringVar(&updateDatasetImportDatasetOwner, "owner", "", "The name of the dataset owner. This value is obtained from the bearer token.")

	catalogCmd.AddCommand(updateDatasetIndexDatasetCmd)
	var updateDatasetIndexDatasetDisabled string
	updateDatasetIndexDatasetCmd.Flags().StringVar(&updateDatasetIndexDatasetDisabled, "disabled", "false", "Specifies whether or not the Splunk index is disabled.")

	var updateDatasetIndexDatasetFrozenTimePeriodInSecs int32
	updateDatasetIndexDatasetCmd.Flags().Int32Var(&updateDatasetIndexDatasetFrozenTimePeriodInSecs, "frozen-time-period-in-secs", 0, "The frozenTimePeriodInSecs to use for the index")

	var updateDatasetIndexDatasetKind string
	updateDatasetIndexDatasetCmd.Flags().StringVar(&updateDatasetIndexDatasetKind, "kind", "", "The dataset kind. can accept values index")

	var updateDatasetIndexDatasetModule string
	updateDatasetIndexDatasetCmd.Flags().StringVar(&updateDatasetIndexDatasetModule, "module", "", "The name of module to reassign dataset into.")

	var updateDatasetIndexDatasetName string
	updateDatasetIndexDatasetCmd.Flags().StringVar(&updateDatasetIndexDatasetName, "name", "", "The dataset name. Dataset names must be unique within each module.")

	var updateDatasetIndexDatasetOwner string
	updateDatasetIndexDatasetCmd.Flags().StringVar(&updateDatasetIndexDatasetOwner, "owner", "", "The name of the dataset owner. This value is obtained from the bearer token.")

	catalogCmd.AddCommand(updateDatasetKvCollectionDatasetCmd)
	var updateDatasetKvCollectionDatasetKind string
	updateDatasetKvCollectionDatasetCmd.Flags().StringVar(&updateDatasetKvCollectionDatasetKind, "kind", "", "The dataset kind. can accept values kvcollection")

	var updateDatasetKvCollectionDatasetModule string
	updateDatasetKvCollectionDatasetCmd.Flags().StringVar(&updateDatasetKvCollectionDatasetModule, "module", "", "The name of module to reassign dataset into.")

	var updateDatasetKvCollectionDatasetName string
	updateDatasetKvCollectionDatasetCmd.Flags().StringVar(&updateDatasetKvCollectionDatasetName, "name", "", "The dataset name. Dataset names must be unique within each module.")

	var updateDatasetKvCollectionDatasetOwner string
	updateDatasetKvCollectionDatasetCmd.Flags().StringVar(&updateDatasetKvCollectionDatasetOwner, "owner", "", "The name of the dataset owner. This value is obtained from the bearer token.")

	catalogCmd.AddCommand(updateDatasetLookupDatasetCmd)
	var updateDatasetLookupDatasetCaseSensitiveMatch string
	updateDatasetLookupDatasetCmd.Flags().StringVar(&updateDatasetLookupDatasetCaseSensitiveMatch, "case-sensitive-match", "true", "Match case-sensitively against the lookup.")

	var updateDatasetLookupDatasetExternalKind string
	updateDatasetLookupDatasetCmd.Flags().StringVar(&updateDatasetLookupDatasetExternalKind, "external-kind", "", "The type of the external lookup. can accept values kvcollection")

	var updateDatasetLookupDatasetExternalName string
	updateDatasetLookupDatasetCmd.Flags().StringVar(&updateDatasetLookupDatasetExternalName, "external-name", "", "The name of the external lookup.")

	var updateDatasetLookupDatasetFilter string
	updateDatasetLookupDatasetCmd.Flags().StringVar(&updateDatasetLookupDatasetFilter, "filter", "", "A query that filters results out of the lookup before those results are returned.")

	var updateDatasetLookupDatasetKind string
	updateDatasetLookupDatasetCmd.Flags().StringVar(&updateDatasetLookupDatasetKind, "kind", "", "The dataset kind. can accept values lookup")

	var updateDatasetLookupDatasetModule string
	updateDatasetLookupDatasetCmd.Flags().StringVar(&updateDatasetLookupDatasetModule, "module", "", "The name of module to reassign dataset into.")

	var updateDatasetLookupDatasetName string
	updateDatasetLookupDatasetCmd.Flags().StringVar(&updateDatasetLookupDatasetName, "name", "", "The dataset name. Dataset names must be unique within each module.")

	var updateDatasetLookupDatasetOwner string
	updateDatasetLookupDatasetCmd.Flags().StringVar(&updateDatasetLookupDatasetOwner, "owner", "", "The name of the dataset owner. This value is obtained from the bearer token.")

	catalogCmd.AddCommand(updateDatasetMetricDatasetCmd)
	var updateDatasetMetricDatasetDisabled string
	updateDatasetMetricDatasetCmd.Flags().StringVar(&updateDatasetMetricDatasetDisabled, "disabled", "false", "Specifies whether or not the Splunk index is disabled.")

	var updateDatasetMetricDatasetFrozenTimePeriodInSecs int32
	updateDatasetMetricDatasetCmd.Flags().Int32Var(&updateDatasetMetricDatasetFrozenTimePeriodInSecs, "frozen-time-period-in-secs", 0, "The frozenTimePeriodInSecs to use for the index")

	var updateDatasetMetricDatasetKind string
	updateDatasetMetricDatasetCmd.Flags().StringVar(&updateDatasetMetricDatasetKind, "kind", "", "The dataset kind. can accept values metric")

	var updateDatasetMetricDatasetModule string
	updateDatasetMetricDatasetCmd.Flags().StringVar(&updateDatasetMetricDatasetModule, "module", "", "The name of module to reassign dataset into.")

	var updateDatasetMetricDatasetName string
	updateDatasetMetricDatasetCmd.Flags().StringVar(&updateDatasetMetricDatasetName, "name", "", "The dataset name. Dataset names must be unique within each module.")

	var updateDatasetMetricDatasetOwner string
	updateDatasetMetricDatasetCmd.Flags().StringVar(&updateDatasetMetricDatasetOwner, "owner", "", "The name of the dataset owner. This value is obtained from the bearer token.")

	catalogCmd.AddCommand(updateDatasetViewDatasetCmd)
	var updateDatasetViewDatasetKind string
	updateDatasetViewDatasetCmd.Flags().StringVar(&updateDatasetViewDatasetKind, "kind", "", "The dataset kind. can accept values view")

	var updateDatasetViewDatasetModule string
	updateDatasetViewDatasetCmd.Flags().StringVar(&updateDatasetViewDatasetModule, "module", "", "The name of module to reassign dataset into.")

	var updateDatasetViewDatasetName string
	updateDatasetViewDatasetCmd.Flags().StringVar(&updateDatasetViewDatasetName, "name", "", "The dataset name. Dataset names must be unique within each module.")

	var updateDatasetViewDatasetOwner string
	updateDatasetViewDatasetCmd.Flags().StringVar(&updateDatasetViewDatasetOwner, "owner", "", "The name of the dataset owner. This value is obtained from the bearer token.")

	var updateDatasetViewDatasetSearch string
	updateDatasetViewDatasetCmd.Flags().StringVar(&updateDatasetViewDatasetSearch, "search", "", "A valid SPL-defined search.")

	var updateDatasetFederatedDatasetDatasetresource string
	updateDatasetFederatedDatasetCmd.Flags().StringVar(&updateDatasetFederatedDatasetDatasetresource, "datasetresource", "", "This is a required parameter. ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.")
	updateDatasetFederatedDatasetCmd.MarkFlagRequired("datasetresource")

	var updateDatasetImportDatasetDatasetresource string
	updateDatasetImportDatasetCmd.Flags().StringVar(&updateDatasetImportDatasetDatasetresource, "datasetresource", "", "This is a required parameter. ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.")
	updateDatasetImportDatasetCmd.MarkFlagRequired("datasetresource")

	var updateDatasetIndexDatasetDatasetresource string
	updateDatasetIndexDatasetCmd.Flags().StringVar(&updateDatasetIndexDatasetDatasetresource, "datasetresource", "", "This is a required parameter. ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.")
	updateDatasetIndexDatasetCmd.MarkFlagRequired("datasetresource")

	var updateDatasetKvCollectionDatasetDatasetresource string
	updateDatasetKvCollectionDatasetCmd.Flags().StringVar(&updateDatasetKvCollectionDatasetDatasetresource, "datasetresource", "", "This is a required parameter. ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.")
	updateDatasetKvCollectionDatasetCmd.MarkFlagRequired("datasetresource")

	var updateDatasetLookupDatasetDatasetresource string
	updateDatasetLookupDatasetCmd.Flags().StringVar(&updateDatasetLookupDatasetDatasetresource, "datasetresource", "", "This is a required parameter. ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.")
	updateDatasetLookupDatasetCmd.MarkFlagRequired("datasetresource")

	var updateDatasetMetricDatasetDatasetresource string
	updateDatasetMetricDatasetCmd.Flags().StringVar(&updateDatasetMetricDatasetDatasetresource, "datasetresource", "", "This is a required parameter. ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.")
	updateDatasetMetricDatasetCmd.MarkFlagRequired("datasetresource")

	var updateDatasetViewDatasetDatasetresource string
	updateDatasetViewDatasetCmd.Flags().StringVar(&updateDatasetViewDatasetDatasetresource, "datasetresource", "", "This is a required parameter. ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.")
	updateDatasetViewDatasetCmd.MarkFlagRequired("datasetresource")

	catalogCmd.AddCommand(updateFieldByIdForDatasetCmd)

	var updateFieldByIdForDatasetDatasetresource string
	updateFieldByIdForDatasetCmd.Flags().StringVar(&updateFieldByIdForDatasetDatasetresource, "datasetresource", "", "This is a required parameter. ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.")
	updateFieldByIdForDatasetCmd.MarkFlagRequired("datasetresource")

	var updateFieldByIdForDatasetFieldid string
	updateFieldByIdForDatasetCmd.Flags().StringVar(&updateFieldByIdForDatasetFieldid, "fieldid", "", "This is a required parameter. ID of a Field.")
	updateFieldByIdForDatasetCmd.MarkFlagRequired("fieldid")

	var updateFieldByIdForDatasetDatatype string
	updateFieldByIdForDatasetCmd.Flags().StringVar(&updateFieldByIdForDatasetDatatype, "datatype", "", "The type of data in the field. Must be one of the valid values. can accept values DATE, NUMBER, OBJECT_ID, STRING, UNKNOWN")

	var updateFieldByIdForDatasetDescription string
	updateFieldByIdForDatasetCmd.Flags().StringVar(&updateFieldByIdForDatasetDescription, "description", "", "The field description.")

	var updateFieldByIdForDatasetFieldtype string
	updateFieldByIdForDatasetCmd.Flags().StringVar(&updateFieldByIdForDatasetFieldtype, "fieldtype", "", "The type of field. Must be one of the valid values. can accept values DIMENSION, MEASURE, UNKNOWN")

	var updateFieldByIdForDatasetIndexed string
	updateFieldByIdForDatasetCmd.Flags().StringVar(&updateFieldByIdForDatasetIndexed, "indexed", "false", "Whether or not the field has been indexed.")

	var updateFieldByIdForDatasetName string
	updateFieldByIdForDatasetCmd.Flags().StringVar(&updateFieldByIdForDatasetName, "name", "", "The field name.")

	var updateFieldByIdForDatasetPrevalence string
	updateFieldByIdForDatasetCmd.Flags().StringVar(&updateFieldByIdForDatasetPrevalence, "prevalence", "", "How frequent the field appears in the dataset. Must be one of the valid values. can accept values ALL, SOME, UNKNOWN")

	var updateFieldByIdForDatasetSummary string
	updateFieldByIdForDatasetCmd.Flags().StringVar(&updateFieldByIdForDatasetSummary, "summary", "", "The field summary.")

	var updateFieldByIdForDatasetTitle string
	updateFieldByIdForDatasetCmd.Flags().StringVar(&updateFieldByIdForDatasetTitle, "title", "", "The field title.")

	catalogCmd.AddCommand(updateRelationshipByIdCmd)

	var updateRelationshipByIdRelationshipid string
	updateRelationshipByIdCmd.Flags().StringVar(&updateRelationshipByIdRelationshipid, "relationshipid", "", "This is a required parameter. ID of a relationship.")
	updateRelationshipByIdCmd.MarkFlagRequired("relationshipid")

	var updateRelationshipByIdName string
	updateRelationshipByIdCmd.Flags().StringVar(&updateRelationshipByIdName, "name", "", "The name of the relationship.")

	var updateRelationshipByIdOwner string
	updateRelationshipByIdCmd.Flags().StringVar(&updateRelationshipByIdOwner, "owner", "", "The user who is the owner of the relationship.")

	catalogCmd.AddCommand(updateRuleCmd)

	var updateRuleRuleresource string
	updateRuleCmd.Flags().StringVar(&updateRuleRuleresource, "ruleresource", "", "This is a required parameter. The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.")
	updateRuleCmd.MarkFlagRequired("ruleresource")

	var updateRuleMatch string
	updateRuleCmd.Flags().StringVar(&updateRuleMatch, "match", "", "The rule match type.")

	var updateRuleModule string
	updateRuleCmd.Flags().StringVar(&updateRuleModule, "module", "", "The module containing the rule.")

	var updateRuleName string
	updateRuleCmd.Flags().StringVar(&updateRuleName, "name", "", "The rule name.")

	var updateRuleOwner string
	updateRuleCmd.Flags().StringVar(&updateRuleOwner, "owner", "", "The name of the user who owns the rule.")

	var updateRuleVersion int32
	updateRuleCmd.Flags().Int32Var(&updateRuleVersion, "version", 0, "The catalog version.")

}
