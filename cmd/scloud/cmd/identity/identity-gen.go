// Package identity -- generated by scloudgen
// !! DO NOT EDIT !!
//
package identity

import (
	"github.com/spf13/cobra"
	impl "github.com/splunk/splunk-cloud-sdk-go/cmd/scloud/pkg/identity"
)

// addGroupMember -- Adds a member to a given group.
var addGroupMemberCmd = &cobra.Command{
	Use:   "add-group-member",
	Short: "Adds a member to a given group.",
	RunE:  impl.AddGroupMember,
}

// addGroupRole -- Adds a role to a given group.
var addGroupRoleCmd = &cobra.Command{
	Use:   "add-group-role",
	Short: "Adds a role to a given group.",
	RunE:  impl.AddGroupRole,
}

// addInvisibleMember -- Adds an invisible member in a given tenant.
var addInvisibleMemberCmd = &cobra.Command{
	Use:   "add-invisible-member",
	Short: "Adds an invisible member in a given tenant.",
	RunE:  impl.AddInvisibleMember,
}

// addMember -- Adds a member to a given tenant.
var addMemberCmd = &cobra.Command{
	Use:   "add-member",
	Short: "Adds a member to a given tenant.",
	RunE:  impl.AddMember,
}

// addPrincipalPublicKey -- Add service principal public key
var addPrincipalPublicKeyCmd = &cobra.Command{
	Use:   "add-principal-public-key",
	Short: "Add service principal public key",
	RunE:  impl.AddPrincipalPublicKey,
}

// addRolePermission -- Adds permissions to a role in a given tenant.
var addRolePermissionCmd = &cobra.Command{
	Use:   "add-role-permission",
	Short: "Adds permissions to a role in a given tenant.",
	RunE:  impl.AddRolePermission,
}

// createGroup -- Creates a new group in a given tenant.
var createGroupCmd = &cobra.Command{
	Use:   "create-group",
	Short: "Creates a new group in a given tenant.",
	RunE:  impl.CreateGroup,
}

// createRole -- Creates a new authorization role in a given tenant.
var createRoleCmd = &cobra.Command{
	Use:   "create-role",
	Short: "Creates a new authorization role in a given tenant.",
	RunE:  impl.CreateRole,
}

// deleteGroup -- Deletes a group in a given tenant.
var deleteGroupCmd = &cobra.Command{
	Use:   "delete-group",
	Short: "Deletes a group in a given tenant.",
	RunE:  impl.DeleteGroup,
}

// deletePrincipalPublicKey -- Deletes principal public key
var deletePrincipalPublicKeyCmd = &cobra.Command{
	Use:   "delete-principal-public-key",
	Short: "Deletes principal public key",
	RunE:  impl.DeletePrincipalPublicKey,
}

// deleteRole -- Deletes a defined role for a given tenant.
var deleteRoleCmd = &cobra.Command{
	Use:   "delete-role",
	Short: "Deletes a defined role for a given tenant.",
	RunE:  impl.DeleteRole,
}

// getGroup -- Returns information about a given group within a tenant.
var getGroupCmd = &cobra.Command{
	Use:   "get-group",
	Short: "Returns information about a given group within a tenant.",
	RunE:  impl.GetGroup,
}

// getGroupMember -- Returns information about a given member within a given group.
var getGroupMemberCmd = &cobra.Command{
	Use:   "get-group-member",
	Short: "Returns information about a given member within a given group.",
	RunE:  impl.GetGroupMember,
}

// getGroupRole -- Returns information about a given role within a given group.
var getGroupRoleCmd = &cobra.Command{
	Use:   "get-group-role",
	Short: "Returns information about a given role within a given group.",
	RunE:  impl.GetGroupRole,
}

// getMember -- Returns a member of a given tenant.
var getMemberCmd = &cobra.Command{
	Use:   "get-member",
	Short: "Returns a member of a given tenant.",
	RunE:  impl.GetMember,
}

// getMemberAdmin -- Gets a member in a tenant.
var getMemberAdminCmd = &cobra.Command{
	Use:   "get-member-admin",
	Short: "Gets a member in a tenant.",
	RunE:  impl.GetMemberAdmin,
}

// getPrincipal -- Returns the details of a principal, including its tenant membership.
var getPrincipalCmd = &cobra.Command{
	Use:   "get-principal",
	Short: "Returns the details of a principal, including its tenant membership.",
	RunE:  impl.GetPrincipal,
}

// getPrincipalPublicKey -- Returns principal public key
var getPrincipalPublicKeyCmd = &cobra.Command{
	Use:   "get-principal-public-key",
	Short: "Returns principal public key",
	RunE:  impl.GetPrincipalPublicKey,
}

// getPrincipalPublicKeys -- Returns principal public keys
var getPrincipalPublicKeysCmd = &cobra.Command{
	Use:   "get-principal-public-keys",
	Short: "Returns principal public keys",
	RunE:  impl.GetPrincipalPublicKeys,
}

// getRole -- Returns a role for a given tenant.
var getRoleCmd = &cobra.Command{
	Use:   "get-role",
	Short: "Returns a role for a given tenant.",
	RunE:  impl.GetRole,
}

// getRolePermission -- Gets a permission for the specified role.
var getRolePermissionCmd = &cobra.Command{
	Use:   "get-role-permission",
	Short: "Gets a permission for the specified role.",
	RunE:  impl.GetRolePermission,
}

// listGroupMembers -- Returns a list of the members within a given group.
var listGroupMembersCmd = &cobra.Command{
	Use:   "list-group-members",
	Short: "Returns a list of the members within a given group.",
	RunE:  impl.ListGroupMembers,
}

// listGroupRoles -- Returns a list of the roles that are attached to a group within a given tenant.
var listGroupRolesCmd = &cobra.Command{
	Use:   "list-group-roles",
	Short: "Returns a list of the roles that are attached to a group within a given tenant.",
	RunE:  impl.ListGroupRoles,
}

// listGroups -- List the groups that exist in a given tenant.
var listGroupsCmd = &cobra.Command{
	Use:   "list-groups",
	Short: "List the groups that exist in a given tenant.",
	RunE:  impl.ListGroups,
}

// listMemberGroups -- Returns a list of groups that a member belongs to within a tenant.
var listMemberGroupsCmd = &cobra.Command{
	Use:   "list-member-groups",
	Short: "Returns a list of groups that a member belongs to within a tenant.",
	RunE:  impl.ListMemberGroups,
}

// listMemberPermissions -- Returns a set of permissions granted to the member within the tenant.

var listMemberPermissionsCmd = &cobra.Command{
	Use:   "list-member-permissions",
	Short: "Returns a set of permissions granted to the member within the tenant.",
	RunE:  impl.ListMemberPermissions,
}

// listMemberRoles -- Returns a set of roles that a given member holds within the tenant.

var listMemberRolesCmd = &cobra.Command{
	Use:   "list-member-roles",
	Short: "Returns a set of roles that a given member holds within the tenant.",
	RunE:  impl.ListMemberRoles,
}

// listMembers -- Returns a list of members in a given tenant.
var listMembersCmd = &cobra.Command{
	Use:   "list-members",
	Short: "Returns a list of members in a given tenant.",
	RunE:  impl.ListMembers,
}

// listPrincipals -- Returns the list of principals that the Identity service knows about.
var listPrincipalsCmd = &cobra.Command{
	Use:   "list-principals",
	Short: "Returns the list of principals that the Identity service knows about.",
	RunE:  impl.ListPrincipals,
}

// listRoleGroups -- Gets a list of groups for a role in a given tenant.
var listRoleGroupsCmd = &cobra.Command{
	Use:   "list-role-groups",
	Short: "Gets a list of groups for a role in a given tenant.",
	RunE:  impl.ListRoleGroups,
}

// listRolePermissions -- Gets the permissions for a role in a given tenant.
var listRolePermissionsCmd = &cobra.Command{
	Use:   "list-role-permissions",
	Short: "Gets the permissions for a role in a given tenant.",
	RunE:  impl.ListRolePermissions,
}

// listRoles -- Returns all roles for a given tenant.
var listRolesCmd = &cobra.Command{
	Use:   "list-roles",
	Short: "Returns all roles for a given tenant.",
	RunE:  impl.ListRoles,
}

// removeGroupMember -- Removes the member from a given group.
var removeGroupMemberCmd = &cobra.Command{
	Use:   "remove-group-member",
	Short: "Removes the member from a given group.",
	RunE:  impl.RemoveGroupMember,
}

// removeGroupRole -- Removes a role from a given group.
var removeGroupRoleCmd = &cobra.Command{
	Use:   "remove-group-role",
	Short: "Removes a role from a given group.",
	RunE:  impl.RemoveGroupRole,
}

// removeMember -- Removes a member from a given tenant
var removeMemberCmd = &cobra.Command{
	Use:   "remove-member",
	Short: "Removes a member from a given tenant",
	RunE:  impl.RemoveMember,
}

// removeMemberAdmin -- Remove a member in a tenant.
var removeMemberAdminCmd = &cobra.Command{
	Use:   "remove-member-admin",
	Short: "Remove a member in a tenant.",
	RunE:  impl.RemoveMemberAdmin,
}

// removeRolePermission -- Removes a permission from the role.
var removeRolePermissionCmd = &cobra.Command{
	Use:   "remove-role-permission",
	Short: "Removes a permission from the role.",
	RunE:  impl.RemoveRolePermission,
}

// revokePrincipalAuthTokens -- Revoke all existing tokens issued to a principal. Principals can reset their password by visiting https://login.splunk.com/en_us/page/lost_password
var revokePrincipalAuthTokensCmd = &cobra.Command{
	Use:   "revoke-principal-auth-tokens",
	Short: "Revoke all existing tokens issued to a principal. Principals can reset their password by visiting https://login.splunk.com/en_us/page/lost_password",
	RunE:  impl.RevokePrincipalAuthTokens,
}

// updatePrincipalPublicKey -- Update principal public key
var updatePrincipalPublicKeyCmd = &cobra.Command{
	Use:   "update-principal-public-key",
	Short: "Update principal public key",
	RunE:  impl.UpdatePrincipalPublicKey,
}

// validateToken -- Validates the access token obtained from the authorization header and returns the principal name and tenant memberships.

var validateTokenCmd = &cobra.Command{
	Use:   "validate-token",
	Short: "Validates the access token obtained from the authorization header and returns the principal name and tenant memberships.",
	RunE:  impl.ValidateToken,
}

func init() {
	identityCmd.AddCommand(addGroupMemberCmd)

	var addGroupMemberGroup string
	addGroupMemberCmd.Flags().StringVar(&addGroupMemberGroup, "group", "", "This is a required parameter. The group name.")
	addGroupMemberCmd.MarkFlagRequired("group")

	var addGroupMemberName string
	addGroupMemberCmd.Flags().StringVar(&addGroupMemberName, "name", "", "This is a required parameter. ")
	addGroupMemberCmd.MarkFlagRequired("name")

	identityCmd.AddCommand(addGroupRoleCmd)

	var addGroupRoleGroup string
	addGroupRoleCmd.Flags().StringVar(&addGroupRoleGroup, "group", "", "This is a required parameter. The group name.")
	addGroupRoleCmd.MarkFlagRequired("group")

	var addGroupRoleName string
	addGroupRoleCmd.Flags().StringVar(&addGroupRoleName, "name", "", "This is a required parameter. ")
	addGroupRoleCmd.MarkFlagRequired("name")

	identityCmd.AddCommand(addInvisibleMemberCmd)

	var addInvisibleMemberName string
	addInvisibleMemberCmd.Flags().StringVar(&addInvisibleMemberName, "name", "", "This is a required parameter. The name of the member to be added.")
	addInvisibleMemberCmd.MarkFlagRequired("name")

	var addInvisibleMemberReason string
	addInvisibleMemberCmd.Flags().StringVar(&addInvisibleMemberReason, "reason", "", "This is a required parameter. The reason you are adding this member.")
	addInvisibleMemberCmd.MarkFlagRequired("reason")

	var addInvisibleMemberVersion string
	addInvisibleMemberCmd.Flags().StringVar(&addInvisibleMemberVersion, "version", "", "This is a required parameter. The service API version.")
	addInvisibleMemberCmd.MarkFlagRequired("version")

	var addInvisibleMemberExpiresIn int32
	addInvisibleMemberCmd.Flags().Int32Var(&addInvisibleMemberExpiresIn, "expires-in", 0, "The expiration time of the member in seconds.")

	identityCmd.AddCommand(addMemberCmd)

	var addMemberName string
	addMemberCmd.Flags().StringVar(&addMemberName, "name", "", "This is a required parameter. ")
	addMemberCmd.MarkFlagRequired("name")

	identityCmd.AddCommand(addPrincipalPublicKeyCmd)

	var addPrincipalPublicKeyPrincipal string
	addPrincipalPublicKeyCmd.Flags().StringVar(&addPrincipalPublicKeyPrincipal, "principal", "", "This is a required parameter. The principal name.")
	addPrincipalPublicKeyCmd.MarkFlagRequired("principal")

	var addPrincipalPublicKeyAlg string
	addPrincipalPublicKeyCmd.Flags().StringVar(&addPrincipalPublicKeyAlg, "alg", "", " can accept values ES256, ES384, ES512")

	var addPrincipalPublicKeyCrv string
	addPrincipalPublicKeyCmd.Flags().StringVar(&addPrincipalPublicKeyCrv, "crv", "", "")

	var addPrincipalPublicKeyD string
	addPrincipalPublicKeyCmd.Flags().StringVar(&addPrincipalPublicKeyD, "d", "", "")

	var addPrincipalPublicKeyKid string
	addPrincipalPublicKeyCmd.Flags().StringVar(&addPrincipalPublicKeyKid, "kid", "", "")

	var addPrincipalPublicKeyKty string
	addPrincipalPublicKeyCmd.Flags().StringVar(&addPrincipalPublicKeyKty, "kty", "", " can accept values EC")

	var addPrincipalPublicKeyX string
	addPrincipalPublicKeyCmd.Flags().StringVar(&addPrincipalPublicKeyX, "x", "", "")

	var addPrincipalPublicKeyY string
	addPrincipalPublicKeyCmd.Flags().StringVar(&addPrincipalPublicKeyY, "y", "", "")

	identityCmd.AddCommand(addRolePermissionCmd)

	var addRolePermissionBody string
	addRolePermissionCmd.Flags().StringVar(&addRolePermissionBody, "body", "", "The request body")
	addRolePermissionCmd.MarkFlagRequired("body")

	var addRolePermissionRole string
	addRolePermissionCmd.Flags().StringVar(&addRolePermissionRole, "role", "", "This is a required parameter. The role name.")
	addRolePermissionCmd.MarkFlagRequired("role")

	identityCmd.AddCommand(createGroupCmd)

	var createGroupName string
	createGroupCmd.Flags().StringVar(&createGroupName, "name", "", "This is a required parameter. ")
	createGroupCmd.MarkFlagRequired("name")

	identityCmd.AddCommand(createRoleCmd)

	var createRoleName string
	createRoleCmd.Flags().StringVar(&createRoleName, "name", "", "This is a required parameter. ")
	createRoleCmd.MarkFlagRequired("name")

	identityCmd.AddCommand(deleteGroupCmd)

	var deleteGroupGroup string
	deleteGroupCmd.Flags().StringVar(&deleteGroupGroup, "group", "", "This is a required parameter. The group name.")
	deleteGroupCmd.MarkFlagRequired("group")

	identityCmd.AddCommand(deletePrincipalPublicKeyCmd)

	var deletePrincipalPublicKeyKeyId string
	deletePrincipalPublicKeyCmd.Flags().StringVar(&deletePrincipalPublicKeyKeyId, "key-id", "", "This is a required parameter. Identifier of a public key.")
	deletePrincipalPublicKeyCmd.MarkFlagRequired("key-id")

	var deletePrincipalPublicKeyPrincipal string
	deletePrincipalPublicKeyCmd.Flags().StringVar(&deletePrincipalPublicKeyPrincipal, "principal", "", "This is a required parameter. The principal name.")
	deletePrincipalPublicKeyCmd.MarkFlagRequired("principal")

	identityCmd.AddCommand(deleteRoleCmd)

	var deleteRoleRole string
	deleteRoleCmd.Flags().StringVar(&deleteRoleRole, "role", "", "This is a required parameter. The role name.")
	deleteRoleCmd.MarkFlagRequired("role")

	identityCmd.AddCommand(getGroupCmd)

	var getGroupGroup string
	getGroupCmd.Flags().StringVar(&getGroupGroup, "group", "", "This is a required parameter. The group name.")
	getGroupCmd.MarkFlagRequired("group")

	identityCmd.AddCommand(getGroupMemberCmd)

	var getGroupMemberGroup string
	getGroupMemberCmd.Flags().StringVar(&getGroupMemberGroup, "group", "", "This is a required parameter. The group name.")
	getGroupMemberCmd.MarkFlagRequired("group")

	var getGroupMemberMember string
	getGroupMemberCmd.Flags().StringVar(&getGroupMemberMember, "member", "", "This is a required parameter. The member name.")
	getGroupMemberCmd.MarkFlagRequired("member")

	identityCmd.AddCommand(getGroupRoleCmd)

	var getGroupRoleGroup string
	getGroupRoleCmd.Flags().StringVar(&getGroupRoleGroup, "group", "", "This is a required parameter. The group name.")
	getGroupRoleCmd.MarkFlagRequired("group")

	var getGroupRoleRole string
	getGroupRoleCmd.Flags().StringVar(&getGroupRoleRole, "role", "", "This is a required parameter. The role name.")
	getGroupRoleCmd.MarkFlagRequired("role")

	identityCmd.AddCommand(getMemberCmd)

	var getMemberMember string
	getMemberCmd.Flags().StringVar(&getMemberMember, "member", "", "This is a required parameter. The member name.")
	getMemberCmd.MarkFlagRequired("member")

	identityCmd.AddCommand(getMemberAdminCmd)

	var getMemberAdminMember string
	getMemberAdminCmd.Flags().StringVar(&getMemberAdminMember, "member", "", "This is a required parameter. The member name.")
	getMemberAdminCmd.MarkFlagRequired("member")

	var getMemberAdminVersion string
	getMemberAdminCmd.Flags().StringVar(&getMemberAdminVersion, "version", "", "This is a required parameter. The service API version.")
	getMemberAdminCmd.MarkFlagRequired("version")

	identityCmd.AddCommand(getPrincipalCmd)

	var getPrincipalPrincipal string
	getPrincipalCmd.Flags().StringVar(&getPrincipalPrincipal, "principal", "", "This is a required parameter. The principal name.")
	getPrincipalCmd.MarkFlagRequired("principal")

	identityCmd.AddCommand(getPrincipalPublicKeyCmd)

	var getPrincipalPublicKeyKeyId string
	getPrincipalPublicKeyCmd.Flags().StringVar(&getPrincipalPublicKeyKeyId, "key-id", "", "This is a required parameter. Identifier of a public key.")
	getPrincipalPublicKeyCmd.MarkFlagRequired("key-id")

	var getPrincipalPublicKeyPrincipal string
	getPrincipalPublicKeyCmd.Flags().StringVar(&getPrincipalPublicKeyPrincipal, "principal", "", "This is a required parameter. The principal name.")
	getPrincipalPublicKeyCmd.MarkFlagRequired("principal")

	identityCmd.AddCommand(getPrincipalPublicKeysCmd)

	var getPrincipalPublicKeysPrincipal string
	getPrincipalPublicKeysCmd.Flags().StringVar(&getPrincipalPublicKeysPrincipal, "principal", "", "This is a required parameter. The principal name.")
	getPrincipalPublicKeysCmd.MarkFlagRequired("principal")

	identityCmd.AddCommand(getRoleCmd)

	var getRoleRole string
	getRoleCmd.Flags().StringVar(&getRoleRole, "role", "", "This is a required parameter. The role name.")
	getRoleCmd.MarkFlagRequired("role")

	identityCmd.AddCommand(getRolePermissionCmd)

	var getRolePermissionPermission string
	getRolePermissionCmd.Flags().StringVar(&getRolePermissionPermission, "permission", "", "This is a required parameter. The permission string.")
	getRolePermissionCmd.MarkFlagRequired("permission")

	var getRolePermissionRole string
	getRolePermissionCmd.Flags().StringVar(&getRolePermissionRole, "role", "", "This is a required parameter. The role name.")
	getRolePermissionCmd.MarkFlagRequired("role")

	identityCmd.AddCommand(listGroupMembersCmd)

	var listGroupMembersGroup string
	listGroupMembersCmd.Flags().StringVar(&listGroupMembersGroup, "group", "", "This is a required parameter. The group name.")
	listGroupMembersCmd.MarkFlagRequired("group")

	identityCmd.AddCommand(listGroupRolesCmd)

	var listGroupRolesGroup string
	listGroupRolesCmd.Flags().StringVar(&listGroupRolesGroup, "group", "", "This is a required parameter. The group name.")
	listGroupRolesCmd.MarkFlagRequired("group")

	identityCmd.AddCommand(listGroupsCmd)

	var listGroupsAccess string
	listGroupsCmd.Flags().StringVar(&listGroupsAccess, "access", "", "List only the groups with specified access permission.")

	identityCmd.AddCommand(listMemberGroupsCmd)

	var listMemberGroupsMember string
	listMemberGroupsCmd.Flags().StringVar(&listMemberGroupsMember, "member", "", "This is a required parameter. The member name.")
	listMemberGroupsCmd.MarkFlagRequired("member")

	identityCmd.AddCommand(listMemberPermissionsCmd)

	var listMemberPermissionsMember string
	listMemberPermissionsCmd.Flags().StringVar(&listMemberPermissionsMember, "member", "", "This is a required parameter. The member name.")
	listMemberPermissionsCmd.MarkFlagRequired("member")

	var listMemberPermissionsScopeFilter string
	listMemberPermissionsCmd.Flags().StringVar(&listMemberPermissionsScopeFilter, "scope-filter", "", "List only the permissions matching the scope filter.")

	identityCmd.AddCommand(listMemberRolesCmd)

	var listMemberRolesMember string
	listMemberRolesCmd.Flags().StringVar(&listMemberRolesMember, "member", "", "This is a required parameter. The member name.")
	listMemberRolesCmd.MarkFlagRequired("member")

	identityCmd.AddCommand(listMembersCmd)

	identityCmd.AddCommand(listPrincipalsCmd)

	identityCmd.AddCommand(listRoleGroupsCmd)

	var listRoleGroupsRole string
	listRoleGroupsCmd.Flags().StringVar(&listRoleGroupsRole, "role", "", "This is a required parameter. The role name.")
	listRoleGroupsCmd.MarkFlagRequired("role")

	identityCmd.AddCommand(listRolePermissionsCmd)

	var listRolePermissionsRole string
	listRolePermissionsCmd.Flags().StringVar(&listRolePermissionsRole, "role", "", "This is a required parameter. The role name.")
	listRolePermissionsCmd.MarkFlagRequired("role")

	identityCmd.AddCommand(listRolesCmd)

	identityCmd.AddCommand(removeGroupMemberCmd)

	var removeGroupMemberGroup string
	removeGroupMemberCmd.Flags().StringVar(&removeGroupMemberGroup, "group", "", "This is a required parameter. The group name.")
	removeGroupMemberCmd.MarkFlagRequired("group")

	var removeGroupMemberMember string
	removeGroupMemberCmd.Flags().StringVar(&removeGroupMemberMember, "member", "", "This is a required parameter. The member name.")
	removeGroupMemberCmd.MarkFlagRequired("member")

	identityCmd.AddCommand(removeGroupRoleCmd)

	var removeGroupRoleGroup string
	removeGroupRoleCmd.Flags().StringVar(&removeGroupRoleGroup, "group", "", "This is a required parameter. The group name.")
	removeGroupRoleCmd.MarkFlagRequired("group")

	var removeGroupRoleRole string
	removeGroupRoleCmd.Flags().StringVar(&removeGroupRoleRole, "role", "", "This is a required parameter. The role name.")
	removeGroupRoleCmd.MarkFlagRequired("role")

	identityCmd.AddCommand(removeMemberCmd)

	var removeMemberMember string
	removeMemberCmd.Flags().StringVar(&removeMemberMember, "member", "", "This is a required parameter. The member name.")
	removeMemberCmd.MarkFlagRequired("member")

	identityCmd.AddCommand(removeMemberAdminCmd)

	var removeMemberAdminMember string
	removeMemberAdminCmd.Flags().StringVar(&removeMemberAdminMember, "member", "", "This is a required parameter. The member name.")
	removeMemberAdminCmd.MarkFlagRequired("member")

	var removeMemberAdminVersion string
	removeMemberAdminCmd.Flags().StringVar(&removeMemberAdminVersion, "version", "", "This is a required parameter. The service API version.")
	removeMemberAdminCmd.MarkFlagRequired("version")

	identityCmd.AddCommand(removeRolePermissionCmd)

	var removeRolePermissionPermission string
	removeRolePermissionCmd.Flags().StringVar(&removeRolePermissionPermission, "permission", "", "This is a required parameter. The permission string.")
	removeRolePermissionCmd.MarkFlagRequired("permission")

	var removeRolePermissionRole string
	removeRolePermissionCmd.Flags().StringVar(&removeRolePermissionRole, "role", "", "This is a required parameter. The role name.")
	removeRolePermissionCmd.MarkFlagRequired("role")

	identityCmd.AddCommand(revokePrincipalAuthTokensCmd)

	var revokePrincipalAuthTokensPrincipal string
	revokePrincipalAuthTokensCmd.Flags().StringVar(&revokePrincipalAuthTokensPrincipal, "principal", "", "This is a required parameter. The principal name.")
	revokePrincipalAuthTokensCmd.MarkFlagRequired("principal")

	identityCmd.AddCommand(updatePrincipalPublicKeyCmd)

	var updatePrincipalPublicKeyKeyId string
	updatePrincipalPublicKeyCmd.Flags().StringVar(&updatePrincipalPublicKeyKeyId, "key-id", "", "This is a required parameter. Identifier of a public key.")
	updatePrincipalPublicKeyCmd.MarkFlagRequired("key-id")

	var updatePrincipalPublicKeyPrincipal string
	updatePrincipalPublicKeyCmd.Flags().StringVar(&updatePrincipalPublicKeyPrincipal, "principal", "", "This is a required parameter. The principal name.")
	updatePrincipalPublicKeyCmd.MarkFlagRequired("principal")

	var updatePrincipalPublicKeyStatus string
	updatePrincipalPublicKeyCmd.Flags().StringVar(&updatePrincipalPublicKeyStatus, "status", "", "This is a required parameter.  can accept values active, inactive")
	updatePrincipalPublicKeyCmd.MarkFlagRequired("status")

	identityCmd.AddCommand(validateTokenCmd)

	var validateTokenInclude string
	validateTokenCmd.Flags().StringVar(&validateTokenInclude, "include", "", "Include additional information to return when validating tenant membership. Valid parameters [tenant, principal]")

}
