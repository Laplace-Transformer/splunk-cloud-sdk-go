// Package ingest -- generated by scloudgen
// !! DO NOT EDIT !!
//
package ingest

import (
	"github.com/spf13/cobra"
	impl "github.com/splunk/splunk-cloud-sdk-go/cmd/scloud/pkg/ingest"
)

// deleteAllCollectorTokens -- Delete All dsphec tokens for a given tenant.
var deleteAllCollectorTokensCmd = &cobra.Command{
	Use:   "delete-all-collector-tokens",
	Short: "Delete All dsphec tokens for a given tenant.",
	RunE:  impl.DeleteAllCollectorTokens,
}

// deleteCollectorToken -- Delete dsphec token by name.
var deleteCollectorTokenCmd = &cobra.Command{
	Use:   "delete-collector-token",
	Short: "Delete dsphec token by name.",
	RunE:  impl.DeleteCollectorToken,
}

// getCollectorToken -- Get the metadata of a dsphec token by name.
var getCollectorTokenCmd = &cobra.Command{
	Use:   "get-collector-token",
	Short: "Get the metadata of a dsphec token by name.",
	RunE:  impl.GetCollectorToken,
}

// listCollectorTokens -- List dsphec tokens for a tenant.
var listCollectorTokensCmd = &cobra.Command{
	Use:   "list-collector-tokens",
	Short: "List dsphec tokens for a tenant.",
	RunE:  impl.ListCollectorTokens,
}

// postCollectorTokens -- Creates dsphec tokens.
var postCollectorTokensCmd = &cobra.Command{
	Use:   "post-collector-tokens",
	Short: "Creates dsphec tokens.",
	RunE:  impl.PostCollectorTokens,
}

// postEvents -- Sends events.
var postEventsCmd = &cobra.Command{
	Use:   "post-events",
	Short: "Sends events.",
	RunE:  impl.PostEvents,
}

// postMetrics -- Sends metric events.
var postMetricsCmd = &cobra.Command{
	Use:   "post-metrics",
	Short: "Sends metric events.",
	RunE:  impl.PostMetrics,
}

// putCollectorToken -- Update the metadata of a dsphec token by name.
var putCollectorTokenCmd = &cobra.Command{
	Use:   "put-collector-token",
	Short: "Update the metadata of a dsphec token by name.",
	RunE:  impl.PutCollectorToken,
}

// uploadFiles -- Upload a CSV or text file that contains events. The file limit is 1MB or an error is returned.
var uploadFilesCmd = &cobra.Command{
	Use:   "upload-files",
	Short: "Upload a CSV or text file that contains events. The file limit is 1MB or an error is returned.",
	RunE:  impl.UploadFiles,
}

func init() {
	ingestCmd.AddCommand(deleteAllCollectorTokensCmd)

	ingestCmd.AddCommand(deleteCollectorTokenCmd)

	var deleteCollectorTokenTokenName string
	deleteCollectorTokenCmd.Flags().StringVar(&deleteCollectorTokenTokenName, "token-name", "", "This is a required parameter. ")
	deleteCollectorTokenCmd.MarkFlagRequired("token-name")

	ingestCmd.AddCommand(getCollectorTokenCmd)

	var getCollectorTokenTokenName string
	getCollectorTokenCmd.Flags().StringVar(&getCollectorTokenTokenName, "token-name", "", "This is a required parameter. ")
	getCollectorTokenCmd.MarkFlagRequired("token-name")

	ingestCmd.AddCommand(listCollectorTokensCmd)

	var listCollectorTokensLimit int64
	listCollectorTokensCmd.Flags().Int64Var(&listCollectorTokensLimit, "limit", 0, "")

	var listCollectorTokensOffset int64
	listCollectorTokensCmd.Flags().Int64Var(&listCollectorTokensOffset, "offset", 0, "")

	ingestCmd.AddCommand(postCollectorTokensCmd)

	var postCollectorTokensName string
	postCollectorTokensCmd.Flags().StringVar(&postCollectorTokensName, "name", "", "This is a required parameter. name is the name of the token (unique within the tenant that it belongs to).  type: string")
	postCollectorTokensCmd.MarkFlagRequired("name")

	var postCollectorTokensAckEnabled string
	postCollectorTokensCmd.Flags().StringVar(&postCollectorTokensAckEnabled, "ack-enabled", "false", "ack_enabled is set to true if events sent with the auth token should support indexer acknowledgement  type: bool")

	var postCollectorTokensAllowQueryStringAuth string
	postCollectorTokensCmd.Flags().StringVar(&postCollectorTokensAllowQueryStringAuth, "allow-query-string-auth", "false", "allow_query_string_auth is set to true if this token can be passed into the ingest endpoint's query parameter for auth  type: bool")

	var postCollectorTokensDescription string
	postCollectorTokensCmd.Flags().StringVar(&postCollectorTokensDescription, "description", "", "description is an optional description of the token.  type: string")

	var postCollectorTokensDisabled string
	postCollectorTokensCmd.Flags().StringVar(&postCollectorTokensDisabled, "disabled", "false", "disabled is set to true if this auth token has been disabled and cannot be used to send events to HECv1  type: bool")

	var postCollectorTokensIndex string
	postCollectorTokensCmd.Flags().StringVar(&postCollectorTokensIndex, "index", "", "index is the default value of the index field for records collected using this token.  type: string")

	var postCollectorTokensIndexes []string
	postCollectorTokensCmd.Flags().StringSliceVar(&postCollectorTokensIndexes, "indexes", nil, "indexes is a list of index names that this token is allowed to send events to  type: []string")

	var postCollectorTokensSource string
	postCollectorTokensCmd.Flags().StringVar(&postCollectorTokensSource, "source", "", "source is the default value of the source field for records collected using this token.  type: string")

	var postCollectorTokensSourcetype string
	postCollectorTokensCmd.Flags().StringVar(&postCollectorTokensSourcetype, "sourcetype", "", "sourcetype is the default value of the sourcetype field for records collected using this token.  type: string")

	ingestCmd.AddCommand(postEventsCmd)

	var postEventsAttributes string
	postEventsCmd.Flags().StringVar(&postEventsAttributes, "attributes", "", "Specifies a JSON object that contains explicit custom fields to be defined at index time.")

	var postEventsFormat string
	postEventsCmd.Flags().StringVar(&postEventsFormat, "format", "", "The format of the event. Can accept values raw, json or event. The default is raw.")

	var postEventsHost string
	postEventsCmd.Flags().StringVar(&postEventsHost, "host", "", "The host value assigned to the event data. Typically, this is the hostname of the client from which you are sending data.")

	var postEventsId string
	postEventsCmd.Flags().StringVar(&postEventsId, "id", "", "An optional ID that uniquely identifies the event data. It is used to deduplicate the data if same data is set multiple times. If ID is not specified, it will be assigned by the system.")

	var postEventsNanos int32
	postEventsCmd.Flags().Int32Var(&postEventsNanos, "nanos", 0, "Optional nanoseconds part of the timestamp.")

	var postEventsSource string
	postEventsCmd.Flags().StringVar(&postEventsSource, "source", "", "The source value to assign to the event data. For example, if you are sending data from an app that you are developing, set this key to the name of the app.")

	var postEventsSourcetype string
	postEventsCmd.Flags().StringVar(&postEventsSourcetype, "sourcetype", "", "The sourcetype value assigned to the event data.")

	var postEventsTimestamp int64
	postEventsCmd.Flags().Int64Var(&postEventsTimestamp, "timestamp", 0, "Epoch time in milliseconds.")

	ingestCmd.AddCommand(postMetricsCmd)

	var postMetricsDefaultDimensions string
	postMetricsCmd.Flags().StringVar(&postMetricsDefaultDimensions, "default-dimensions", "", "Optional. If set, individual metrics inherit these dimensions and can override any and/or all of them.")

	var postMetricsDefaultType string
	postMetricsCmd.Flags().StringVar(&postMetricsDefaultType, "default-type", "", "Optional. If set, individual metrics inherit this type and can optionally override.")

	var postMetricsDefaultUnit string
	postMetricsCmd.Flags().StringVar(&postMetricsDefaultUnit, "default-unit", "", "Optional. If set, individual metrics inherit this unit and can optionally override.")

	var postMetricsHost string
	postMetricsCmd.Flags().StringVar(&postMetricsHost, "host", "", "The host value assigned to the event data. Typically, this is the hostname of the client from which you are sending data.")

	var postMetricsId string
	postMetricsCmd.Flags().StringVar(&postMetricsId, "id", "", "An optional ID that uniquely identifies the metric data. It is used to deduplicate the data if same data is set multiple times. If ID is not specified, it will be assigned by the system.")

	var postMetricsNanos int32
	postMetricsCmd.Flags().Int32Var(&postMetricsNanos, "nanos", 0, "Optional nanoseconds part of the timestamp.")

	var postMetricsSource string
	postMetricsCmd.Flags().StringVar(&postMetricsSource, "source", "", "The source value to assign to the event data. For example, if you are sending data from an app that you are developing, set this key to the name of the app.")

	var postMetricsSourcetype string
	postMetricsCmd.Flags().StringVar(&postMetricsSourcetype, "sourcetype", "", "The sourcetype value assigned to the event data.")

	var postMetricsTimestamp int64
	postMetricsCmd.Flags().Int64Var(&postMetricsTimestamp, "timestamp", 0, "Epoch time in milliseconds.")

	ingestCmd.AddCommand(putCollectorTokenCmd)

	var putCollectorTokenTokenName string
	putCollectorTokenCmd.Flags().StringVar(&putCollectorTokenTokenName, "token-name", "", "This is a required parameter. ")
	putCollectorTokenCmd.MarkFlagRequired("token-name")

	var putCollectorTokenAckEnabled string
	putCollectorTokenCmd.Flags().StringVar(&putCollectorTokenAckEnabled, "ack-enabled", "false", "ack_enabled is set to true if events sent with the auth token should support indexer acknowledgement  type: *bool")

	var putCollectorTokenAllowQueryStringAuth string
	putCollectorTokenCmd.Flags().StringVar(&putCollectorTokenAllowQueryStringAuth, "allow-query-string-auth", "false", "allow_query_string_auth is set to true if this token can be passed into the ingest endpoint's query parameter for auth  type: *bool")

	var putCollectorTokenDescription string
	putCollectorTokenCmd.Flags().StringVar(&putCollectorTokenDescription, "description", "", "description is an optional description of the token.  type: *string")

	var putCollectorTokenDisabled string
	putCollectorTokenCmd.Flags().StringVar(&putCollectorTokenDisabled, "disabled", "false", "disabled is set to true if this auth token has been disabled and cannot be used to send events to HECv1  type: *bool")

	var putCollectorTokenIndex string
	putCollectorTokenCmd.Flags().StringVar(&putCollectorTokenIndex, "index", "", "index is the default value of the index field for records collected using this token  type: *string")

	var putCollectorTokenIndexes []string
	putCollectorTokenCmd.Flags().StringSliceVar(&putCollectorTokenIndexes, "indexes", nil, "indexes is a list of index names that this token is allowed to send events to  type: []string")

	var putCollectorTokenSource string
	putCollectorTokenCmd.Flags().StringVar(&putCollectorTokenSource, "source", "", "source is the default value of the source field for records collected using this token  type: *string")

	var putCollectorTokenSourcetype string
	putCollectorTokenCmd.Flags().StringVar(&putCollectorTokenSourcetype, "sourcetype", "", "sourcetype is the default value of the sourcetype field for records collected using this token  type: *string")

	ingestCmd.AddCommand(uploadFilesCmd)

	var uploadFilesFileName string
	uploadFilesCmd.Flags().StringVar(&uploadFilesFileName, "file-name", "", "File to upload.")

}
