// Package kvstore -- generated by scloudgen
// !! DO NOT EDIT !!
//
package kvstore

import (
	"github.com/spf13/cobra"
	impl "github.com/splunk/splunk-cloud-sdk-go/cmd/scloud/pkg/kvstore"
)

// createIndex -- Creates an index on a collection.
var createIndexCmd = &cobra.Command{
	Use:   "create-index",
	Short: "Creates an index on a collection.",
	RunE:  impl.CreateIndex,
}

// deleteIndex -- Removes an index from a collection.
var deleteIndexCmd = &cobra.Command{
	Use:   "delete-index",
	Short: "Removes an index from a collection.",
	RunE:  impl.DeleteIndex,
}

// deleteRecordByKey -- Deletes a record with a given key.
var deleteRecordByKeyCmd = &cobra.Command{
	Use:   "delete-record-by-key",
	Short: "Deletes a record with a given key.",
	RunE:  impl.DeleteRecordByKey,
}

// deleteRecords -- Removes records in a collection that match the query.
var deleteRecordsCmd = &cobra.Command{
	Use:   "delete-records",
	Short: "Removes records in a collection that match the query.",
	RunE:  impl.DeleteRecords,
}

// getRecordByKey -- Returns a record with a given key.
var getRecordByKeyCmd = &cobra.Command{
	Use:   "get-record-by-key",
	Short: "Returns a record with a given key.",
	RunE:  impl.GetRecordByKey,
}

// insertRecord -- Inserts a record into a collection.
var insertRecordCmd = &cobra.Command{
	Use:   "insert-record",
	Short: "Inserts a record into a collection.",
	RunE:  impl.InsertRecord,
}

// insertRecords -- Inserts multiple records in a single request.
var insertRecordsCmd = &cobra.Command{
	Use:   "insert-records",
	Short: "Inserts multiple records in a single request.",
	RunE:  impl.InsertRecords,
}

// listIndexes -- Returns a list of all indexes on a collection.
var listIndexesCmd = &cobra.Command{
	Use:   "list-indexes",
	Short: "Returns a list of all indexes on a collection.",
	RunE:  impl.ListIndexes,
}

// listRecords -- Use key-value query parameters to filter fields. Fields are implicitly ANDed and values for the same field are implicitly ORed.
var listRecordsCmd = &cobra.Command{
	Use:   "list-records",
	Short: "Use key-value query parameters to filter fields. Fields are implicitly ANDed and values for the same field are implicitly ORed.",
	RunE:  impl.ListRecords,
}

// ping -- Returns the health status from the database.
var pingCmd = &cobra.Command{
	Use:   "ping",
	Short: "Returns the health status from the database.",
	RunE:  impl.Ping,
}

// putRecord -- Updates the record with a given key, either by inserting or replacing the record.
var putRecordCmd = &cobra.Command{
	Use:   "put-record",
	Short: "Updates the record with a given key, either by inserting or replacing the record.",
	RunE:  impl.PutRecord,
}

// queryRecords -- Returns a list of query records in a collection.
var queryRecordsCmd = &cobra.Command{
	Use:   "query-records",
	Short: "Returns a list of query records in a collection.",
	RunE:  impl.QueryRecords,
}

func init() {
	kvstoreCmd.AddCommand(createIndexCmd)

	var createIndexCollection string
	createIndexCmd.Flags().StringVar(&createIndexCollection, "collection", "", "This is a required parameter. The name of the collection.")
	createIndexCmd.MarkFlagRequired("collection")

	var createIndexFields string
	createIndexCmd.Flags().StringVar(&createIndexFields, "fields", "", "This is a required parameter. ")
	createIndexCmd.MarkFlagRequired("fields")

	var createIndexName string
	createIndexCmd.Flags().StringVar(&createIndexName, "name", "", "This is a required parameter. The name of the index.")
	createIndexCmd.MarkFlagRequired("name")

	kvstoreCmd.AddCommand(deleteIndexCmd)

	var deleteIndexCollection string
	deleteIndexCmd.Flags().StringVar(&deleteIndexCollection, "collection", "", "This is a required parameter. The name of the collection.")
	deleteIndexCmd.MarkFlagRequired("collection")

	var deleteIndexIndex string
	deleteIndexCmd.Flags().StringVar(&deleteIndexIndex, "index", "", "This is a required parameter. The name of the index.")
	deleteIndexCmd.MarkFlagRequired("index")

	kvstoreCmd.AddCommand(deleteRecordByKeyCmd)

	var deleteRecordByKeyCollection string
	deleteRecordByKeyCmd.Flags().StringVar(&deleteRecordByKeyCollection, "collection", "", "This is a required parameter. The name of the collection.")
	deleteRecordByKeyCmd.MarkFlagRequired("collection")

	var deleteRecordByKeyKey string
	deleteRecordByKeyCmd.Flags().StringVar(&deleteRecordByKeyKey, "key", "", "This is a required parameter. The key of the record.")
	deleteRecordByKeyCmd.MarkFlagRequired("key")

	kvstoreCmd.AddCommand(deleteRecordsCmd)

	var deleteRecordsCollection string
	deleteRecordsCmd.Flags().StringVar(&deleteRecordsCollection, "collection", "", "This is a required parameter. The name of the collection.")
	deleteRecordsCmd.MarkFlagRequired("collection")

	var deleteRecordsQuery string
	deleteRecordsCmd.Flags().StringVar(&deleteRecordsQuery, "query", "", "Query JSON expression.")

	kvstoreCmd.AddCommand(getRecordByKeyCmd)

	var getRecordByKeyCollection string
	getRecordByKeyCmd.Flags().StringVar(&getRecordByKeyCollection, "collection", "", "This is a required parameter. The name of the collection.")
	getRecordByKeyCmd.MarkFlagRequired("collection")

	var getRecordByKeyKey string
	getRecordByKeyCmd.Flags().StringVar(&getRecordByKeyKey, "key", "", "This is a required parameter. The key of the record.")
	getRecordByKeyCmd.MarkFlagRequired("key")

	kvstoreCmd.AddCommand(insertRecordCmd)

	var insertRecordBody string
	insertRecordCmd.Flags().StringVar(&insertRecordBody, "body", "", "The request body")
	insertRecordCmd.MarkFlagRequired("body")

	var insertRecordCollection string
	insertRecordCmd.Flags().StringVar(&insertRecordCollection, "collection", "", "This is a required parameter. The name of the collection.")
	insertRecordCmd.MarkFlagRequired("collection")

	kvstoreCmd.AddCommand(insertRecordsCmd)

	var insertRecordsBody string
	insertRecordsCmd.Flags().StringVar(&insertRecordsBody, "body", "", "The request body")
	insertRecordsCmd.MarkFlagRequired("body")

	var insertRecordsCollection string
	insertRecordsCmd.Flags().StringVar(&insertRecordsCollection, "collection", "", "This is a required parameter. The name of the collection.")
	insertRecordsCmd.MarkFlagRequired("collection")

	kvstoreCmd.AddCommand(listIndexesCmd)

	var listIndexesCollection string
	listIndexesCmd.Flags().StringVar(&listIndexesCollection, "collection", "", "This is a required parameter. The name of the collection.")
	listIndexesCmd.MarkFlagRequired("collection")

	kvstoreCmd.AddCommand(listRecordsCmd)

	var listRecordsCollection string
	listRecordsCmd.Flags().StringVar(&listRecordsCollection, "collection", "", "This is a required parameter. The name of the collection.")
	listRecordsCmd.MarkFlagRequired("collection")

	var listRecordsCount int32
	listRecordsCmd.Flags().Int32Var(&listRecordsCount, "count", 0, "Maximum number of records to return.")

	var listRecordsFields []string
	listRecordsCmd.Flags().StringSliceVar(&listRecordsFields, "fields", nil, "Comma-separated list of fields to include or exclude.")

	var listRecordsFilters string
	listRecordsCmd.Flags().StringVar(&listRecordsFilters, "filters", "", "")

	var listRecordsOffset int32
	listRecordsCmd.Flags().Int32Var(&listRecordsOffset, "offset", 0, "Number of records to skip from the start.")

	var listRecordsOrderby []string
	listRecordsCmd.Flags().StringSliceVar(&listRecordsOrderby, "orderby", nil, "Sort order. Format is `<field>:<sort order>`. Valid sort orders are 1 for ascending, -1 for descending.")

	kvstoreCmd.AddCommand(pingCmd)

	kvstoreCmd.AddCommand(putRecordCmd)

	var putRecordBody string
	putRecordCmd.Flags().StringVar(&putRecordBody, "body", "", "The request body")
	putRecordCmd.MarkFlagRequired("body")

	var putRecordCollection string
	putRecordCmd.Flags().StringVar(&putRecordCollection, "collection", "", "This is a required parameter. The name of the collection.")
	putRecordCmd.MarkFlagRequired("collection")

	var putRecordKey string
	putRecordCmd.Flags().StringVar(&putRecordKey, "key", "", "This is a required parameter. The key of the record.")
	putRecordCmd.MarkFlagRequired("key")

	kvstoreCmd.AddCommand(queryRecordsCmd)

	var queryRecordsCollection string
	queryRecordsCmd.Flags().StringVar(&queryRecordsCollection, "collection", "", "This is a required parameter. The name of the collection.")
	queryRecordsCmd.MarkFlagRequired("collection")

	var queryRecordsCount int32
	queryRecordsCmd.Flags().Int32Var(&queryRecordsCount, "count", 0, "Maximum number of records to return.")

	var queryRecordsFields []string
	queryRecordsCmd.Flags().StringSliceVar(&queryRecordsFields, "fields", nil, "Comma-separated list of fields to include or exclude.")

	var queryRecordsOffset int32
	queryRecordsCmd.Flags().Int32Var(&queryRecordsOffset, "offset", 0, "Number of records to skip from the start.")

	var queryRecordsOrderby []string
	queryRecordsCmd.Flags().StringSliceVar(&queryRecordsOrderby, "orderby", nil, "Sort order. Format is `<field>:<sort order>`. Valid sort orders are 1 for ascending, -1 for descending.")

	var queryRecordsQuery string
	queryRecordsCmd.Flags().StringVar(&queryRecordsQuery, "query", "", "Query JSON expression.")

}
